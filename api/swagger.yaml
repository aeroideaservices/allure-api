openapi: 3.0.1
info:
  title: allure-report-service
  description: |-
    Branch **HEAD**

    Commit **1858ebdc07ef5d4e4615f9b1f2695e658df2e4ca**
  license:
    name: License Policy
    url: https://qameta.io/license-policy/
  version: 4.24.1
servers:
- url: /api/rs
paths:
  /md/preview:
    get:
      tags:
      - markdown-preview-controller
      summary: Converts markdown text to html
      operationId: toHtml
      parameters:
      - name: body
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                type: string
                x-content-type: text/html
    post:
      tags:
      - markdown-preview-controller
      summary: Converts markdown text to html
      operationId: toHtml_1
      parameters:
      - name: body
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                type: string
                x-content-type: text/html
  /testresult/attachment/{id}/content:
    get:
      tags:
      - test-result-attachment-controller
      operationId: readContent
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: inline
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StreamingResponseBody'
    put:
      tags:
      - test-result-attachment-controller
      operationId: updateContent
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/id_content_body'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestResultAttachmentRowDto'
  /testfixtureresult/attachment/{id}/content:
    get:
      tags:
      - test-fixture-result-attachment-controller
      operationId: readContent_1
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: inline
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StreamingResponseBody'
    put:
      tags:
      - test-fixture-result-attachment-controller
      operationId: updateContent_1
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/id_content_body_1'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestFixtureResultAttachmentRowDto'
  /testcase/attachment/{id}/content:
    get:
      tags:
      - test-case-attachment-controller
      summary: Get attachment content by id
      operationId: readContent_2
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: inline
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StreamingResponseBody'
    put:
      tags:
      - test-case-attachment-controller
      summary: Update test case attachment content
      operationId: updateContent_2
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/id_content_body_2'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestCaseAttachmentRowDto'
  /sharedstep/attachment/{id}/content:
    get:
      tags:
      - shared-step-attachment-controller
      summary: Get attachment content by id
      operationId: readContent_3
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: inline
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StreamingResponseBody'
    put:
      tags:
      - shared-step-attachment-controller
      summary: Update shared step attachment content
      operationId: updateContent_3
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/id_content_body_3'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SharedStepAttachmentRowDto'
  /workflowschema:
    get:
      tags:
      - workflow-schema-controller
      summary: Find all workflow schemas for given project
      operationId: findAll
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "id,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageWorkflowSchemaDto'
    post:
      tags:
      - workflow-schema-controller
      summary: Create a new workflow schema
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowSchemaCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WorkflowSchemaDto'
  /workflow:
    get:
      tags:
      - workflow-controller
      summary: Find all workflows
      operationId: findAll_1
      parameters:
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageWorkflowDto'
    post:
      tags:
      - workflow-controller
      summary: Create a new workflow
      operationId: create_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WorkflowDto'
  /widget:
    get:
      tags:
      - widget-controller
      operationId: findAllByDashboard
      parameters:
      - name: dashboardId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageWidgetDto'
    post:
      tags:
      - widget-controller
      operationId: create_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WidgetCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WidgetDto'
  /upload:
    post:
      tags:
      - upload-controller
      summary: Upload test results
      operationId: uploadResults
      parameters:
      - name: id
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/upload_body'
      responses:
        "202":
          description: Accepted
  /upload/stop:
    post:
      tags:
      - upload-controller
      summary: Notifies about external job run stop
      operationId: stop
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalRunStopRequestDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ExternalRunResponseDto'
  /upload/run:
    post:
      tags:
      - upload-controller
      summary: Notifies about external job run start
      operationId: start
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalRunStartRequestDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ExternalRunResponseDto'
  /upload/start:
    post:
      tags:
      - upload-controller
      summary: Notifies about external job run start
      operationId: start_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalRunStartRequestDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ExternalRunResponseDto'
  /upload/session:
    post:
      tags:
      - upload-controller
      summary: Creates test session for manual upload
      operationId: sessionJobRun_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManualSessionRequestDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestSessionResponseDto'
  /upload/file:
    post:
      tags:
      - upload-controller
      summary: Upload files with test results
      operationId: uploadResultsFiles
      parameters:
      - name: id
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/upload_file_body'
      responses:
        "202":
          description: Accepted
  /upload/archive:
    post:
      tags:
      - upload-controller
      summary: Upload archives with test results
      operationId: uploadResultsArchives
      parameters:
      - name: id
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/upload_archive_body'
      responses:
        "202":
          description: Accepted
  /treepath:
    get:
      tags:
      - tree-path-controller
      operationId: findAll_2
      parameters:
      - name: treeId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTreePathDto'
    post:
      tags:
      - tree-path-controller
      operationId: create_3
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TreePathCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TreePathDto'
  /tree:
    get:
      tags:
      - tree-controller
      operationId: findAll_3
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTreeDto'
    post:
      tags:
      - tree-controller
      operationId: create_4
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TreeCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TreeDto'
  /testresulttree/select:
    post:
      tags:
      - test-result-tree-selection-controller
      summary: Count test cases by tree select
      operationId: countLeaves
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestResultTreeSelectionDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: integer
                format: int64
                x-content-type: '*/*'
  /testresult:
    get:
      tags:
      - test-result-controller
      summary: Finds all test results by given launch
      operationId: findAll_4
      parameters:
      - name: launchId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "createdDate,DESC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTestResultDto'
    post:
      tags:
      - test-result-controller
      summary: Creates a test result
      operationId: create_5
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestResultCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestResultDto'
  /testresult/{testResultId}/testkey:
    get:
      tags:
      - test-result-test-key-controller
      summary: Find test keys for test result
      operationId: getKeys
      parameters:
      - name: testResultId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestKeyDto'
                x-content-type: '*/*'
    post:
      tags:
      - test-result-test-key-controller
      summary: Set test keys to test result
      operationId: setKeys
      parameters:
      - name: testResultId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/TestKeyDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestKeyDto'
                x-content-type: '*/*'
  /testresult/{testResultId}/rerun:
    post:
      tags:
      - test-result-rerun-controller
      summary: Schedule manual rerun for test case
      operationId: retry
      parameters:
      - name: testResultId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestResultRerunDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/IdAndNameOnlyDto'
  /testresult/{testResultId}/retry:
    post:
      tags:
      - test-result-rerun-controller
      summary: Schedule manual rerun for test case
      operationId: retry_1
      parameters:
      - name: testResultId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestResultRerunDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/IdAndNameOnlyDto'
  /testresult/{testResultId}/members:
    get:
      tags:
      - test-result-members-controller
      summary: Find user roles for test result
      operationId: getMembers
      parameters:
      - name: testResultId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberDto'
                x-content-type: '*/*'
    post:
      tags:
      - test-result-members-controller
      summary: Set user roles for test result
      operationId: setMembers
      parameters:
      - name: testResultId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/MemberDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberDto'
                x-content-type: '*/*'
  /testresult/{testResultId}/issue:
    get:
      tags:
      - test-result-issue-controller
      summary: Find issues for test result
      operationId: getIssues
      parameters:
      - name: testResultId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IssueDto'
                x-content-type: '*/*'
    post:
      tags:
      - test-result-issue-controller
      summary: Set issues to test result
      operationId: setIssues
      parameters:
      - name: testResultId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/IssueDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IssueDto'
                x-content-type: '*/*'
  /testresult/{testResultId}/defect:
    get:
      tags:
      - test-result-defect-controller
      operationId: getDefects
      parameters:
      - name: testResultId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageDefectRowDto'
    post:
      tags:
      - test-result-defect-controller
      operationId: createDefect
      parameters:
      - name: testResultId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestResultNewDefectDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DefectDto'
  /testresult/{testResultId}/defect/{defectId}:
    post:
      tags:
      - test-result-defect-controller
      operationId: link
      parameters:
      - name: testResultId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: defectId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestResultLinkDefectDto'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DefectDto'
    delete:
      tags:
      - test-result-defect-controller
      operationId: unlink
      parameters:
      - name: testResultId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: defectId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
  /testresult/{testResultId}/cfv:
    get:
      tags:
      - test-result-custom-field-controller
      summary: Find custom field values for test result
      operationId: getCfv
      parameters:
      - name: testResultId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomFieldValueDto'
                x-content-type: '*/*'
    post:
      tags:
      - test-result-custom-field-controller
      summary: Set custom field values to test result
      operationId: setIssues_1
      parameters:
      - name: testResultId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CustomFieldValueDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomFieldValueDto'
                x-content-type: '*/*'
  /testresult/{id}/unmute:
    post:
      tags:
      - test-result-mute-controller
      summary: Unmute test result
      operationId: unmute
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "202":
          description: Accepted
  /testresult/{id}/resolve:
    post:
      tags:
      - test-result-run-controller
      summary: Resolve test result
      operationId: resolve
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResolveRequestDto'
        required: true
      responses:
        "202":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestResultRowDto'
  /testresult/{id}/mute:
    post:
      tags:
      - test-result-mute-controller
      summary: Mute test result
      operationId: mute
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestResultMuteReason'
        required: true
      responses:
        "202":
          description: Accepted
  /testresult/{id}/assign:
    post:
      tags:
      - test-result-run-controller
      summary: Assign test result
      operationId: assign
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignRequestDto'
        required: true
      responses:
        "202":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestResultRowDto'
  /testresult/bulk/unmute:
    post:
      tags:
      - test-result-bulk-controller
      summary: Unmute all selected test results
      operationId: unmute_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestResultBulkDto'
        required: true
      responses:
        "204":
          description: No Content
  /testresult/bulk/tag/remove:
    post:
      tags:
      - test-result-bulk-controller
      summary: Remove tags for all selected test results
      operationId: tagsRemove
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestResultBulkEntityIdsDto'
        required: true
      responses:
        "204":
          description: No Content
  /testresult/bulk/tag/add:
    post:
      tags:
      - test-result-bulk-controller
      summary: Add tags for all selected test results
      operationId: tagsAdd
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestResultBulkTagDto'
        required: true
      responses:
        "204":
          description: No Content
  /testresult/bulk/resolve:
    post:
      tags:
      - test-result-bulk-controller
      summary: Resolve all selected test results
      operationId: resolve_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestResultBulkResolveDto'
        required: true
      responses:
        "204":
          description: No Content
  /testresult/bulk/rerun:
    post:
      tags:
      - test-result-bulk-controller
      summary: Rerun all selected test results
      operationId: rerun
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestResultBulkRerunDto'
        required: true
      responses:
        "204":
          description: No Content
  /testresult/bulk/mute:
    post:
      tags:
      - test-result-bulk-controller
      summary: Mute all selected test results
      operationId: mute_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestResultBulkMuteDto'
        required: true
      responses:
        "204":
          description: No Content
  /testresult/bulk/hide:
    post:
      tags:
      - test-result-bulk-controller
      summary: Hide all selected test results
      operationId: hide
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestResultBulkDto'
        required: true
      responses:
        "204":
          description: No Content
  /testresult/bulk/defect/link:
    post:
      tags:
      - test-result-bulk-controller
      summary: Link defects for all selected test results
      operationId: linkDefects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestResultBulkEntityIdsDto'
        required: true
      responses:
        "204":
          description: No Content
  /testresult/bulk/assign:
    post:
      tags:
      - test-result-bulk-controller
      summary: Assign all selected test results
      operationId: assign_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestResultBulkAssignDto'
        required: true
      responses:
        "204":
          description: No Content
  /testresult/attachment:
    get:
      tags:
      - test-result-attachment-controller
      operationId: findAll_5
      parameters:
      - name: testResultId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTestResultAttachmentRowDto'
    post:
      tags:
      - test-result-attachment-controller
      operationId: create_6
      parameters:
      - name: testResultId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/testresult_attachment_body'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestResultAttachmentRowDto'
                x-content-type: '*/*'
  /testplan:
    get:
      tags:
      - test-plan-controller
      summary: Find all test plans for given project
      operationId: findAllByProject
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: name
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTestPlanDto'
    post:
      tags:
      - test-plan-controller
      summary: Create a new test plan
      operationId: create_7
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestPlanCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestPlanDto'
  /testplan/{id}/sync:
    post:
      tags:
      - test-plan-controller
      summary: Sync test plan
      operationId: sync
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestPlanDto'
  /testplan/{id}/run:
    post:
      tags:
      - test-plan-controller
      summary: Run test plan by given id
      operationId: run
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestPlanRunRequestDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LaunchDto'
  /testplan/{id}/resetjob:
    post:
      tags:
      - test-plan-controller
      summary: Reset test plan
      operationId: resetJobs
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestPlanDto'
  /testplan/{id}/jobparameter:
    post:
      tags:
      - test-plan-controller
      summary: Configure test plan job parameters
      operationId: setJobParameters
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestPlanJobParametersDto'
        required: true
      responses:
        "204":
          description: No Content
  /testplan/{id}/assign:
    post:
      tags:
      - test-plan-controller
      summary: Assign test plan test cases to user
      operationId: assign_2
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestPlanAssignDto'
        required: true
      responses:
        "204":
          description: No Content
  /testlayerschema:
    get:
      tags:
      - test-layer-schema-controller
      summary: Find all test layer schemas for given project
      operationId: findAll_6
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "id,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTestLayerSchemaDto'
    post:
      tags:
      - test-layer-schema-controller
      summary: Create a new test layer schema
      operationId: create_8
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestLayerSchemaCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestLayerSchemaDto'
  /testlayer:
    get:
      tags:
      - test-layer-controller
      operationId: findAll_7
      parameters:
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "id,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTestLayerDto'
    post:
      tags:
      - test-layer-controller
      operationId: create_9
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestLayerCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestLayerDto'
  /testkeyschema:
    get:
      tags:
      - test-key-schema-controller
      summary: Find all test key schemas for given project
      operationId: findAll_8
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "key,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTestKeySchemaDto'
    post:
      tags:
      - test-key-schema-controller
      summary: Create a new test key schema
      operationId: create_10
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestKeySchemaCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestKeySchemaDto'
  /testfixtureresult/attachment:
    get:
      tags:
      - test-fixture-result-attachment-controller
      operationId: findAll_9
      parameters:
      - name: tfrId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTestFixtureResultAttachmentRowDto'
    post:
      tags:
      - test-fixture-result-attachment-controller
      operationId: create_11
      parameters:
      - name: tfrId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/testfixtureresult_attachment_body'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestFixtureResultAttachmentRowDto'
                x-content-type: '*/*'
  /testcaseupdateschema:
    get:
      tags:
      - test-case-update-schema-controller
      summary: Find all test case update schemas for given project
      operationId: findAll_10
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestCaseUpdateSchemaDto'
                x-content-type: '*/*'
    post:
      tags:
      - test-case-update-schema-controller
      summary: Create a new test case update schema
      operationId: create_12
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseUpdateSchemaCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestCaseUpdateSchemaDto'
  /testcasetree/select:
    post:
      tags:
      - test-case-tree-selection-controller
      summary: Count test cases by tree select
      operationId: countLeaves_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseTreeSelectionDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: integer
                format: int64
                x-content-type: '*/*'
  /testcasetree/runstats:
    post:
      tags:
      - test-case-tree-controller
      summary: Get run information
      operationId: getRunStats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseTreeRunStatRequestDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestCaseRunByStats'
  /testcasetree/leaf:
    get:
      tags:
      - test-case-tree-controller
      summary: Find tree leaves for node (AQL)
      operationId: getLeaves_1
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: search
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: treeId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: filterId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: path
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
          default: []
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 100
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      - name: baseRql
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTestCaseTreeLeafDto'
    post:
      tags:
      - test-case-tree-controller
      summary: Add a new group
      operationId: addLeaf
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: treeId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: path
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
          default: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseTreeLeafAddDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestCaseTreeLeafDto'
  /testcasetree/leaf/rename:
    post:
      tags:
      - test-case-tree-controller
      summary: Rename tree leaf
      operationId: renameLeaf
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: leafId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseTreeLeafRenameDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestCaseTreeLeafDto'
  /testcasetree/job:
    post:
      tags:
      - test-case-tree-controller
      summary: Get information about jobs that will be used to run selected test cases
      operationId: getJobsInfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseTreeRunStatRequestDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobTestCasesStatDto'
                x-content-type: '*/*'
  /testcasetree/group:
    get:
      tags:
      - test-case-tree-controller
      summary: Find tree groups for node (AQL)
      operationId: getGroups_2_1
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: search
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: treeId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: filterId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: path
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
          default: []
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 100
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      - name: baseRql
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTestCaseTreeGroupDto'
    post:
      tags:
      - test-case-tree-controller
      summary: Add a new group (AQL)
      operationId: addGroup_1
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: filterId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: search
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: treeId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: path
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
          default: []
      - name: baseRql
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseTreeGroupAddDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestCaseTreeGroupDto'
  /testcasetree/group/rename:
    post:
      tags:
      - test-case-tree-controller
      summary: Rename tree group (AQL)
      operationId: renameGroup_1
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: filterId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: search
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: treeId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: path
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
          default: []
      - name: baseRql
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseTreeGroupRenameDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestCaseTreeGroupDto'
  /testcase:
    get:
      tags:
      - test-case-controller
      summary: Find all test cases for specified project
      operationId: findAll_11
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "createdDate,DESC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTestCaseRowDto'
    post:
      tags:
      - test-case-controller
      summary: Create a new test case
      operationId: create_13
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestCaseDto'
  /testcase/{testCaseId}/testkey:
    get:
      tags:
      - test-case-test-key-controller
      summary: Find test keys for test case
      operationId: getKeys_1
      parameters:
      - name: testCaseId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestKeyDto'
                x-content-type: '*/*'
    post:
      tags:
      - test-case-test-key-controller
      summary: Set test keys to test case
      operationId: setKeys_1
      parameters:
      - name: testCaseId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/TestKeyDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestKeyDto'
                x-content-type: '*/*'
  /testcase/{testCaseId}/tag:
    get:
      tags:
      - test-case-tag-controller
      summary: Find tags for test case
      operationId: getTags
      parameters:
      - name: testCaseId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestTagDto'
                x-content-type: '*/*'
    post:
      tags:
      - test-case-tag-controller
      summary: Set test tags for test case
      operationId: setTags
      parameters:
      - name: testCaseId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/TestTagDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestTagDto'
                x-content-type: '*/*'
  /testcase/{testCaseId}/relation:
    get:
      tags:
      - test-case-relation-controller
      summary: Find relations for test case
      operationId: getRelations
      parameters:
      - name: testCaseId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestCaseRelationDto'
                x-content-type: '*/*'
    post:
      tags:
      - test-case-relation-controller
      summary: Set relations for test case
      operationId: setRelations
      parameters:
      - name: testCaseId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/TestCaseRelationDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestCaseRelationDto'
                x-content-type: '*/*'
  /testcase/{testCaseId}/members:
    get:
      tags:
      - test-case-members-controller
      summary: Find user roles for test case
      operationId: getMembers_2
      parameters:
      - name: testCaseId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberDto'
                x-content-type: '*/*'
    post:
      tags:
      - test-case-members-controller
      summary: Set user roles for test case
      operationId: setMembers_1
      parameters:
      - name: testCaseId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/MemberDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberDto'
                x-content-type: '*/*'
  /testcase/{testCaseId}/issue:
    get:
      tags:
      - test-case-issue-controller
      summary: Find issues for test case
      operationId: getIssues_1
      parameters:
      - name: testCaseId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IssueDto'
                x-content-type: '*/*'
    post:
      tags:
      - test-case-issue-controller
      summary: Set issues to test case
      operationId: setIssues_2
      parameters:
      - name: testCaseId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/IssueDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IssueDto'
                x-content-type: '*/*'
  /testcase/{testCaseId}/example:
    get:
      tags:
      - test-case-example-controller
      operationId: getExamples
      parameters:
      - name: testCaseId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "id,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTestCaseExampleDto'
    post:
      tags:
      - test-case-example-controller
      operationId: setExamples
      parameters:
      - name: testCaseId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: array
                items:
                  $ref: '#/components/schemas/ParameterValueDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestCaseExampleDto'
                x-content-type: '*/*'
  /testcase/{testCaseId}/defect/{defectId}:
    post:
      tags:
      - test-case-defect-controller
      operationId: link_1
      parameters:
      - name: testCaseId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: defectId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
    delete:
      tags:
      - test-case-defect-controller
      operationId: unlink_1
      parameters:
      - name: testCaseId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: defectId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /testcase/{testCaseId}/cfv:
    get:
      tags:
      - test-case-custom-field-controller
      summary: Find custom field values for test case
      operationId: getCfv_1
      parameters:
      - name: testCaseId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomFieldValueDto'
                x-content-type: '*/*'
    post:
      tags:
      - test-case-custom-field-controller
      summary: Set custom field values for test case
      operationId: setCfv
      parameters:
      - name: testCaseId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CustomFieldValueDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomFieldValueDto'
                x-content-type: '*/*'
  /testcase/{id}/scenario:
    get:
      tags:
      - test-case-scenario-controller
      summary: Find scenario for test case
      operationId: getScenario
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestCaseScenarioDto'
    post:
      tags:
      - test-case-scenario-controller
      summary: Update scenario for test case
      operationId: updateScenario
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseScenarioDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestCaseScenarioDto'
    delete:
      tags:
      - test-case-scenario-controller
      summary: Delete scenario for test case
      operationId: deleteScenario
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /testcase/{id}/restore:
    post:
      tags:
      - test-case-controller
      summary: Restore test case by id
      operationId: restore
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestCaseDto'
  /testcase/{id}/migrate:
    post:
      tags:
      - test-case-scenario-controller
      summary: Migrate scenario for test case
      operationId: migrateScenario
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "202":
          description: Accepted
  /testcase/{id}/detachautomation:
    post:
      tags:
      - test-case-controller
      summary: Detach automation from test case
      operationId: detachAutomation
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseDetachAutomationRqDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestCaseDto'
  /testcase/{id}/clone:
    post:
      tags:
      - test-case-clone-controller
      summary: Clone test case
      operationId: clone
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseCloneRqDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestCaseRowDto'
  /testcase/tms/sync:
    post:
      tags:
      - test-case-export-controller
      operationId: exportToTms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectSyncRequest'
        required: true
      responses:
        "200":
          description: OK
  /testcase/step:
    post:
      tags:
      - test-case-scenario-controller
      summary: Create scenario step
      operationId: create_14
      parameters:
      - name: beforeId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: afterId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScenarioStepCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ScenarioStepCreatedResponseDto'
  /testcase/step/{id}/move:
    post:
      tags:
      - test-case-scenario-controller
      summary: Move scenario step
      operationId: move
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScenarioStepMoveDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NormalizedScenarioDto'
  /testcase/step/{id}/copy:
    post:
      tags:
      - test-case-scenario-controller
      summary: Copy scenario step
      operationId: move_1
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScenarioStepCopyDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NormalizedScenarioDto'
  /testcase/import/csv/{importRequestId}/submit:
    post:
      tags:
      - test-case-csv-import-controller
      summary: Submit testcase csv import
      operationId: submit
      parameters:
      - name: importRequestId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseCsvImportOptions'
        required: true
      responses:
        "200":
          description: OK
  /testcase/import/csv/{importRequestId}/preview:
    post:
      tags:
      - test-case-csv-import-controller
      summary: Preview testcase csv import
      operationId: preview
      parameters:
      - name: importRequestId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseCsvPreviewOptions'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestCaseOverviewDto'
  /testcase/import/csv/{importRequestId}/info:
    post:
      tags:
      - test-case-csv-import-controller
      summary: Get testcase csv import file and return import info
      operationId: info
      parameters:
      - name: importRequestId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CsvImportOptions'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ImportRequestInfoDto'
  /testcase/example/nwise:
    post:
      tags:
      - test-case-example-controller
      operationId: generate
      parameters:
      - name: "n"
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 1
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/TestCaseParameterValues'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestCaseExampleDto'
                x-content-type: '*/*'
  /testcase/bulk/testplan/create:
    post:
      tags:
      - test-case-bulk-controller
      summary: Create test plan from selected test cases
      operationId: createTestPlan
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseBulkTestPlanCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestPlanDto'
  /testcase/bulk/tag/remove:
    post:
      tags:
      - test-case-bulk-controller
      summary: Remove tags for all test cases
      operationId: tagsRemove_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseBulkEntityIdsDto'
        required: true
      responses:
        "204":
          description: No Content
  /testcase/bulk/tag/add:
    post:
      tags:
      - test-case-bulk-controller
      summary: Add tags for all test cases
      operationId: tagsAdd_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseBulkTagDto'
        required: true
      responses:
        "204":
          description: No Content
  /testcase/bulk/sync:
    post:
      tags:
      - test-case-sync-controller
      summary: Clone test case
      operationId: sync_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseSyncRqDto'
        required: true
      responses:
        "202":
          description: Accepted
  /testcase/bulk/status/set:
    post:
      tags:
      - test-case-bulk-controller
      summary: Set specified status for all test cases
      operationId: statusSet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseBulkStatusDto'
        required: true
      responses:
        "204":
          description: No Content
  /testcase/bulk/run/new:
    post:
      tags:
      - test-case-bulk-controller
      summary: Run selected test cases in a new launch
      operationId: run_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseBulkRunNewLaunchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LaunchDto'
  /testcase/bulk/run:
    post:
      tags:
      - test-case-bulk-controller
      summary: Run selected test cases in a new launch
      operationId: run_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseBulkRunNewLaunchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LaunchDto'
  /testcase/bulk/run/existing:
    post:
      tags:
      - test-case-bulk-controller
      summary: Run selected test cases in an existing launch
      operationId: run_3
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseBulkRunExistingLaunchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LaunchDto'
  /testcase/bulk/remove:
    post:
      tags:
      - test-case-bulk-controller
      summary: Remove test cases by ids
      operationId: deleteAll
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseBulkDto'
        required: true
      responses:
        "204":
          description: No Content
  /testcase/bulk/mute/add:
    post:
      tags:
      - test-case-bulk-controller
      summary: Add mute for all test cases
      operationId: muteAdd
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseBulkMuteDto'
        required: true
      responses:
        "200":
          description: OK
  /testcase/bulk/move:
    post:
      tags:
      - test-case-bulk-controller
      summary: Move test cases to other project
      operationId: moveAll
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseBulkProjectChangeDto'
        required: true
      responses:
        "202":
          description: Accepted
  /testcase/bulk/member/remove:
    post:
      tags:
      - test-case-bulk-controller
      summary: Remove member for all test cases
      operationId: memberRemove
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseBulkEntityIdsDto'
        required: true
      responses:
        "204":
          description: No Content
  /testcase/bulk/member/add:
    post:
      tags:
      - test-case-bulk-controller
      summary: Add members for all test cases
      operationId: memberAdd
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseBulkMemberDto'
        required: true
      responses:
        "200":
          description: OK
  /testcase/bulk/layer/set:
    post:
      tags:
      - test-case-bulk-controller
      summary: Set specified layer for all test cases
      operationId: layerSet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseBulkLayerDto'
        required: true
      responses:
        "204":
          description: No Content
  /testcase/bulk/issue/remove:
    post:
      tags:
      - test-case-bulk-controller
      summary: Remove issues for all test cases
      operationId: issueRemove
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseBulkEntityIdsDto'
        required: true
      responses:
        "204":
          description: No Content
  /testcase/bulk/issue/add:
    post:
      tags:
      - test-case-bulk-controller
      summary: Add issues for all test cases
      operationId: issueAdd
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseBulkIssueDto'
        required: true
      responses:
        "200":
          description: OK
  /testcase/bulk/externallink/add:
    post:
      tags:
      - test-case-bulk-controller
      summary: Add external link for all test cases
      operationId: externalLinkAdd
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseBulkExternalLinkDto'
        required: true
      responses:
        "200":
          description: OK
  /testcase/bulk/clone:
    post:
      tags:
      - test-case-bulk-controller
      summary: Clone test cases by ids
      operationId: cloneAll
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseBulkCloneDto'
        required: true
      responses:
        "202":
          description: Accepted
  /testcase/bulk/cfv/remove:
    post:
      tags:
      - test-case-bulk-controller
      summary: Remove custom field values for all test cases
      operationId: cfvRemove
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseBulkEntityIdsDto'
        required: true
      responses:
        "204":
          description: No Content
  /testcase/bulk/cfv/add:
    post:
      tags:
      - test-case-bulk-controller
      summary: Add custom field values for all test cases
      operationId: cfvAdd
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseBulkCfvDto'
        required: true
      responses:
        "200":
          description: OK
  /testcase/attachment:
    get:
      tags:
      - test-case-attachment-controller
      summary: Find attachments for test case
      operationId: findAll_13
      parameters:
      - name: testCaseId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTestCaseAttachmentRowDto'
    post:
      tags:
      - test-case-attachment-controller
      summary: Upload new test case attachments
      operationId: create_15
      parameters:
      - name: testCaseId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/testcase_attachment_body'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestCaseAttachmentRowDto'
                x-content-type: '*/*'
  /tag:
    get:
      tags:
      - test-tag-controller
      summary: Find all test tags
      operationId: findAll_14
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestTagDto'
                x-content-type: '*/*'
    post:
      tags:
      - test-tag-controller
      summary: Create a new test tag
      operationId: create_16
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestTagCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestTagDto'
  /storage/upgrade/v2/test-result:
    post:
      tags:
      - blob-storage-upgrade-controller
      operationId: migrateTestResult
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: limit
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: removeOnError
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "202":
          description: Accepted
  /storage/upgrade/v2/test-result-attachment:
    post:
      tags:
      - blob-storage-upgrade-controller
      operationId: migrateTestResultAttachment
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: limit
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: removeOnError
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "202":
          description: Accepted
  /storage/upgrade/v2/test-fixture-result:
    post:
      tags:
      - blob-storage-upgrade-controller
      operationId: migrateTestFixtureResult
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: limit
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: removeOnError
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "202":
          description: Accepted
  /storage/upgrade/v2/test-fixture-result-attachment:
    post:
      tags:
      - blob-storage-upgrade-controller
      operationId: migrateTestFixtureResultAttachment
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: limit
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: removeOnError
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "202":
          description: Accepted
  /storage/upgrade/v2/test-case-attachment:
    post:
      tags:
      - blob-storage-upgrade-controller
      operationId: migrateTestCaseAttachments
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: limit
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: removeOnError
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "202":
          description: Accepted
  /status:
    get:
      tags:
      - status-controller
      summary: Find all statuses
      operationId: findAll_15
      parameters:
      - name: workflowId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageStatusDto'
    post:
      tags:
      - status-controller
      summary: Create a new status
      operationId: create_17
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatusCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusDto'
  /sharedstep:
    get:
      tags:
      - shared-step-controller
      summary: Find all shared steps for specified project
      operationId: findAll_16
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: search
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: archived
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "createdDate,DESC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageSharedStepDto'
    post:
      tags:
      - shared-step-controller
      summary: Create a new shared step
      operationId: create_18
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SharedStepCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SharedStepDto'
  /sharedstep/{id}/unarchive:
    post:
      tags:
      - shared-step-controller
      summary: Unarchive ths shared step
      operationId: unarchive
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "202":
          description: Accepted
  /sharedstep/{id}/archive:
    post:
      tags:
      - shared-step-controller
      summary: Archive ths shared step
      operationId: archive
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "202":
          description: Accepted
  /sharedstep/step:
    post:
      tags:
      - shared-step-scenario-controller
      summary: Create scenario step
      operationId: create_19
      parameters:
      - name: beforeId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: afterId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScenarioStepCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ScenarioStepCreatedResponseDto'
  /sharedstep/step/{id}/move:
    post:
      tags:
      - shared-step-scenario-controller
      summary: Move scenario step
      operationId: move_2
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScenarioStepMoveDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NormalizedScenarioDto'
  /sharedstep/step/{id}/copy:
    post:
      tags:
      - shared-step-scenario-controller
      summary: Copy scenario step
      operationId: copy
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScenarioStepCopyDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NormalizedScenarioDto'
  /sharedstep/attachment:
    get:
      tags:
      - shared-step-attachment-controller
      summary: Find attachments for shared step
      operationId: findAll_17
      parameters:
      - name: sharedStepId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageSharedStepAttachmentRowDto'
    post:
      tags:
      - shared-step-attachment-controller
      summary: Upload new shared step attachments
      operationId: create_20
      parameters:
      - name: sharedStepId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/sharedstep_attachment_body'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SharedStepAttachmentRowDto'
                x-content-type: '*/*'
  /roleschema:
    get:
      tags:
      - role-schema-controller
      summary: Find all role schemas for given project
      operationId: findAll_18
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageRoleSchemaDto'
    post:
      tags:
      - role-schema-controller
      summary: Create a new role schema
      operationId: create_21
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleSchemaCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RoleSchemaDto'
  /role:
    get:
      tags:
      - role-controller
      summary: Find all roles
      operationId: findAll_19
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleDto'
                x-content-type: '*/*'
    post:
      tags:
      - role-controller
      summary: Create a new role
      operationId: create_22
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RoleDto'
  /projectproperty:
    get:
      tags:
      - project-property-controller
      summary: Find all project properties
      operationId: findAll_20
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectPropertyDto'
                x-content-type: '*/*'
    post:
      tags:
      - project-property-controller
      summary: Create a new project property
      operationId: create_23
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectPropertyCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProjectPropertyDto'
  /project:
    get:
      tags:
      - project-controller
      summary: Find all projects
      operationId: findAll_21
      parameters:
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: my
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: favorite
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageProjectDto'
    post:
      tags:
      - project-controller
      summary: Create a new project
      operationId: create_24
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProjectDto'
  /project/{projectId}/categorymatcher:
    get:
      tags:
      - project-category-matcher-controller
      operationId: findAll_22
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageCategoryMatcherDto'
    post:
      tags:
      - project-category-matcher-controller
      operationId: add
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCategoryMatcherAddDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CategoryMatcherDto'
  /project/{projectId}/categorymatcher/remove:
    post:
      tags:
      - project-category-matcher-controller
      operationId: remove
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCategoryMatcherRemoveDto'
        required: true
      responses:
        "204":
          description: No Content
  /project/{projectId}/category:
    get:
      tags:
      - project-category-controller
      operationId: findAll_23
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageCategoryDto'
    post:
      tags:
      - project-category-controller
      operationId: add_1
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCategoryAddDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CategoryDto'
  /project/{projectId}/category/remove:
    post:
      tags:
      - project-category-controller
      operationId: remove_1
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCategoryRemoveDto'
        required: true
      responses:
        "204":
          description: No Content
  /project/{id}/favorite:
    post:
      tags:
      - project-controller
      summary: Mark project as favorite
      operationId: setFavorite
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: favorite
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProjectDto'
  /project/access/{projectId}/group:
    get:
      tags:
      - project-access-controller
      summary: Get project access groups
      operationId: getProjectAccessGroups
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: permissionsSetId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageProjectGroupAccessDto'
    post:
      tags:
      - project-access-controller
      summary: Add groups to project
      operationId: addProjectGroups
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectAccessGroupAddDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectGroupAccessDto'
                x-content-type: '*/*'
    delete:
      tags:
      - project-access-controller
      summary: Delete groups from project
      operationId: deleteProjectGroups
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: groupId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      responses:
        "204":
          description: No Content
  /project/access/{projectId}/collaborator:
    get:
      tags:
      - project-access-controller
      summary: Get project collaborators
      operationId: getProjectCollaborators
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: permissionsSetId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "username,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageProjectCollaboratorAccessDto'
    post:
      tags:
      - project-access-controller
      summary: Add collaborators to project
      operationId: addProjectCollaborators
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectAccessCollaboratorAddDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectCollaboratorAccessDto'
                x-content-type: '*/*'
    delete:
      tags:
      - project-access-controller
      summary: Delete collaborators from project
      operationId: deleteUsers
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: username
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "204":
          description: No Content
  /permissionset:
    get:
      tags:
      - permission-set-controller
      summary: Find all permission sets
      operationId: findAll_25
      parameters:
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagePermissionSetDto'
    post:
      tags:
      - permission-set-controller
      summary: Create a new permission set
      operationId: create_25
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionSetCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PermissionSetDto'
  /mute:
    get:
      tags:
      - mute-controller
      summary: Find all mutes for test case
      operationId: findAll_26
      parameters:
      - name: testCaseId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 5
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "createdDate,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageMuteDto'
    post:
      tags:
      - mute-controller
      summary: Create a new mute
      operationId: create_26
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MuteCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MuteDto'
  /member:
    get:
      tags:
      - member-controller
      summary: Find all role users
      operationId: findAll_27
      parameters:
      - name: roleId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageMemberDto'
    post:
      tags:
      - member-controller
      summary: Create a new role user
      operationId: create_27
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MemberDto'
  /launch:
    get:
      tags:
      - launch-controller
      summary: Find all launches preview
      operationId: findAll_28_1
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: search
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "created_date,DESC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageLaunchDto'
    post:
      tags:
      - launch-controller
      summary: Create a new launch
      operationId: create_28
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LaunchCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LaunchDto'
  /launch/{launchId}/upload:
    post:
      tags:
      - launch-upload-controller
      summary: Manually upload launch results
      operationId: upload
      parameters:
      - name: launchId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/launchId_upload_body'
      responses:
        "202":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LaunchUploadResponseDto'
  /launch/{launchId}/upload/file:
    post:
      tags:
      - launch-upload-controller
      summary: Manually upload launch results
      operationId: uploadFiles
      parameters:
      - name: launchId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/upload_file_body_1'
      responses:
        "202":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LaunchUploadResponseDto'
  /launch/{launchId}/upload/archive:
    post:
      tags:
      - launch-upload-controller
      summary: Manually upload launch results
      operationId: uploadArchives
      parameters:
      - name: launchId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/upload_archive_body_1'
      responses:
        "202":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LaunchUploadResponseDto'
  /launch/{launchId}/issue/export:
    post:
      tags:
      - launch-issue-controller
      summary: Export launch data to issue issueTracker
      operationId: export
      parameters:
      - name: launchId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/IssueDto'
        required: true
      responses:
        "200":
          description: OK
  /launch/{id}/testplan/add:
    post:
      tags:
      - launch-controller
      summary: Add test plan to launch
      operationId: addTestPlan
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LaunchTestPlanAddDto'
        required: true
      responses:
        "202":
          description: Accepted
  /launch/{id}/testcase/add:
    post:
      tags:
      - launch-controller
      summary: Add test cases to launch
      operationId: addTestCases
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LaunchTestCasesAddDto'
        required: true
      responses:
        "202":
          description: Accepted
  /launch/{id}/reopen:
    post:
      tags:
      - launch-controller
      summary: Reopen launch
      operationId: reopen
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
  /launch/{id}/defect/apply:
    post:
      tags:
      - launch-controller
      summary: Apply defect matchers to launch
      operationId: applyDefectMatchers
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "202":
          description: Accepted
  /launch/{id}/copy:
    post:
      tags:
      - launch-controller
      summary: Copy launch
      operationId: copyLaunch
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LaunchCopyRqDto'
        required: true
      responses:
        "202":
          description: Accepted
  /launch/{id}/close:
    post:
      tags:
      - launch-controller
      summary: Close launch
      operationId: close
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
  /launch/upload:
    post:
      tags:
      - launch-upload-controller
      summary: Create launch from uploaded results
      operationId: upload_1
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/launch_upload_body'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LaunchUploadResponseDto'
  /launch/tag:
    get:
      tags:
      - launch-tag-controller
      summary: Find all tags
      operationId: findAll_28
      parameters:
      - name: projectId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageLaunchTagDto'
    post:
      tags:
      - launch-tag-controller
      summary: Create a new Launch tag
      operationId: create_29
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LaunchTagCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LaunchTagDto'
  /launch/new:
    post:
      tags:
      - launch-controller
      summary: Create a new launch via event
      operationId: create_30
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLaunchEvent'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LaunchDto'
  /launch/merge:
    post:
      tags:
      - launch-controller
      summary: Merge launches
      operationId: merge
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LaunchMergeDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/IdAndNameOnlyDto'
  /jobrun/{id}/upload:
    post:
      tags:
      - job-run-controller
      summary: Manually upload job run results
      operationId: upload_2
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/id_upload_body'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FileUploadResponseDto'
  /jobrun/{id}/upload/file:
    post:
      tags:
      - job-run-controller
      summary: Manually upload job run results
      operationId: uploadFiles_1
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/upload_file_body_2'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FileUploadResponseDto'
  /jobrun/{id}/upload/archive:
    post:
      tags:
      - job-run-controller
      summary: Manually upload job run results
      operationId: uploadArchives_1
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/upload_archive_body_2'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FileUploadResponseDto'
  /jobrun/{id}/rerun:
    post:
      tags:
      - job-run-controller
      summary: Rerun job
      operationId: rerun_1
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobRerunRequestDto'
        required: true
      responses:
        "202":
          description: Accepted
  /job:
    get:
      tags:
      - job-controller
      summary: Find job by given project and external id
      operationId: findAll_29_1
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      - name: externalId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageJobDto'
    post:
      tags:
      - job-controller
      summary: Create a new job
      operationId: create_31
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JobDto'
  /job/{id}/sync:
    post:
      tags:
      - job-controller
      summary: Sync job with build server
      operationId: sync_2
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "202":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JobDto'
  /job/{id}/run:
    post:
      tags:
      - job-controller
      summary: Run job to a new launch
      operationId: run_4
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobRunRequestDto'
        required: true
      responses:
        "202":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LaunchDto'
  /issueschema:
    get:
      tags:
      - issue-schema-controller
      summary: Find all issue schemas for given project
      operationId: findAll_29
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "key,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageIssueSchemaDto'
    post:
      tags:
      - issue-schema-controller
      summary: Create a new issue schema
      operationId: create_32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueSchemaCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/IssueSchemaDto'
  /issue:
    get:
      tags:
      - issue-controller
      summary: Find all issues
      operationId: findAll_30
      parameters:
      - name: integrationId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "createdDate,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageIssueDto'
    post:
      tags:
      - issue-controller
      summary: Create a new issue
      operationId: create_33
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/IssueDto'
  /integration:
    get:
      tags:
      - integration-controller
      operationId: getIntegrations
      parameters:
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageIntegrationDto'
    post:
      tags:
      - integration-controller
      operationId: create_34
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntegrationCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/IntegrationDto'
  /integration/webhook:
    get:
      tags:
      - integration-webhook-controller
      summary: Find all webhook configs for integration
      operationId: findAll_31
      parameters:
      - name: integrationId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageIntegrationWebhookDto'
    post:
      tags:
      - integration-webhook-controller
      summary: Create a new webhook config
      operationId: create_35
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntegrationWebhookCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/IntegrationWebhookTokenDto'
  /integration/validate:
    post:
      tags:
      - integration-controller
      operationId: validate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntegrationValidateDto'
        required: true
      responses:
        "200":
          description: OK
  /integration/project:
    post:
      tags:
      - integration-controller
      operationId: createProjectIntegration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectIntegrationCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProjectIntegrationDto'
  /integration/project/validate:
    post:
      tags:
      - integration-controller
      operationId: validate_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectIntegrationValidateDto'
        required: true
      responses:
        "200":
          description: OK
  /integration/issue/{integrationId}/fixlinks:
    post:
      tags:
      - integration-issue-controller
      summary: Fix issue links without url
      operationId: fixLinks
      parameters:
      - name: integrationId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/IntegrationLinksFixedDto'
  /integration/export:
    get:
      tags:
      - integration-export-controller
      operationId: findAll_32
      parameters:
      - name: integrationId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageIntegrationExportDto'
    post:
      tags:
      - integration-export-controller
      operationId: create_36
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntegrationExportCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/IntegrationExportDto'
  /importrequest:
    get:
      tags:
      - import-request-controller
      summary: Find all imports
      operationId: findAll_33
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "createdDate,DESC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageImportRequestDto'
    post:
      tags:
      - import-request-controller
      summary: Upload import file
      operationId: upload_3
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: type
        in: query
        required: true
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/ImportRequestTypeDto'
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/importrequest_body'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ImportRequestDto'
  /iframe/testcases:
    post:
      tags:
      - iframe-controller
      summary: Bulk create a new test cases from iframe
      operationId: bulkCreateTestCases
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IframeBulkCreateTestCaseDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestCaseDto'
                x-content-type: '*/*'
  /iframe/testcases/linkissue:
    post:
      tags:
      - iframe-controller
      summary: Link test cases with issue from iframe
      operationId: linkTestCaseWithIssue
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IframeTestCaseWithIssueDto'
        required: true
      responses:
        "202":
          description: Accepted
  /iframe/testcase:
    get:
      tags:
      - iframe-controller
      summary: Get pageble list of testcases
      operationId: getTestCases
      parameters:
      - name: integrationId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: issueTrackerId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: issueKey
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: search
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: status
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: automated
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTestCaseDto'
    post:
      tags:
      - iframe-controller
      summary: Create a new test case from iframe
      operationId: createTestCase
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IframeCreateTestCaseDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestCaseDto'
  /filter:
    get:
      tags:
      - filter-controller
      summary: Find all filters by given project
      operationId: findAll_34
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageFilterDto'
    post:
      tags:
      - filter-controller
      summary: Create a new filter
      operationId: create_37
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FilterDto'
  /filter/base:
    get:
      tags:
      - filter-controller
      summary: Get default filter
      operationId: getBase
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FilterDto'
    post:
      tags:
      - filter-controller
      summary: Set filter as default
      operationId: setBase
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterBaseSetDto'
        required: true
      responses:
        "202":
          description: Accepted
  /export/testresult/csv:
    post:
      tags:
      - export-controller
      summary: Generate test results csv report
      operationId: generateTestResultCsvExport
      parameters:
      - name: shared
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestResultCsvExportOptions'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ExportRequestDto'
  /export/testcase/pdf:
    post:
      tags:
      - export-controller
      summary: Generate test cases pdf report
      operationId: generateTestCasePdfExport
      parameters:
      - name: shared
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCasePdfOptions'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ExportRequestDto'
  /export/testcase/csv:
    post:
      tags:
      - export-controller
      summary: Generate test cases csv report
      operationId: generateTestCaseCsvExport
      parameters:
      - name: shared
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseCsvExportOptions'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ExportRequestDto'
  /export/launch/pdf:
    post:
      tags:
      - export-controller
      summary: Generate launch pdf report
      operationId: generate_1
      parameters:
      - name: shared
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LaunchPdfOptions'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ExportRequestDto'
  /evv:
    get:
      tags:
      - env-var-value-controller
      summary: Find all environment values
      operationId: findAll_36
      parameters:
      - name: envVarId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EnvVarValueDto'
                x-content-type: '*/*'
    post:
      tags:
      - env-var-value-controller
      summary: Create a new environment value
      operationId: create_38
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvVarValueCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EnvVarValueDto'
  /evschema:
    get:
      tags:
      - env-var-schema-controller
      summary: Find all env var schemas for given project
      operationId: findAll_37
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageEnvVarSchemaDto'
    post:
      tags:
      - env-var-schema-controller
      summary: Create a new env var schema
      operationId: create_39
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvVarSchemaCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EnvVarSchemaDto'
  /ev/merge:
    post:
      tags:
      - env-var-controller
      summary: Merge environment variables
      operationId: merge_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvVarMergeDto'
        required: true
      responses:
        "202":
          description: Accepted
  /environment/merge:
    post:
      tags:
      - env-var-controller
      summary: Merge environment variables
      operationId: merge_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvVarMergeDto'
        required: true
      responses:
        "202":
          description: Accepted
  /ev:
    get:
      tags:
      - env-var-controller
      summary: Find all environment variables
      operationId: findAll_38
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EnvVarDto'
                x-content-type: '*/*'
    post:
      tags:
      - env-var-controller
      summary: Create a new environment variable
      operationId: create_40
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvVarCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EnvVarDto'
  /environment:
    get:
      tags:
      - env-var-controller
      summary: Find all environment variables
      operationId: findAll_39
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EnvVarDto'
                x-content-type: '*/*'
    post:
      tags:
      - env-var-controller
      summary: Create a new environment variable
      operationId: create_41
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvVarCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EnvVarDto'
  /defect:
    get:
      tags:
      - defect-controller
      operationId: findAllByProjectId
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: nameFilter
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: status
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 20
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageDefectCountRowDto'
    post:
      tags:
      - defect-controller
      operationId: create_42
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DefectCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DefectOverviewDto'
  /defect/{id}/issue:
    post:
      tags:
      - defect-controller
      operationId: linkIssue
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DefectIssueLinkDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DefectOverviewDto'
    delete:
      tags:
      - defect-controller
      operationId: unlinkIssue
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DefectOverviewDto'
  /defect/{id}/createissue:
    post:
      tags:
      - defect-controller
      operationId: createIssue
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueToCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DefectOverviewDto'
  /defect/matcher:
    post:
      tags:
      - defect-matcher-controller
      operationId: create_43
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DefectMatcherCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DefectMatcherDto'
  /defect/bulk/reopen:
    post:
      tags:
      - defect-bulk-controller
      operationId: reopen_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DefectBulkDto'
        required: true
      responses:
        "202":
          description: Accepted
  /defect/bulk/remove:
    post:
      tags:
      - defect-bulk-controller
      operationId: remove_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DefectBulkDto'
        required: true
      responses:
        "202":
          description: Accepted
  /defect/bulk/close:
    post:
      tags:
      - defect-bulk-controller
      operationId: close_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DefectBulkDto'
        required: true
      responses:
        "202":
          description: Accepted
  /dashboard:
    get:
      tags:
      - dashboard-controller
      operationId: findAllByProject_1
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageDashboardDto'
    post:
      tags:
      - dashboard-controller
      operationId: create_44
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DashboardOverviewDto'
  /comment:
    get:
      tags:
      - comment-controller
      summary: Find all comments
      operationId: findAll_40
      parameters:
      - name: testCaseId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "createdDate,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageCommentDto'
    post:
      tags:
      - comment-controller
      summary: Create a new comment
      operationId: create_45
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CommentDto'
  /cleanup/scheduler/cleaner_schema_project:
    post:
      tags:
      - cleanup-controller
      operationId: triggerCleanup
      responses:
        "202":
          description: Accepted
  /cleanup/scheduler/cleaner_schema_global:
    post:
      tags:
      - cleanup-controller
      operationId: triggerGlobalCleanup
      responses:
        "202":
          description: Accepted
  /cleanup/scheduler/blob_remove_task:
    post:
      tags:
      - cleanup-controller
      operationId: triggerBlobRemoveTask
      responses:
        "202":
          description: Accepted
  /cleanup/launch:
    post:
      tags:
      - cleanup-controller
      operationId: cleanupLaunch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LaunchCleanupRequest'
        required: true
      responses:
        "202":
          description: Accepted
  /cleanerschema:
    get:
      tags:
      - cleaner-schema-controller
      summary: Find all cleaner schemas for given project
      operationId: findAll_41
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "id,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageCleanerSchemaDto'
    post:
      tags:
      - cleaner-schema-controller
      summary: Create a new cleaner schema
      operationId: create_46
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CleanerSchemaCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CleanerSchemaDto'
  /cfv:
    get:
      tags:
      - custom-field-value-controller
      summary: Find all custom field values
      operationId: findAll_42
      parameters:
      - name: customFieldId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageCustomFieldValueDto'
    post:
      tags:
      - custom-field-value-controller
      summary: Create a new custom field value
      operationId: create_47
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomFieldValueCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomFieldValueDto'
  /cfschema:
    get:
      tags:
      - custom-field-schema-controller
      summary: Find all custom field schemas for given project
      operationId: findAll_43
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "id,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageCustomFieldSchemaDto'
    post:
      tags:
      - custom-field-schema-controller
      summary: Create a new custom field schema
      operationId: create_48
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomFieldSchemaCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomFieldSchemaDto'
  /cf:
    get:
      tags:
      - custom-field-controller
      operationId: findAll_44_1
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomFieldDto'
                x-content-type: '*/*'
    post:
      tags:
      - custom-field-controller
      operationId: create_49
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomFieldCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomFieldDto'
  /cf/merge:
    post:
      tags:
      - custom-field-controller
      operationId: merge_3
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomFieldMergeDto'
        required: true
      responses:
        "202":
          description: Accepted
  /categorymatcher:
    get:
      tags:
      - category-matcher-controller
      operationId: findAll_44_2
      parameters:
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: excludedProjectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageCategoryMatcherDto'
    post:
      tags:
      - category-matcher-controller
      operationId: create_50
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryMatcherCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CategoryMatcherDto'
  /category:
    get:
      tags:
      - category-controller
      operationId: findAllNotAddedToProject
      parameters:
      - name: excludedProjectId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageCategoryDto'
    post:
      tags:
      - category-controller
      operationId: create_51
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CategoryDto'
  /accessgroup:
    get:
      tags:
      - access-group-controller
      summary: Find all groups
      operationId: findAll_44
      parameters:
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageAccessGroupDto'
    post:
      tags:
      - access-group-controller
      summary: Create a new group
      operationId: create_52
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessGroupCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccessGroupDto'
  /accessgroup/{id}/user:
    get:
      tags:
      - access-group-controller
      summary: Get group's users
      operationId: getUsers
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "username,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageAccessGroupUserDto'
    post:
      tags:
      - access-group-controller
      summary: Add users to group
      operationId: addUsers
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessGroupUsersAddDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccessGroupDto'
    delete:
      tags:
      - access-group-controller
      summary: Delete users from group
      operationId: deleteUsers_1
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: username
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
  /accessgroup/{id}/project:
    get:
      tags:
      - access-group-controller
      summary: Get group's projects
      operationId: getProjects_1
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: permissionsSetId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageAccessGroupPaDto'
    post:
      tags:
      - access-group-controller
      summary: Add projects to group
      operationId: addProjects
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessGroupProjectsAddDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccessGroupDto'
    delete:
      tags:
      - access-group-controller
      summary: Delete projects from group
      operationId: deleteProjects
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
  /accessgroup/bulk/delete:
    post:
      tags:
      - access-group-bulk-controller
      summary: Bulk delete teams
      operationId: delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessGroupBulkDto'
        required: true
      responses:
        "202":
          description: Accepted
  /workflowschema/{id}:
    get:
      tags:
      - workflow-schema-controller
      summary: Find workflow schema by given id
      operationId: findOne
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WorkflowSchemaDto'
    delete:
      tags:
      - workflow-schema-controller
      summary: Delete workflow schema by given id
      operationId: delete_1
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
    patch:
      tags:
      - workflow-schema-controller
      summary: Update workflow schema
      operationId: patch
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowSchemaPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WorkflowSchemaDto'
  /workflow/{id}:
    get:
      tags:
      - workflow-controller
      summary: Find workflow by given id
      operationId: findOne_1
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WorkflowDto'
    delete:
      tags:
      - workflow-controller
      summary: Delete workflow by given id
      operationId: delete_2
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
    patch:
      tags:
      - workflow-controller
      summary: Patch workflow
      operationId: patch_1
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WorkflowDto'
  /widget/{id}:
    get:
      tags:
      - widget-controller
      operationId: findOne_2
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WidgetDto'
    delete:
      tags:
      - widget-controller
      operationId: delete_3
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "202":
          description: Accepted
    patch:
      tags:
      - widget-controller
      operationId: patch_2
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WidgetPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WidgetDto'
  /tree/{id}:
    get:
      tags:
      - tree-controller
      operationId: findOne_3
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TreeDto'
    delete:
      tags:
      - tree-controller
      operationId: delete_5
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
    patch:
      tags:
      - tree-controller
      operationId: patch_3
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TreePatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TreeDto'
  /testresult/{id}:
    get:
      tags:
      - test-result-controller
      operationId: findOne_4
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestResultDto'
    delete:
      tags:
      - test-result-controller
      summary: Delete test result by given id
      operationId: deleteById
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
    patch:
      tags:
      - test-result-controller
      summary: Patches a test result by given id
      operationId: patch_4
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestResultPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestResultDto'
  /testresult/attachment/{id}:
    delete:
      tags:
      - test-result-attachment-controller
      operationId: delete_6
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
    patch:
      tags:
      - test-result-attachment-controller
      operationId: patch_5
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestResultAttachmentPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestResultAttachmentRowDto'
  /testplan/{id}:
    get:
      tags:
      - test-plan-controller
      summary: Find test plan by id
      operationId: findOne_5
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestPlanDto'
    delete:
      tags:
      - test-plan-controller
      summary: Delete test plan by given id
      operationId: delete_7
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
    patch:
      tags:
      - test-plan-controller
      summary: Patch test plan
      operationId: patch_6
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestPlanPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestPlanDto'
  /testlayerschema/{id}:
    get:
      tags:
      - test-layer-schema-controller
      summary: Find test layer schema by id
      operationId: findOne_6
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestLayerSchemaDto'
    delete:
      tags:
      - test-layer-schema-controller
      summary: Delete test layer schema by id
      operationId: delete_8
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
    patch:
      tags:
      - test-layer-schema-controller
      summary: Patch test layer schema
      operationId: patch_7
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestLayerSchemaPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestLayerSchemaDto'
  /testlayer/{id}:
    get:
      tags:
      - test-layer-controller
      operationId: findOne_7
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestLayerDto'
    delete:
      tags:
      - test-layer-controller
      operationId: delete_9
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
    patch:
      tags:
      - test-layer-controller
      operationId: patch_8
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestLayerPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestLayerDto'
  /testkeyschema/{id}:
    get:
      tags:
      - test-key-schema-controller
      summary: Find a test key schema by id
      operationId: findOne_8
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestKeySchemaDto'
    delete:
      tags:
      - test-key-schema-controller
      summary: Delete a test key schema by id
      operationId: delete_10
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
    patch:
      tags:
      - test-key-schema-controller
      summary: Patch a test key schema
      operationId: patch_9
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestKeySchemaPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestKeySchemaDto'
  /testfixtureresult/attachment/{id}:
    delete:
      tags:
      - test-fixture-result-attachment-controller
      operationId: delete_11
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
    patch:
      tags:
      - test-fixture-result-attachment-controller
      operationId: patch_10
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestFixtureResultAttachmentPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestFixtureResultAttachmentRowDto'
  /testcaseupdateschema/{id}:
    get:
      tags:
      - test-case-update-schema-controller
      summary: Find a test case update schemas by id
      operationId: findOne_10
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestCaseUpdateSchemaDto'
    delete:
      tags:
      - test-case-update-schema-controller
      summary: Delete test case update schema by id
      operationId: delete_12
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
    patch:
      tags:
      - test-case-update-schema-controller
      summary: Patch test case update schema
      operationId: patch_11
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseUpdateSchemaPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestCaseUpdateSchemaDto'
  /testcase/{id}:
    get:
      tags:
      - test-case-controller
      summary: Find test case by id
      operationId: findOne_11
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestCaseDto'
    delete:
      tags:
      - test-case-controller
      summary: Delete test case by id
      operationId: delete_13
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: force
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "202":
          description: Accepted
    patch:
      tags:
      - test-case-controller
      operationId: patch_12
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCasePatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestCaseDto'
  /testcase/step/{id}:
    delete:
      tags:
      - test-case-scenario-controller
      summary: Delete a specified scenario step
      operationId: deleteById_1
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NormalizedScenarioDto'
    patch:
      tags:
      - test-case-scenario-controller
      summary: Patch a specified scenario step
      operationId: patchById
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScenarioStepPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NormalizedScenarioDto'
  /testcase/attachment/{id}:
    delete:
      tags:
      - test-case-attachment-controller
      summary: Delete test case attachment
      operationId: delete_14
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
    patch:
      tags:
      - test-case-attachment-controller
      summary: Patch test case attachment
      operationId: patch_13
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseAttachmentPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestCaseAttachmentRowDto'
  /tag/{id}:
    get:
      tags:
      - test-tag-controller
      summary: Find test tag by id
      operationId: findOne_12
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestTagDto'
    delete:
      tags:
      - test-tag-controller
      summary: Delete test tag by id
      operationId: delete_15
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
    patch:
      tags:
      - test-tag-controller
      summary: Patch test tag
      operationId: patch_14
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestTagPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestTagDto'
  /status/{id}:
    get:
      tags:
      - status-controller
      summary: Find status by id
      operationId: findOne_13
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusDto'
    delete:
      tags:
      - status-controller
      summary: Delete status by id
      operationId: delete_16
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
    patch:
      tags:
      - status-controller
      summary: Patch status
      operationId: patch_15
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatusPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusDto'
  /sharedstep/{id}:
    get:
      tags:
      - shared-step-controller
      summary: Find shared step by id
      operationId: findOne_14
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SharedStepDto'
    delete:
      tags:
      - shared-step-controller
      summary: Delete shared step by id
      operationId: delete_17
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "202":
          description: Accepted
    patch:
      tags:
      - shared-step-controller
      summary: Patch a specified shared step
      operationId: patch_16
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SharedStepPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SharedStepDto'
  /sharedstep/step/{id}:
    delete:
      tags:
      - shared-step-scenario-controller
      summary: Delete a specified scenario step
      operationId: deleteById_2
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NormalizedScenarioDto'
    patch:
      tags:
      - shared-step-scenario-controller
      summary: Patch a specified scenario step
      operationId: patchById_1
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScenarioStepPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NormalizedScenarioDto'
  /sharedstep/attachment/{id}:
    delete:
      tags:
      - shared-step-attachment-controller
      summary: Delete shared step attachment
      operationId: delete_18
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
    patch:
      tags:
      - shared-step-attachment-controller
      summary: Patch shared step attachment
      operationId: patch_17
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SharedStepAttachmentPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SharedStepAttachmentRowDto'
  /roleschema/{id}:
    get:
      tags:
      - role-schema-controller
      summary: Find role schema by id
      operationId: findOne_16
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RoleSchemaDto'
    delete:
      tags:
      - role-schema-controller
      summary: Delete role schema by id
      operationId: delete_19
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
    patch:
      tags:
      - role-schema-controller
      summary: Patch role schema
      operationId: patch_18
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleSchemaPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RoleSchemaDto'
  /role/{id}:
    get:
      tags:
      - role-controller
      summary: Find role by id
      operationId: findOne_17
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RoleDto'
    delete:
      tags:
      - role-controller
      summary: Delete role by id
      operationId: delete_20
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
    patch:
      tags:
      - role-controller
      summary: Patch a role
      operationId: patch_19
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RolePatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RoleDto'
  /projectsettings/launchlivedoc:
    get:
      tags:
      - project-settings-controller
      summary: Get launch live documentation config
      operationId: getLaunchLiveDocConfig
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LaunchLiveDocConfigDto'
    patch:
      tags:
      - project-settings-controller
      summary: Save launch live documentation config
      operationId: setLaunchLiveDocConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LaunchLiveDocConfigDto'
        required: true
      responses:
        "200":
          description: OK
  /projectsettings/launchclose:
    get:
      tags:
      - project-settings-controller
      summary: Get launch close config
      operationId: getLaunchCloseConfig
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LaunchCloseConfigDto'
    patch:
      tags:
      - project-settings-controller
      summary: Save launch close config
      operationId: setLaunchCloseConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LaunchCloseConfigDto'
        required: true
      responses:
        "200":
          description: OK
  /projectproperty/{id}:
    get:
      tags:
      - project-property-controller
      summary: Find project property by id
      operationId: findOne_18
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProjectPropertyDto'
    delete:
      tags:
      - project-property-controller
      summary: Delete project by id
      operationId: delete_21
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
    patch:
      tags:
      - project-property-controller
      summary: Patch project property
      operationId: patch_20
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectPropertyPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProjectPropertyDto'
  /project/{id}:
    get:
      tags:
      - project-controller
      summary: Find project by id
      operationId: findOne_19
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProjectDto'
    delete:
      tags:
      - project-controller
      summary: Delete project by id
      operationId: delete_22
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
    patch:
      tags:
      - project-controller
      summary: Patch project
      operationId: patch_21
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProjectDto'
  /permissionset/{id}:
    get:
      tags:
      - permission-set-controller
      summary: Find permission set by id
      operationId: findOne_20
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PermissionSetDto'
    delete:
      tags:
      - permission-set-controller
      summary: Delete permission set by id
      operationId: delete_23
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
    patch:
      tags:
      - permission-set-controller
      summary: Patch permission set
      operationId: patch_22
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionSetPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PermissionSetDto'
  /member/{id}:
    get:
      tags:
      - member-controller
      summary: Find role user by id
      operationId: findOne_21
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MemberDto'
    delete:
      tags:
      - member-controller
      summary: Delete role user by id
      operationId: delete_25
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
    patch:
      tags:
      - member-controller
      summary: Patch role user
      operationId: patch_23
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MemberDto'
  /launch/{id}:
    get:
      tags:
      - launch-controller
      summary: Find launch by id
      operationId: findOne_22
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LaunchDto'
    delete:
      tags:
      - launch-controller
      summary: Delete launch by id
      operationId: delete_26
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
    patch:
      tags:
      - launch-controller
      summary: Patch launch
      operationId: patch_24
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LaunchPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LaunchDto'
  /launch/tag/{id}:
    get:
      tags:
      - launch-tag-controller
      summary: Find Launch tag by id
      operationId: findOne_23
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LaunchTagDto'
    delete:
      tags:
      - launch-tag-controller
      summary: Delete Launch tag by id
      operationId: delete_27
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
    patch:
      tags:
      - launch-tag-controller
      summary: Patch Launch tag
      operationId: patch_25
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LaunchTagPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LaunchTagDto'
  /job/{id}:
    get:
      tags:
      - job-controller
      summary: Find job by id
      operationId: findOne_24
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JobDto'
    delete:
      tags:
      - job-controller
      summary: Delete job by id
      operationId: delete_28
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
    patch:
      tags:
      - job-controller
      summary: Patch job
      operationId: patch_26
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JobDto'
  /issueschema/{id}:
    get:
      tags:
      - issue-schema-controller
      summary: Find an issue schema by id
      operationId: findOne_25
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/IssueSchemaDto'
    delete:
      tags:
      - issue-schema-controller
      summary: Delete an issue schema by id
      operationId: delete_29
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
    patch:
      tags:
      - issue-schema-controller
      summary: Patch an issue schema
      operationId: patch_27
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueSchemaPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/IssueSchemaDto'
  /issue/{id}:
    get:
      tags:
      - issue-controller
      summary: Find issue by id
      operationId: findOne_26
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/IssueDto'
    delete:
      tags:
      - issue-controller
      summary: Delete issue by id
      operationId: delete_30
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
    patch:
      tags:
      - issue-controller
      summary: Patch issue schema
      operationId: patch_28
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssuePatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/IssueDto'
  /integration/{integrationId}/project/{projectId}:
    get:
      tags:
      - integration-controller
      operationId: findProjectIntegrationById
      parameters:
      - name: integrationId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: projectId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProjectIntegrationDto'
    delete:
      tags:
      - integration-controller
      operationId: deleteProjectIntegration
      parameters:
      - name: integrationId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: projectId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "202":
          description: Accepted
    patch:
      tags:
      - integration-controller
      operationId: patchProjectIntegration
      parameters:
      - name: integrationId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: projectId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectIntegrationPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProjectIntegrationDto'
  /integration/{id}:
    get:
      tags:
      - integration-controller
      operationId: findOneById
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/IntegrationDto'
    delete:
      tags:
      - integration-controller
      operationId: deleteById_3
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "202":
          description: Accepted
    patch:
      tags:
      - integration-controller
      operationId: patch_29
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntegrationPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/IntegrationDto'
  /integration/webhook/{id}:
    delete:
      tags:
      - integration-webhook-controller
      summary: Delete webhook config
      operationId: deleteById_4
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "202":
          description: Accepted
    patch:
      tags:
      - integration-webhook-controller
      summary: Patch webhook config
      operationId: patch_30
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntegrationWebhookPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/IntegrationWebhookDto'
  /integration/export/{id}:
    get:
      tags:
      - integration-export-controller
      operationId: findById_2
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/IntegrationExportDto'
    delete:
      tags:
      - integration-export-controller
      operationId: deleteById_5
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "202":
          description: Accepted
    patch:
      tags:
      - integration-export-controller
      operationId: patch_31
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntegrationExportPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/IntegrationExportDto'
  /globalsettings/projectcreate:
    patch:
      tags:
      - global-settings-controller
      summary: Patch global settings
      operationId: patchProjectCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlobalSettingsProjectCreatePatchDto'
        required: true
      responses:
        "202":
          description: Accepted
  /filter/{id}:
    get:
      tags:
      - filter-controller
      summary: Find filter by id
      operationId: findOne_28
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FilterDto'
    delete:
      tags:
      - filter-controller
      summary: Delete filter by id
      operationId: delete_32
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
    patch:
      tags:
      - filter-controller
      summary: Patch filter
      operationId: patch_32
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FilterDto'
  /evv/{id}:
    get:
      tags:
      - env-var-value-controller
      summary: Find environment value by id
      operationId: findOne_30
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EnvVarValueDto'
    delete:
      tags:
      - env-var-value-controller
      summary: Delete environment value by id
      operationId: delete_34
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
    patch:
      tags:
      - env-var-value-controller
      summary: Patch environment value
      operationId: patch_33
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvVarValuePatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EnvVarValueDto'
  /evschema/{id}:
    get:
      tags:
      - env-var-schema-controller
      summary: Find env var schema by id
      operationId: findOne_31
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EnvVarSchemaDto'
    delete:
      tags:
      - env-var-schema-controller
      summary: Delete env var schema by id
      operationId: delete_35
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
    patch:
      tags:
      - env-var-schema-controller
      summary: Patch env var schema
      operationId: patch_34
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvVarSchemaPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EnvVarSchemaDto'
  /environment/{id}:
    get:
      tags:
      - env-var-controller
      summary: Find environment variable by id
      operationId: findOne_32
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EnvVarDto'
    delete:
      tags:
      - env-var-controller
      summary: Delete environment variable by id
      operationId: delete_36
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
    patch:
      tags:
      - env-var-controller
      summary: Patch environment variable
      operationId: patch_35
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvVarPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EnvVarDto'
  /ev/{id}:
    get:
      tags:
      - env-var-controller
      summary: Find environment variable by id
      operationId: findOne_33
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EnvVarDto'
    delete:
      tags:
      - env-var-controller
      summary: Delete environment variable by id
      operationId: delete_37
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
    patch:
      tags:
      - env-var-controller
      summary: Patch environment variable
      operationId: patch_36
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvVarPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EnvVarDto'
  /defect/{id}:
    get:
      tags:
      - defect-controller
      operationId: findById_3
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DefectOverviewDto'
    delete:
      tags:
      - defect-controller
      operationId: delete_38
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
    patch:
      tags:
      - defect-controller
      operationId: patch_37
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DefectPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DefectOverviewDto'
  /defect/matcher/{id}:
    delete:
      tags:
      - defect-matcher-controller
      operationId: delete_39
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
    patch:
      tags:
      - defect-matcher-controller
      operationId: patch_38
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DefectMatcherPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DefectMatcherDto'
  /dashboard/{id}:
    get:
      tags:
      - dashboard-controller
      operationId: findOne_34
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DashboardOverviewDto'
    delete:
      tags:
      - dashboard-controller
      operationId: delete_40
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "202":
          description: Accepted
    patch:
      tags:
      - dashboard-controller
      operationId: patch_39
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DashboardOverviewDto'
  /comment/{id}:
    get:
      tags:
      - comment-controller
      summary: Find comment by id
      operationId: findOne_35
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CommentDto'
    delete:
      tags:
      - comment-controller
      summary: Delete comment by id
      operationId: delete_41
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
    patch:
      tags:
      - comment-controller
      summary: Dynamic update comment
      operationId: patch_40
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CommentDto'
  /cleanerschema/{id}:
    get:
      tags:
      - cleaner-schema-controller
      summary: Find cleaner schema by id
      operationId: findOne_36
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CleanerSchemaDto'
    delete:
      tags:
      - cleaner-schema-controller
      summary: Delete cleaner schema by id
      operationId: delete_42
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
    patch:
      tags:
      - cleaner-schema-controller
      summary: Patch cleaner schema
      operationId: patch_41
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CleanerSchemaPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CleanerSchemaDto'
  /cfv/{id}:
    get:
      tags:
      - custom-field-value-controller
      summary: Find custom field value by id
      operationId: findOne_37
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomFieldValueDto'
    delete:
      tags:
      - custom-field-value-controller
      summary: Delete custom field value by id
      operationId: delete_43
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
    patch:
      tags:
      - custom-field-value-controller
      summary: Patch custom field value
      operationId: patch_42
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomFieldValuePatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomFieldValueDto'
  /cfschema/{id}:
    get:
      tags:
      - custom-field-schema-controller
      summary: Find custom field schema by id
      operationId: findOne_38
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomFieldSchemaDto'
    delete:
      tags:
      - custom-field-schema-controller
      summary: Delete custom field schema by id
      operationId: delete_44
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
    patch:
      tags:
      - custom-field-schema-controller
      summary: Patch custom field schema
      operationId: patch_43
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomFieldSchemaPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomFieldSchemaDto'
  /cf/{id}:
    get:
      tags:
      - custom-field-controller
      operationId: findOne_39
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomFieldDto'
    delete:
      tags:
      - custom-field-controller
      operationId: delete_45
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
    patch:
      tags:
      - custom-field-controller
      operationId: patch_44
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomFieldPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomFieldDto'
  /categorymatcher/{id}:
    delete:
      tags:
      - category-matcher-controller
      operationId: deleteById_6
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
    patch:
      tags:
      - category-matcher-controller
      operationId: patch_45
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryMatcherPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CategoryMatcherDto'
  /category/{id}:
    delete:
      tags:
      - category-controller
      operationId: remove_3
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
    patch:
      tags:
      - category-controller
      operationId: patch_46
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CategoryDto'
  /accessgroup/{id}:
    get:
      tags:
      - access-group-controller
      summary: Find group by id
      operationId: fetchById
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccessGroupDto'
    delete:
      tags:
      - access-group-controller
      summary: Delete group by id
      operationId: deleteById_7
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
    patch:
      tags:
      - access-group-controller
      summary: Patch group
      operationId: patchById_2
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessGroupPatchDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccessGroupDto'
  /workflow/suggest:
    get:
      tags:
      - workflow-controller
      summary: Suggest workflows
      operationId: suggest
      parameters:
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: ignoreId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageIdAndNameOnlyDto'
  /widget/{id}/data:
    get:
      tags:
      - widget-controller
      operationId: getData
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: parameters
        in: query
        required: true
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/MultiValueMapStringString'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WidgetDataDto'
  /upload/jobrun:
    get:
      tags:
      - upload-controller
      summary: Get information about job run by id
      operationId: getJobRunByUid_1
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: jobUid
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: jobRunUid
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: jobRunId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ExternalRunResponseDto'
  /treepath/path:
    get:
      tags:
      - tree-path-controller
      operationId: findByTreeIdAndPath
      parameters:
      - name: treeId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: path
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TreePathDto'
  /tree/suggest:
    get:
      tags:
      - tree-controller
      operationId: suggest_1
      parameters:
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: ignoreId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageIdAndNameOnlyDto'
  /testresulttree/leaf:
    get:
      tags:
      - test-result-tree-controller
      summary: Find tree leafs for node
      operationId: getLeafs
      parameters:
      - name: launchId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: search
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: treeId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: path
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
          default: []
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTestResultTreeLeafDto'
  /testresulttree/group:
    get:
      tags:
      - test-result-tree-controller
      summary: Find tree groups for node
      operationId: getGroups
      parameters:
      - name: launchId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: search
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: treeId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: path
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
          default: []
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTestResultTreeGroupDto'
  /testresult/{testResultId}/fixture:
    get:
      tags:
      - test-result-fixture-controller
      summary: Find fixtures for test result
      operationId: getFixtures
      parameters:
      - name: testResultId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestFixtureResultDto'
                x-content-type: '*/*'
  /testresult/{testResultId}/fixture/attachment:
    get:
      tags:
      - test-result-fixture-controller
      summary: Find fixtures attachments for test result
      operationId: getFixturesAttachments
      parameters:
      - name: testResultId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTestFixtureResultAttachmentRowDto'
  /testresult/{testResultId}/evv:
    get:
      tags:
      - test-result-env-var-controller
      summary: Find environment variables for test result
      operationId: getEnvVarValues
      parameters:
      - name: testResultId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EnvVarValueDto'
                x-content-type: '*/*'
  /testresult/{id}/retries:
    get:
      tags:
      - test-result-controller
      summary: Find all retries for given test result
      operationId: findRetries
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "start,DESC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTestResultHistoryDto'
  /testresult/{id}/history:
    get:
      tags:
      - test-result-controller
      summary: Find all history for given test result
      operationId: findHistory
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: search
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "createdDate,DESC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTestResultHistoryDto'
  /testresult/{id}/execution:
    get:
      tags:
      - test-result-controller
      summary: Find all execution for given test result
      operationId: findExecution
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestResultScenarioDto'
  /testresult/{id}/defect/similar:
    get:
      tags:
      - test-result-defect-controller
      operationId: getSimilar
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: threshold
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: number
          format: double
          default: 0.7
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTestResultRowDto'
  /testresult/{id}/defect/candidate:
    get:
      tags:
      - test-result-defect-controller
      operationId: getCandidates
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: threshold
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: number
          format: double
          default: 0.7
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageDefectDto'
  /testresult/timeline:
    get:
      tags:
      - test-result-controller
      summary: Find timeline data
      operationId: timeline
      parameters:
      - name: launchId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestResultTree'
  /testresult/query/validate:
    get:
      tags:
      - test-result-search-controller
      summary: Find all test results by given AQL
      operationId: validateQuery
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: rql
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AqlValidateResponseDto'
  /testresult/defects:
    get:
      tags:
      - test-result-controller
      summary: Find defects by launch id
      operationId: defects
      parameters:
      - name: launchId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestResultTree'
  /testresult/defect/match:
    get:
      tags:
      - test-result-defect-controller
      operationId: getMatches
      parameters:
      - name: launchId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: messageRegex
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: traceRegex
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTestResultDefectMatchDto'
  /testresult/__search:
    get:
      tags:
      - test-result-search-controller
      summary: Find all test results by given AQL
      operationId: search
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: rql
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "created_date,DESC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTestResultRowDto'
  /testplan/{id}/tree/leaf:
    get:
      tags:
      - test-plan-controller
      summary: Find tree leafs for node
      operationId: getLeafs_1
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: treeId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: path
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
          default: []
      - name: username
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: jobId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: manual
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTestCaseTreeLeafDto'
  /testplan/{id}/tree/group:
    get:
      tags:
      - test-plan-controller
      summary: Find tree groups for node
      operationId: getGroups_1
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: treeId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: path
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
          default: []
      - name: username
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: jobId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: manual
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTestCaseTreeGroupDto'
  /testplan/{id}/member:
    get:
      tags:
      - test-plan-controller
      summary: Get test plan members statistic
      operationId: getMembers_1
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestPlanMemberStatDto'
                x-content-type: '*/*'
  /testplan/{id}/job:
    get:
      tags:
      - test-plan-controller
      summary: Get test plan jobs statistic
      operationId: getJobs
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestPlanJobStatDto'
                x-content-type: '*/*'
  /testplan/{id}/diff:
    get:
      tags:
      - test-plan-controller
      summary: Get test plan test cases changes
      operationId: getDiff
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestPlanDiffDto'
  /testplan/suggest:
    get:
      tags:
      - test-plan-controller
      summary: Suggest for test plans
      operationId: suggest_2
      parameters:
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: ignoreId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTestPlanRowDto'
  /testlayer/suggest:
    get:
      tags:
      - test-layer-controller
      operationId: suggest_3
      parameters:
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: ignoreId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageIdAndNameOnlyDto'
  /testkey/{id}:
    get:
      tags:
      - test-key-controller
      summary: Find test key by id
      operationId: findOne_9
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestKeyDto'
  /testcasetree/suggest:
    get:
      tags:
      - test-case-tree-controller
      summary: Tree groups suggest
      operationId: suggest_4
      parameters:
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: treeId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: path
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
          default: []
      - name: id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: ignoreId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageIdAndNameOnlyDto'
  /testcasetree/countleaves:
    get:
      tags:
      - test-case-tree-controller
      summary: Count all tree leaves for given path and filter
      operationId: countLeaves_2
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: search
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: treeId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: filterId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: path
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
          default: []
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestCaseTreeFilterCountDto'
  /testcase/{testCaseId}/overview:
    get:
      tags:
      - test-case-overview-controller
      summary: Get test case overview
      operationId: getOverview
      parameters:
      - name: testCaseId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestCaseOverviewDto'
  /testcase/{id}/workflow:
    get:
      tags:
      - test-case-controller
      summary: Find workflow for test case
      operationId: findWorkflow
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WorkflowDto'
  /testcase/{id}/step:
    get:
      tags:
      - test-case-scenario-controller
      summary: Get scenario for test case
      operationId: getNormalizedScenario
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NormalizedScenarioDto'
    delete:
      tags:
      - test-case-scenario-controller
      summary: Delete scenario for test case
      operationId: deleteNewScenario
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /testcase/{id}/scenariofromrun:
    get:
      tags:
      - test-case-scenario-controller
      summary: Find scenario for test case from last run
      operationId: getScenarioFromLastRun
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestCaseScenarioDto'
  /testcase/{id}/history:
    get:
      tags:
      - test-case-controller
      summary: Find run history for test case
      operationId: findHistory_1
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: search
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "createdDate,DESC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTestResultHistoryDto'
  /testcase/{id}/defect:
    get:
      tags:
      - test-case-defect-controller
      operationId: getDefects_1
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: status
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageDefectRowDto'
  /testcase/suggest:
    get:
      tags:
      - test-case-controller
      summary: Find suggest for test case
      operationId: suggest_5
      parameters:
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: ignoreId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageIdAndNameOnlyDto'
  /testcase/query/validate:
    get:
      tags:
      - test-case-search-controller
      summary: Find all test cases by given AQL
      operationId: validateQuery_1
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: rql
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: deleted
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AqlValidateResponseDto'
  /testcase/muted:
    get:
      tags:
      - test-case-controller
      summary: Find all muted test cases for given project
      operationId: findAllMuted
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "createdDate,DESC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTestCaseRowDto'
  /testcase/history:
    get:
      tags:
      - test-case-controller
      summary: Find run history for test case
      operationId: findHistory_2
      parameters:
      - name: testCaseId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: projectId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: launchId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: testResultId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: search
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "createdDate,DESC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTestResultHistoryDto'
  /testcase/deleted:
    get:
      tags:
      - test-case-controller
      summary: Find all deleted test cases for given project
      operationId: findAllDeleted
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "createdDate,DESC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTestCaseRowDto'
  /testcase/audit:
    get:
      tags:
      - test-case-audit-controller
      summary: Find audit log for test case
      operationId: findAll_12
      parameters:
      - name: testCaseId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTestCaseAuditLogEntryDto'
  /testcase/__search:
    get:
      tags:
      - test-case-search-controller
      summary: Find all test cases by given AQL
      operationId: search_1
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: rql
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: deleted
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "createdDate,DESC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTestCaseDto'
  /tag/suggest:
    get:
      tags:
      - test-tag-controller
      summary: Suggest test tags
      operationId: suggest_6
      parameters:
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: ignoreId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageIdAndNameOnlyDto'
  /storage/upgrade/v2:
    get:
      tags:
      - blob-storage-upgrade-controller
      operationId: migrateStats
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BlobStorageUpdateStats'
  /storage/stats:
    get:
      tags:
      - blob-storage-controller
      summary: Get blob storage statistic
      operationId: getStorageStatistic
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BlobStorageStats'
      deprecated: true
  /status/suggest:
    get:
      tags:
      - status-controller
      summary: Suggest statuses
      operationId: suggest_7
      parameters:
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: workflowId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: ignoreId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageIdAndNameOnlyDto'
  /sharedstep/{id}/usage:
    get:
      tags:
      - shared-step-scenario-controller
      summary: Get testcases with usage of shared step
      operationId: usage
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "createdDate,DESC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTestCaseRowDto'
  /sharedstep/{id}/step:
    get:
      tags:
      - shared-step-scenario-controller
      summary: Get scenario for shared step
      operationId: findOne_15
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NormalizedScenarioDto'
  /role/suggest:
    get:
      tags:
      - role-controller
      summary: Suggest roles
      operationId: suggest_8
      parameters:
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: ignoreId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageIdAndNameOnlyDto'
  /project/{id}/stats:
    get:
      tags:
      - project-controller
      summary: Find project stats by id
      operationId: calculateStats
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProjectStatsDto'
  /project/{id}/collaborator:
    get:
      tags:
      - project-collaborator-controller
      summary: Find all permission sets
      operationId: findAll_24
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "username,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageProjectCollaboratorDto'
  /project/suggest:
    get:
      tags:
      - project-controller
      summary: Suggest projects
      operationId: getSuggest
      parameters:
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: ignoreId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageProjectSuggestDto'
  /permissionset/suggest:
    get:
      tags:
      - permission-set-controller
      summary: Suggests permission sets
      operationId: suggest_9
      parameters:
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: ignoreId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageIdAndNameOnlyDto'
  /permission:
    get:
      tags:
      - permission-controller
      summary: Get user permissions for project
      operationId: getPermissionsOnProject
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PermissionDto'
                x-content-type: '*/*'
  /member/suggest:
    get:
      tags:
      - member-controller
      summary: Suggest members
      operationId: suggest_10
      parameters:
      - name: roleId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: ignoreId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageIdAndNameOnlyDto'
  /launch/{id}/widget/tree:
    get:
      tags:
      - launch-controller
      summary: Get suites for tree data
      operationId: getWidgetTree
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: treeId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageStatisticWidgetItem'
  /launch/{id}/variables:
    get:
      tags:
      - launch-controller
      summary: Get variables widget data
      operationId: getVariables
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageLaunchVariableDto'
  /launch/{id}/unresolved:
    get:
      tags:
      - launch-controller
      summary: Get unresolved test results
      operationId: getUnresolvedTestResults
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTestResultRowDto'
  /launch/{id}/tester:
    get:
      tags:
      - launch-controller
      summary: Get launch testers
      operationId: getTesters
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
                x-content-type: '*/*'
  /launch/{id}/statistic:
    get:
      tags:
      - launch-controller
      summary: Get launch statistic
      operationId: getStatistic
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestStatusCount'
                x-content-type: '*/*'
  /launch/{id}/retries:
    get:
      tags:
      - launch-controller
      summary: Get retries widget data
      operationId: getRetries
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "status,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTestResultRetriesRowDto'
  /launch/{id}/progress:
    get:
      tags:
      - launch-controller
      summary: Get progress widget data
      operationId: getProgress
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LaunchProgressDto'
  /launch/{id}/muted:
    get:
      tags:
      - launch-controller
      summary: Get muted test results
      operationId: getMutedTestResults
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTestResultRowDto'
  /launch/{id}/memberstats:
    get:
      tags:
      - launch-controller
      summary: Get member stats widget data
      operationId: getMemberStats
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageLaunchMemberStatsDto'
  /launch/{id}/job:
    get:
      tags:
      - launch-controller
      summary: Get launch jobs
      operationId: getJobs_1
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobRunDto'
                x-content-type: '*/*'
  /launch/{id}/job/suggest:
    get:
      tags:
      - launch-controller
      summary: Suggest launch jobs
      operationId: suggestJobs
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: ignoreId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageIdAndNameOnlyDto'
  /launch/{id}/env:
    get:
      tags:
      - launch-controller
      summary: Get launch environment
      operationId: getEnvironment
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EnvVarValueDto'
                x-content-type: '*/*'
  /launch/{id}/duration:
    get:
      tags:
      - launch-controller
      summary: Get launch duration
      operationId: getDuration
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestDurationCount'
                x-content-type: '*/*'
  /launch/{id}/defect:
    get:
      tags:
      - launch-controller
      summary: Get launch defects
      operationId: getDefects_2
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 20
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageDefectCountRowDto'
  /launch/{id}/assignees:
    get:
      tags:
      - launch-controller
      summary: Get launch assignees
      operationId: getAssignees
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
                x-content-type: '*/*'
  /launch/tag/suggest:
    get:
      tags:
      - launch-tag-controller
      summary: Suggest Launch Tags
      operationId: suggest_11
      parameters:
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: ignoreId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageIdAndNameOnlyDto'
  /launch/suggest:
    get:
      tags:
      - launch-controller
      summary: Suggest for launches
      operationId: suggest_12
      parameters:
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: ignoreId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageIdAndNameOnlyDto'
  /launch/query/validate:
    get:
      tags:
      - launch-search-controller
      summary: Find all launches by given AQL
      operationId: validateQuery_2
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: rql
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AqlValidateResponseDto'
  /launch/issue:
    get:
      tags:
      - launch-issue-controller
      summary: Get all issues used in launches
      operationId: getIssues_2
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IssueDto'
                x-content-type: '*/*'
  /launch/diff/status-changed:
    get:
      tags:
      - launch-diff-controller
      summary: Find status changed difference
      operationId: statusChanged
      parameters:
      - name: from
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: to
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: search
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LaunchDiffStatusChangeDto'
                x-content-type: '*/*'
  /launch/diff/new:
    get:
      tags:
      - launch-diff-controller
      summary: New tests
      operationId: getNew
      parameters:
      - name: from
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: to
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: search
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LaunchDiffTestResultDto'
                x-content-type: '*/*'
  /launch/diff/missed:
    get:
      tags:
      - launch-diff-controller
      summary: Missed tests
      operationId: missed
      parameters:
      - name: from
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: to
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: search
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LaunchDiffTestResultDto'
                x-content-type: '*/*'
  /launch/diff/matrix:
    get:
      tags:
      - launch-diff-controller
      summary: Get status matrix for given launches with overlay parameter
      operationId: getStatusMatrix
      parameters:
      - name: launchIds
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: mode
        in: query
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/LaunchDiffMode'
      - name: statusChange
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: search
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,DESC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageLaunchDiffRow'
  /launch/diff/fixed:
    get:
      tags:
      - launch-diff-controller
      summary: Find fixed
      operationId: failedToPassedDiff
      parameters:
      - name: from
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: to
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: search
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LaunchDiffStatusChangeDto'
                x-content-type: '*/*'
  /launch/diff/failed:
    get:
      tags:
      - launch-diff-controller
      summary: Find failed
      operationId: passedToFailedDiff
      parameters:
      - name: from
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: to
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: search
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LaunchDiffStatusChangeDto'
                x-content-type: '*/*'
  /launch/__search:
    get:
      tags:
      - launch-search-controller
      summary: Find all launches by given AQL
      operationId: search_2
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: rql
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "created_date,DESC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageLaunchDto'
  /jobrun/{id}:
    get:
      tags:
      - job-run-controller
      summary: Get job run by id
      operationId: findById
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JobRunDto'
  /jobrun/{id}/plan:
    get:
      tags:
      - job-run-test-plan-controller
      summary: Find test plan for execution by external id
      operationId: findById_1
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: expected
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestCaseInfo'
                x-content-type: '*/*'
  /job/{id}/tree/leaf:
    get:
      tags:
      - job-controller
      summary: Find tree leaves for node
      operationId: getLeaves
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: treeId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: path
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
          default: []
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTestCaseTreeLeafDto'
  /job/{id}/tree/group:
    get:
      tags:
      - job-controller
      summary: Find tree groups for node
      operationId: getGroups_2
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: treeId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: path
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
          default: []
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTestCaseTreeGroupDto'
  /job/suggest:
    get:
      tags:
      - job-controller
      summary: Suggest for jobs
      operationId: getSuggest_1
      parameters:
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: ignoreId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageIdAndNameOnlyDto'
  /job/candidate:
    get:
      tags:
      - job-controller
      summary: Get suggest for job candidate
      operationId: getCandidate
      parameters:
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: integrationId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobDto'
                x-content-type: '*/*'
  /issue/suggest:
    get:
      tags:
      - issue-controller
      summary: Suggest issues
      operationId: suggest_13
      parameters:
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: integrationId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: ignoreId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageIdAndNameOnlyDto'
  /integration/{id}/project:
    get:
      tags:
      - integration-controller
      operationId: getIntegrationProjects
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: my
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: favorite
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageProjectSuggestDto'
  /integration/webhook/log:
    get:
      tags:
      - integration-webhook-controller
      summary: Find all webhook logs by integration or webhook
      operationId: findAllLogs
      parameters:
      - name: integrationId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: webhookId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageIntegrationWebhookLogDto'
  /integration/tms/projects:
    get:
      tags:
      - integration-tms-controller
      summary: Get available projects for tms
      operationId: findProjects
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: integrationId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExtProject'
                x-content-type: '*/*'
  /integration/suggest:
    get:
      tags:
      - integration-controller
      summary: Suggest integrations
      operationId: suggest_14
      parameters:
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: ignoreId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: operation
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationOperationTypeDto'
      - name: integrationType
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationTypeDto'
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageIdAndNameOnlyDto'
  /integration/select:
    get:
      tags:
      - integration-select-controller
      operationId: select
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: integrationId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: fieldName
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: params
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: object
          additionalProperties:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExtSelectValue'
                x-content-type: '*/*'
  /integration/projectfields:
    get:
      tags:
      - integration-controller
      operationId: getProjectIntegrationFields_1
      parameters:
      - name: integrationId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProjectIntegrationFieldsFormDto'
  /integration/project/{projectId}:
    get:
      tags:
      - integration-controller
      operationId: getProjectIntegrations
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageProjectIntegrationDto'
  /integration/project/{projectId}/available:
    get:
      tags:
      - integration-controller
      operationId: getProjectAvailableIntegrations
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageIntegrationDto'
  /integration/issue/type:
    get:
      tags:
      - integration-issue-controller
      summary: Get available issue types for specified project integration and project
        key
      operationId: getTypes
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: integrationId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: projectKey
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExtIssueType'
                x-content-type: '*/*'
  /integration/issue/suggest:
    get:
      tags:
      - integration-issue-controller
      summary: Get available issues for specified project integration
      operationId: getIssues_3
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: integrationId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExtIssueLink'
                x-content-type: '*/*'
  /integration/issue/project:
    get:
      tags:
      - integration-issue-controller
      summary: Get available projects for specified project integration
      operationId: getProjects
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: integrationId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExtProject'
                x-content-type: '*/*'
  /integration/issue/field:
    get:
      tags:
      - integration-issue-controller
      summary: "Get available fields for specified project integration, project key\
        \ and issue type"
      operationId: getFields
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: integrationId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: projectKey
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: issueTypeId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  oneOf:
                  - $ref: '#/components/schemas/ExtFormFieldCheckbox'
                  - $ref: '#/components/schemas/ExtFormFieldComposite'
                  - $ref: '#/components/schemas/ExtFormFieldExternalSelect'
                  - $ref: '#/components/schemas/ExtFormFieldFormChoice'
                  - $ref: '#/components/schemas/ExtFormFieldList'
                  - $ref: '#/components/schemas/ExtFormFieldNumber'
                  - $ref: '#/components/schemas/ExtFormFieldPassword'
                  - $ref: '#/components/schemas/ExtFormFieldSelect'
                  - $ref: '#/components/schemas/ExtFormFieldText'
                  - $ref: '#/components/schemas/ExtFormFieldTextarea'
                  - $ref: '#/components/schemas/ExtFormFieldUnknown'
                x-content-type: '*/*'
  /integration/globalfields:
    get:
      tags:
      - integration-controller
      operationId: getGlobalFields_1
      parameters:
      - name: type
        in: query
        required: true
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/IntegrationTypeDto'
      - name: integrationId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/IntegrationFieldsFormDto'
  /integration/export/field:
    get:
      tags:
      - integration-export-controller
      summary: Get export form fields for specified project integration
      operationId: getFields_1
      parameters:
      - name: integrationId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  oneOf:
                  - $ref: '#/components/schemas/ExtFormFieldCheckbox'
                  - $ref: '#/components/schemas/ExtFormFieldComposite'
                  - $ref: '#/components/schemas/ExtFormFieldExternalSelect'
                  - $ref: '#/components/schemas/ExtFormFieldFormChoice'
                  - $ref: '#/components/schemas/ExtFormFieldList'
                  - $ref: '#/components/schemas/ExtFormFieldNumber'
                  - $ref: '#/components/schemas/ExtFormFieldPassword'
                  - $ref: '#/components/schemas/ExtFormFieldSelect'
                  - $ref: '#/components/schemas/ExtFormFieldText'
                  - $ref: '#/components/schemas/ExtFormFieldTextarea'
                  - $ref: '#/components/schemas/ExtFormFieldUnknown'
                x-content-type: '*/*'
  /integration/available:
    get:
      tags:
      - integration-controller
      operationId: getAvailableIntegrations
      parameters:
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageIntegrationInfoDto'
  /importrequest/{id}:
    get:
      tags:
      - import-request-controller
      summary: Find import by id
      operationId: findOne_27
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ImportRequestDto'
    delete:
      tags:
      - import-request-controller
      summary: Delete import
      operationId: delete_31
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /iframe/testresult:
    get:
      tags:
      - iframe-controller
      summary: Get test results for launch
      operationId: getTestResults
      parameters:
      - name: launchId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: status
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            $ref: '#/components/schemas/TestStatus'
      - name: manual
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "createdDate,DESC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTestResultDto'
  /iframe/launch:
    get:
      tags:
      - iframe-controller
      operationId: getLaunches
      parameters:
      - name: integrationId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: issueTrackerId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: issueKey
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: closed
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: with_job
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "created_date,DESC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageLaunchPreviewDto'
  /iframe/launch/{launchId}/statistic:
    get:
      tags:
      - iframe-controller
      summary: Get launch statistic
      operationId: getStatistic_1
      parameters:
      - name: launchId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestStatusCount'
                x-content-type: '*/*'
  /ide/testcase/{id}/scenario:
    get:
      tags:
      - ide-test-case-controller
      summary: Get scenario for test case
      description: To use with IDE plugins only
      operationId: getScenario_1
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/IdeScenarioDto'
  /globalsettings:
    get:
      tags:
      - global-settings-controller
      summary: Returns global settings
      operationId: getGlobalSettings
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GlobalSettingsDto'
  /globalsettings/globalpermissions:
    get:
      tags:
      - global-settings-controller
      summary: Returns all global permissions for user
      operationId: getGlobalPermissions
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GlobalPermissionsDto'
  /filter/suggest:
    get:
      tags:
      - filter-controller
      summary: Get suggest for filters
      operationId: suggest_15
      parameters:
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: ignoreId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageIdAndNameOnlyDto'
  /export:
    get:
      tags:
      - export-request-controller
      summary: Find all reports
      operationId: findAll_35
      parameters:
      - name: projectId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "createdDate,DESC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageExportRequestDto'
  /export/{id}:
    get:
      tags:
      - export-request-controller
      summary: Find report by id
      operationId: findOne_29
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ExportRequestDto'
    delete:
      tags:
      - export-request-controller
      summary: Delete report
      operationId: delete_33
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /export/testresult/csv/mapping:
    get:
      tags:
      - export-controller
      summary: Get supported test result export fields
      operationId: getSupportedTRFields
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestResultExportField'
                x-content-type: '*/*'
  /export/testcase/csv/mapping:
    get:
      tags:
      - export-controller
      summary: Get supported test case export fields
      operationId: getSupportedTCFields
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestCaseExportField'
                x-content-type: '*/*'
  /export/launch/pdf/structure:
    get:
      tags:
      - export-controller
      summary: Get supported launch pdf report parts
      operationId: getSupportedLaunchPdfContent
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LaunchPdfStructure'
  /export/download/{exportRequestId}:
    get:
      tags:
      - export-request-controller
      summary: Download prepared export
      operationId: downloadExport
      parameters:
      - name: exportRequestId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StreamingResponseBody'
  /evv/suggest:
    get:
      tags:
      - env-var-value-controller
      summary: Suggest environment values
      operationId: suggest_16
      parameters:
      - name: envVarId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: ignoreId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageIdAndNameOnlyDto'
  /environment/suggest:
    get:
      tags:
      - env-var-controller
      summary: Suggest environment variables
      operationId: suggest_17
      parameters:
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: ignoreId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageIdAndNameOnlyDto'
  /ev/suggest:
    get:
      tags:
      - env-var-controller
      summary: Suggest environment variables
      operationId: suggest_18
      parameters:
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: ignoreId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageIdAndNameOnlyDto'
  /defect/{id}/testresult:
    get:
      tags:
      - defect-controller
      operationId: getTestResults_1
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "created_date,DESC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTestResultRowDto'
  /defect/{id}/testcase:
    get:
      tags:
      - defect-controller
      operationId: getTestCases_1
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "id,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTestCaseRowDto'
  /defect/{id}/matcher:
    get:
      tags:
      - defect-controller
      operationId: getMatchers
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "id,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageDefectMatcherDto'
  /defect/{id}/launch:
    get:
      tags:
      - defect-controller
      operationId: getLaunches_1
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "created_date,DESC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageLaunchRowDto'
  /defect/suggest:
    get:
      tags:
      - defect-controller
      operationId: suggest_19
      parameters:
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: ignoreId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageIdAndNameOnlyDto'
  /cleanerschema/global:
    get:
      tags:
      - cleaner-schema-controller
      summary: Find all global cleaner schemas
      operationId: findAllGlobalSchemas
      parameters:
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "id,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageCleanerSchemaDto'
  /cfv/suggest:
    get:
      tags:
      - custom-field-value-controller
      summary: Suggest custom field values
      operationId: suggest_20
      parameters:
      - name: customFieldId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: ignoreId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageIdAndNameOnlyDto'
  /cf/suggest:
    get:
      tags:
      - custom-field-controller
      operationId: suggest_21
      parameters:
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: ignoreId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageIdAndNameOnlyDto'
  /category/suggest:
    get:
      tags:
      - category-controller
      operationId: suggest_22
      parameters:
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: ignoreId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageIdAndNameOnlyDto'
  /analytic/{id}/tc_success_rate:
    get:
      tags:
      - analytic-controller
      operationId: successRate
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: tcRql
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: launchRql
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: from
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: to
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: interval
        in: query
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/AnalyticInterval'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnalyticDto'
                x-content-type: '*/*'
  /analytic/{id}/tc_last_result:
    get:
      tags:
      - analytic-controller
      operationId: lastResults
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestCaseLastResultDto'
                x-content-type: '*/*'
  /analytic/{id}/statistic_trend:
    get:
      tags:
      - analytic-controller
      operationId: statisticTrend
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: tcRql
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: launchRql
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: from
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: to
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: interval
        in: query
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/AnalyticInterval'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnalyticTrByStatusTrendDto'
                x-content-type: '*/*'
  /analytic/{id}/mute_trend:
    get:
      tags:
      - analytic-controller
      operationId: muteTrend
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: from
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: to
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: interval
        in: query
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/AnalyticInterval'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnalyticMuteTrendDto'
                x-content-type: '*/*'
  /analytic/{id}/launch_duration_histogram:
    get:
      tags:
      - analytic-controller
      operationId: launchDurationHistogram
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: tcRql
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: launchRql
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: from
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: to
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: buckets
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 10
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnalyticLaunchDurationHistogramDto'
                x-content-type: '*/*'
  /analytic/{id}/group_by_status:
    get:
      tags:
      - analytic-controller
      operationId: groupByStatus
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: tcRql
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnalyticTcStatusCountDto'
                x-content-type: '*/*'
  /analytic/{id}/group_by_automation:
    get:
      tags:
      - analytic-controller
      operationId: groupByAutomation
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: tcRql
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnalyticTcAutomationCountDto'
                x-content-type: '*/*'
  /analytic/{id}/automation_chart:
    get:
      tags:
      - analytic-controller
      operationId: automationChart
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: tcRql
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: launchRql
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: from
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: to
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: interval
        in: query
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/AnalyticInterval'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnalyticAutomationTrendDto'
                x-content-type: '*/*'
  /accessgroup/suggest:
    get:
      tags:
      - access-group-controller
      summary: Suggests groups
      operationId: suggest_23
      parameters:
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: ignoreId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          default:
          - "name,ASC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageIdAndNameOnlyDto'
  /treepath/{id}:
    delete:
      tags:
      - tree-path-controller
      operationId: delete_4
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /mute/{id}:
    delete:
      tags:
      - mute-controller
      summary: Delete mute
      operationId: delete_24
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
components:
  schemas:
    TestResultAttachmentRowDto:
      type: object
      properties:
        missed:
          type: boolean
      description: ""
      example:
        missed: true
      allOf:
      - $ref: '#/components/schemas/AttachmentRow'
    TestFixtureResultAttachmentRowDto:
      type: object
      properties:
        missed:
          type: boolean
      description: ""
      example:
        missed: true
      allOf:
      - $ref: '#/components/schemas/AttachmentRow'
    TestCaseAttachmentRowDto:
      type: object
      properties:
        missed:
          type: boolean
      description: ""
      example:
        missed: true
      allOf:
      - $ref: '#/components/schemas/AttachmentRow'
    SharedStepAttachmentRowDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        contentType:
          type: string
        contentLength:
          type: integer
          format: int64
        missed:
          type: boolean
      description: ""
      example:
        missed: true
        name: name
        contentLength: 6
        id: 0
        contentType: contentType
    TestCaseType:
      type: string
      description: ""
      enum:
      - manual
      - automated
    WorkflowSchemaCreateDto:
      required:
      - projectId
      - type
      - workflowId
      type: object
      properties:
        projectId:
          type: integer
          format: int64
        workflowId:
          type: integer
          format: int64
        type:
          $ref: '#/components/schemas/TestCaseType'
      description: ""
    StatusDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        color:
          type: string
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        createdDate: 4
        color: color
        lastModifiedDate: 7
        createdBy: createdBy
        lastModifiedBy: lastModifiedBy
        name: name
        id: 2
    WorkflowDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        statuses:
          type: array
          items:
            $ref: '#/components/schemas/StatusDto'
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        createdDate: 1
        lastModifiedDate: 1
        createdBy: createdBy
        lastModifiedBy: lastModifiedBy
        name: name
        statuses:
        - createdDate: 4
          color: color
          lastModifiedDate: 7
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          id: 2
        - createdDate: 4
          color: color
          lastModifiedDate: 7
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          id: 2
        id: 3
    WorkflowSchemaDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        projectId:
          type: integer
          format: int64
        workflow:
          $ref: '#/components/schemas/WorkflowDto'
        type:
          $ref: '#/components/schemas/TestCaseType'
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        createdDate: 1
        workflow:
          createdDate: 1
          lastModifiedDate: 1
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          statuses:
          - createdDate: 4
            color: color
            lastModifiedDate: 7
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 2
          - createdDate: 4
            color: color
            lastModifiedDate: 7
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 2
          id: 3
        lastModifiedDate: 6
        createdBy: createdBy
        lastModifiedBy: lastModifiedBy
        id: 7
        type: manual
        projectId: 9
    IdOnlyDto:
      required:
      - id
      type: object
      properties:
        id:
          type: integer
          format: int64
      description: ""
    WorkflowCreateDto:
      required:
      - name
      - statuses
      type: object
      properties:
        name:
          type: string
        statuses:
          type: array
          items:
            $ref: '#/components/schemas/IdOnlyDto'
      description: ""
    AnalyticInterval:
      type: string
      description: ""
      enum:
      - hour
      - day
      - week
      - month
    GridPosDto:
      type: object
      properties:
        h:
          type: integer
          format: int32
        w:
          type: integer
          format: int32
        x:
          type: integer
          format: int32
        "y":
          type: integer
          format: int32
      description: ""
      example:
        w: 7
        h: 2
        x: 9
        "y": 3
    GroupBy:
      type: string
      description: ""
      enum:
      - automation
      - status
      - last_status
    Metric:
      type: string
      description: ""
      enum:
      - duration
      - success_rate
    WidgetCreateDto:
      required:
      - dashboardId
      - name
      - type
      type: object
      properties:
        dashboardId:
          type: integer
          format: int64
        name:
          type: string
        type:
          $ref: '#/components/schemas/WidgetTypeDto'
        options:
          oneOf:
          - $ref: '#/components/schemas/WidgetOptionsAnalyticGraph'
          - $ref: '#/components/schemas/WidgetOptionsLaunchList'
          - $ref: '#/components/schemas/WidgetOptionsMarkdown'
          - $ref: '#/components/schemas/WidgetOptionsTcPieChart'
          - $ref: '#/components/schemas/WidgetOptionsTcTreeMap'
          - $ref: '#/components/schemas/WidgetOptionsTopTc'
          - $ref: '#/components/schemas/WidgetOptionsTrend'
        gridPos:
          $ref: '#/components/schemas/GridPosDto'
      description: ""
    WidgetOptions:
      required:
      - type
      type: object
      properties:
        type:
          type: string
      discriminator:
        propertyName: Type_
    WidgetOptionsAnalyticGraph:
      required:
      - metric
      type: object
      properties:
        tcRql:
          type: string
        launchRql:
          type: string
        iterations:
          type: integer
          format: int32
        interval:
          $ref: '#/components/schemas/AnalyticInterval'
        metric:
          type: string
      description: ""
      allOf:
      - $ref: '#/components/schemas/WidgetOptions'
    WidgetOptionsLaunchList:
      type: object
      properties:
        launchRql:
          type: string
      description: ""
      allOf:
      - $ref: '#/components/schemas/WidgetOptions'
    WidgetOptionsMarkdown:
      type: object
      properties:
        body:
          type: string
      description: ""
      allOf:
      - $ref: '#/components/schemas/WidgetOptions'
    WidgetOptionsTcPieChart:
      type: object
      properties:
        tcRql:
          type: string
        launchRql:
          type: string
        groupBy:
          $ref: '#/components/schemas/GroupBy'
        includeInProgressLaunches:
          type: boolean
        includeParameters:
          type: boolean
      description: ""
      allOf:
      - $ref: '#/components/schemas/WidgetOptions'
    WidgetOptionsTcTreeMap:
      required:
      - treeId
      type: object
      properties:
        tcRql:
          type: string
        treeId:
          type: integer
          format: int64
      description: ""
      allOf:
      - $ref: '#/components/schemas/WidgetOptions'
    WidgetOptionsTopTc:
      required:
      - metric
      type: object
      properties:
        tcRql:
          type: string
        launchRql:
          type: string
        daysRange:
          type: integer
          format: int32
        metric:
          $ref: '#/components/schemas/Metric'
      description: ""
      allOf:
      - $ref: '#/components/schemas/WidgetOptions'
    WidgetOptionsTrend:
      type: object
      properties:
        tcRql:
          type: string
        launchRql:
          type: string
        daysRange:
          type: integer
          format: int32
        interval:
          $ref: '#/components/schemas/AnalyticInterval'
      description: ""
      allOf:
      - $ref: '#/components/schemas/WidgetOptions'
    WidgetTypeDto:
      type: string
      description: ""
      enum:
      - markdown
      - analytics_graph
      - tc_pie_chart
      - automation_trend
      - statistic_trend
      - top_tc
      - tc_tree_map
      - launch_list
      - last_launch_pie_chart
      - launch_trend
    WidgetDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        dashboardId:
          type: integer
          format: int64
        name:
          type: string
        type:
          $ref: '#/components/schemas/WidgetTypeDto'
        options:
          oneOf:
          - $ref: '#/components/schemas/WidgetOptionsAnalyticGraph'
          - $ref: '#/components/schemas/WidgetOptionsLaunchList'
          - $ref: '#/components/schemas/WidgetOptionsMarkdown'
          - $ref: '#/components/schemas/WidgetOptionsTcPieChart'
          - $ref: '#/components/schemas/WidgetOptionsTcTreeMap'
          - $ref: '#/components/schemas/WidgetOptionsTopTc'
          - $ref: '#/components/schemas/WidgetOptionsTrend'
        gridPos:
          $ref: '#/components/schemas/GridPosDto'
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        createdDate: 2
        dashboardId: 5
        lastModifiedDate: 4
        createdBy: createdBy
        lastModifiedBy: lastModifiedBy
        name: name
        options: ""
        id: 5
        type: markdown
        gridPos:
          w: 7
          h: 2
          x: 9
          "y": 3
    ExternalRunStopRequestDto:
      required:
      - jobRunUid
      - jobUid
      - projectId
      type: object
      properties:
        projectId:
          type: integer
          format: int64
        jobUid:
          type: string
        jobRunUid:
          type: string
        status:
          $ref: '#/components/schemas/Status'
      description: ""
    Status:
      type: string
      description: ""
      enum:
      - failed
      - passed
      - cancelled
      - unknown
    ExternalRunResponseDto:
      type: object
      properties:
        projectId:
          type: integer
          format: int64
        launchId:
          type: integer
          format: int64
        jobId:
          type: integer
          format: int64
        jobRunId:
          type: integer
          format: int64
      description: ""
      example:
        launchId: 6
        jobId: 1
        jobRunId: 5
        projectId: 0
    Ci:
      type: object
      properties:
        endpoint:
          type: string
        type:
          type: string
      description: ""
    ExternalRunStartRequestDto:
      required:
      - jobRun
      type: object
      properties:
        projectId:
          type: integer
          format: int64
        ci:
          $ref: '#/components/schemas/Ci'
        job:
          $ref: '#/components/schemas/Job'
        jobRun:
          $ref: '#/components/schemas/JobRun'
        launch:
          $ref: '#/components/schemas/Launch'
      description: ""
    Job:
      type: object
      properties:
        id:
          type: integer
          format: int64
        uid:
          type: string
        name:
          type: string
        url:
          type: string
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/Parameter'
      description: ""
    JobRun:
      type: object
      properties:
        id:
          type: integer
          format: int64
        uid:
          type: string
        name:
          type: string
        url:
          type: string
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/Parameter'
      description: ""
    Launch:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        autoclose:
          type: boolean
        tags:
          uniqueItems: true
          type: array
          items:
            type: string
      description: ""
    Parameter:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
      description: ""
    SessionVariable:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
      description: ""
    TestSessionResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        projectId:
          type: integer
          format: int64
        launchId:
          type: integer
          format: int64
        jobId:
          type: integer
          format: int64
        jobRunId:
          type: integer
          format: int64
      description: ""
      example:
        launchId: 1
        jobId: 5
        id: 0
        jobRunId: 5
        projectId: 6
    ManualSessionRequestDto:
      required:
      - launchId
      type: object
      properties:
        launchId:
          type: integer
          format: int64
        environment:
          type: array
          items:
            $ref: '#/components/schemas/SessionVariable'
      description: ""
    TreePathCreateDto:
      required:
      - items
      - treeId
      type: object
      properties:
        treeId:
          type: integer
          format: int64
        items:
          maxItems: 2147483647
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/IdOnlyDto'
      description: ""
    TreePathDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        treeId:
          type: integer
          format: int64
        items:
          type: array
          items:
            $ref: '#/components/schemas/TreePathItemDto'
        favorite:
          type: boolean
      description: ""
      example:
        treeId: 5
        id: 5
        items:
        - name: name
          customFieldId: 7
          id: 2
        - name: name
          customFieldId: 7
          id: 2
        favorite: true
    TreePathItemDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        customFieldId:
          type: integer
          format: int64
      description: ""
      example:
        name: name
        customFieldId: 7
        id: 2
    TreeCreateDto:
      required:
      - fields
      - name
      - projectId
      type: object
      properties:
        name:
          type: string
        projectId:
          type: integer
          format: int64
        fields:
          maxItems: 2147483647
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/IdOnlyDto'
      description: ""
    CustomFieldDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        createdDate: 7
        lastModifiedDate: 9
        createdBy: createdBy
        lastModifiedBy: lastModifiedBy
        name: name
        id: 2
    TreeDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        projectId:
          type: integer
          format: int64
        fields:
          type: array
          items:
            $ref: '#/components/schemas/CustomFieldDto'
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        createdDate: 3
        lastModifiedDate: 2
        createdBy: createdBy
        lastModifiedBy: lastModifiedBy
        name: name
        id: 5
        fields:
        - createdDate: 7
          lastModifiedDate: 9
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          id: 2
        - createdDate: 7
          lastModifiedDate: 9
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          id: 2
        projectId: 5
    TestResultTreeSelectionDto:
      type: object
      properties:
        inverted:
          type: boolean
        groupsInclude:
          uniqueItems: true
          type: array
          items:
            type: array
            items:
              type: integer
              format: int64
        groupsExclude:
          uniqueItems: true
          type: array
          items:
            type: array
            items:
              type: integer
              format: int64
        leafsInclude:
          uniqueItems: true
          type: array
          items:
            type: integer
            format: int64
        leafsExclude:
          uniqueItems: true
          type: array
          items:
            type: integer
            format: int64
        path:
          type: array
          items:
            type: integer
            format: int64
        launchId:
          type: integer
          format: int64
        treeId:
          type: integer
          format: int64
        search:
          type: string
      description: ""
    AttachmentRow:
      required:
      - entity
      type: object
      properties:
        name:
          type: string
        id:
          type: integer
          format: int64
        contentLength:
          type: integer
          format: int64
        contentType:
          type: string
        entity:
          type: string
      discriminator:
        propertyName: Entity
    CustomFieldValueDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        customField:
          $ref: '#/components/schemas/CustomFieldDto'
      description: ""
      example:
        name: name
        id: 0
        customField:
          createdDate: 7
          lastModifiedDate: 9
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          id: 2
    ExternalLinkDto:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
        type:
          type: string
      description: ""
      example:
        name: name
        type: type
        url: url
    MemberDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        role:
          $ref: '#/components/schemas/RoleDto'
      description: ""
      example:
        role:
          createdDate: 1
          lastModifiedDate: 5
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          id: 6
        name: name
        id: 0
    RoleDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        createdDate: 1
        lastModifiedDate: 5
        createdBy: createdBy
        lastModifiedBy: lastModifiedBy
        name: name
        id: 6
    TestResultCreateDto:
      required:
      - launchId
      - name
      - status
      type: object
      properties:
        launchId:
          type: integer
          format: int64
        testCaseId:
          type: integer
          format: int64
        name:
          type: string
        fullName:
          type: string
        status:
          $ref: '#/components/schemas/TestStatus'
        message:
          type: string
        trace:
          type: string
        start:
          type: integer
          format: int64
        stop:
          type: integer
          format: int64
        duration:
          type: integer
          format: int64
        description:
          type: string
        precondition:
          type: string
        expectedResult:
          type: string
        manual:
          type: boolean
        external:
          type: boolean
        testLayerId:
          type: integer
          format: int64
        scenario:
          $ref: '#/components/schemas/TestResultScenarioDto'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TestTagDto'
        links:
          type: array
          items:
            $ref: '#/components/schemas/ExternalLinkDto'
        customFields:
          type: array
          items:
            $ref: '#/components/schemas/CustomFieldValueDto'
        members:
          type: array
          items:
            $ref: '#/components/schemas/MemberDto'
      description: ""
    TestResultParameterDto:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
        hidden:
          type: boolean
        excluded:
          type: boolean
      description: ""
      example:
        excluded: true
        hidden: true
        name: name
        value: value
    TestResultScenarioDto:
      type: object
      properties:
        steps:
          type: array
          items:
            $ref: '#/components/schemas/TestResultScenarioStepDto'
        attachments:
          type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/TestCaseAttachmentRowDto'
            - $ref: '#/components/schemas/TestFixtureResultAttachmentRowDto'
            - $ref: '#/components/schemas/TestResultAttachmentRowDto'
      description: ""
      example:
        attachments:
        - ""
        - ""
        steps:
        - attachments:
          - ""
          - ""
          expandable: true
          showMessage: true
          start: 5
          message: message
          leaf: true
          steps:
          - null
          - null
          duration: 7
          trace: trace
          attachmentsCount: 3
          stop: 2
          expectedResult: expectedResult
          name: name
          stepsCount: 9
          keyword: keyword
          parameters:
          - excluded: true
            hidden: true
            name: name
            value: value
          - excluded: true
            hidden: true
            name: name
            value: value
          status: null
        - attachments:
          - ""
          - ""
          expandable: true
          showMessage: true
          start: 5
          message: message
          leaf: true
          steps:
          - null
          - null
          duration: 7
          trace: trace
          attachmentsCount: 3
          stop: 2
          expectedResult: expectedResult
          name: name
          stepsCount: 9
          keyword: keyword
          parameters:
          - excluded: true
            hidden: true
            name: name
            value: value
          - excluded: true
            hidden: true
            name: name
            value: value
          status: null
    TestResultScenarioStepDto:
      type: object
      properties:
        name:
          type: string
        keyword:
          type: string
        status:
          $ref: '#/components/schemas/TestStatus'
        expectedResult:
          type: string
        start:
          type: integer
          format: int64
        stop:
          type: integer
          format: int64
        duration:
          type: integer
          format: int64
        message:
          type: string
        trace:
          type: string
        parameters:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/TestResultParameterDto'
        steps:
          type: array
          items:
            $ref: '#/components/schemas/TestResultScenarioStepDto'
        attachments:
          type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/TestCaseAttachmentRowDto'
            - $ref: '#/components/schemas/TestFixtureResultAttachmentRowDto'
            - $ref: '#/components/schemas/TestResultAttachmentRowDto'
        stepsCount:
          type: integer
          format: int64
        attachmentsCount:
          type: integer
          format: int64
        leaf:
          type: boolean
        expandable:
          type: boolean
        showMessage:
          type: boolean
      description: ""
      example:
        attachments:
        - ""
        - ""
        expandable: true
        showMessage: true
        start: 5
        message: message
        leaf: true
        steps:
        - null
        - null
        duration: 7
        trace: trace
        attachmentsCount: 3
        stop: 2
        expectedResult: expectedResult
        name: name
        stepsCount: 9
        keyword: keyword
        parameters:
        - excluded: true
          hidden: true
          name: name
          value: value
        - excluded: true
          hidden: true
          name: name
          value: value
        status: null
    TestStatus:
      type: string
      description: ""
      enum:
      - failed
      - broken
      - passed
      - skipped
      - unknown
    TestTagDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      description: ""
      example:
        name: name
        id: 6
    CategoryDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        projectId:
          type: integer
          format: int64
        name:
          type: string
        color:
          type: string
        description:
          type: string
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        createdDate: 6
        color: color
        lastModifiedDate: 7
        createdBy: createdBy
        lastModifiedBy: lastModifiedBy
        name: name
        description: description
        id: 1
        projectId: 1
    IdAndNameOnlyDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      description: ""
      example:
        name: name
        id: 6
    IntegrationTypeDto:
      type: string
      description: ""
      enum:
      - allure_testops
      - azure
      - bamboo
      - bitbucket
      - circleci
      - github
      - gitlab
      - jenkins
      - jira
      - jira_cloud
      - redmine
      - target_process
      - teamcity
      - tekton
      - testrail
      - xray
      - xray_cloud
      - youtrack
      - zephyr_scale
      - zephyr_scale_cloud
      - yandex_tracker
      - custom
      - aws
      - wrike
    JobInfoDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        url:
          type: string
        type:
          $ref: '#/components/schemas/IntegrationTypeDto'
      description: ""
      example:
        name: name
        id: 4
        type: allure_testops
        url: url
    JobRunDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        url:
          type: string
        externalId:
          type: string
        stage:
          $ref: '#/components/schemas/JobRunStageDto'
        status:
          $ref: '#/components/schemas/JobRunStatusDto'
        errorMessage:
          type: string
        job:
          $ref: '#/components/schemas/JobInfoDto'
        launchId:
          type: integer
          format: int64
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        lastModifiedDate: 9
        lastModifiedBy: lastModifiedBy
        errorMessage: errorMessage
        externalId: externalId
        url: url
        launchId: 5
        createdDate: 9
        stage: run_failure
        createdBy: createdBy
        name: name
        id: 1
        job:
          name: name
          id: 4
          type: allure_testops
          url: url
        status: failed
    JobRunStageDto:
      type: string
      description: ""
      enum:
      - run_failure
      - scheduled
      - in_progress
      - finished
    JobRunStatusDto:
      type: string
      description: ""
      enum:
      - failed
      - passed
      - cancelled
      - unknown
    TestLayerDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        createdDate: 7
        lastModifiedDate: 1
        createdBy: createdBy
        lastModifiedBy: lastModifiedBy
        name: name
        id: 4
    TestResultDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        projectId:
          type: integer
          format: int64
        launchId:
          type: integer
          format: int64
        testCaseId:
          type: integer
          format: int64
        historyKey:
          type: string
        scenarioKey:
          type: string
        name:
          type: string
        fullName:
          type: string
        description:
          type: string
        descriptionHtml:
          type: string
        precondition:
          type: string
        preconditionHtml:
          type: string
        expectedResult:
          type: string
        expectedResultHtml:
          type: string
        start:
          type: integer
          format: int64
        stop:
          type: integer
          format: int64
        duration:
          type: integer
          format: int64
        status:
          $ref: '#/components/schemas/TestStatus'
        layer:
          $ref: '#/components/schemas/TestLayerDto'
        category:
          $ref: '#/components/schemas/CategoryDto'
        message:
          type: string
        trace:
          type: string
        external:
          type: boolean
        manual:
          type: boolean
        assignee:
          type: string
        testedBy:
          type: string
        jobRun:
          $ref: '#/components/schemas/JobRunDto'
        hostId:
          type: string
        threadId:
          type: string
        flaky:
          type: boolean
        muted:
          type: boolean
        known:
          type: boolean
        hidden:
          type: boolean
        retriedBy:
          $ref: '#/components/schemas/IdAndNameOnlyDto'
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/TestResultParameterDto'
        tags:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/TestTagDto'
        links:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ExternalLinkDto'
      description: ""
      example:
        hidden: true
        testedBy: testedBy
        flaky: true
        description: description
        scenarioKey: scenarioKey
        manual: true
        retriedBy:
          name: name
          id: 6
        layer:
          createdDate: 7
          lastModifiedDate: 1
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          id: 4
        duration: 2
        threadId: threadId
        trace: trace
        known: true
        expectedResultHtml: expectedResultHtml
        links:
        - name: name
          type: type
          url: url
        - name: name
          type: type
          url: url
        id: 5
        muted: true
        historyKey: historyKey
        jobRun:
          lastModifiedDate: 9
          lastModifiedBy: lastModifiedBy
          errorMessage: errorMessage
          externalId: externalId
          url: url
          launchId: 5
          createdDate: 9
          stage: run_failure
          createdBy: createdBy
          name: name
          id: 1
          job:
            name: name
            id: 4
            type: allure_testops
            url: url
          status: failed
        lastModifiedDate: 9
        lastModifiedBy: lastModifiedBy
        start: 9
        fullName: fullName
        hostId: hostId
        precondition: precondition
        message: message
        tags:
        - name: name
          id: 6
        - name: name
          id: 6
        launchId: 2
        external: true
        preconditionHtml: preconditionHtml
        createdDate: 8
        stop: 3
        expectedResult: expectedResult
        createdBy: createdBy
        name: name
        descriptionHtml: descriptionHtml
        assignee: assignee
        category:
          createdDate: 6
          color: color
          lastModifiedDate: 7
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          description: description
          id: 1
          projectId: 1
        projectId: 5
        parameters:
        - excluded: true
          hidden: true
          name: name
          value: value
        - excluded: true
          hidden: true
          name: name
          value: value
        testCaseId: 7
        status: failed
    TestKeyDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        integrationId:
          type: integer
          format: int64
        name:
          type: string
        url:
          type: string
      description: ""
      example:
        name: name
        integrationId: 6
        id: 0
        url: url
    TestResultRerunDto:
      type: object
      properties:
        username:
          type: string
      description: ""
    IssueDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        integrationId:
          type: integer
          format: int64
        name:
          type: string
        url:
          type: string
        summary:
          type: string
        status:
          type: string
        closed:
          type: boolean
      description: ""
      example:
        summary: summary
        name: name
        integrationId: 6
        closed: true
        id: 0
        url: url
        status: status
    DefectIssueLinkDto:
      required:
      - integrationId
      - name
      type: object
      properties:
        integrationId:
          type: integer
          format: int64
        name:
          type: string
      description: ""
    ExtIssueCreate:
      type: object
      description: ""
    IssueToCreateDto:
      type: object
      properties:
        integrationId:
          type: integer
          format: int64
        projectKey:
          type: string
        issueTypeId:
          type: string
        fields:
          $ref: '#/components/schemas/ExtIssueCreate'
      description: ""
    TestResultDefectMatcherDto:
      required:
      - name
      type: object
      properties:
        name:
          type: string
        messageRegex:
          type: string
        traceRegex:
          type: string
      description: ""
    TestResultNewDefectDto:
      required:
      - name
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        issue:
          $ref: '#/components/schemas/IssueToCreateDto'
        linkIssue:
          $ref: '#/components/schemas/DefectIssueLinkDto'
        matcher:
          $ref: '#/components/schemas/TestResultDefectMatcherDto'
      description: ""
    DefectDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        projectId:
          type: integer
          format: int64
        name:
          type: string
        closed:
          type: boolean
        description:
          type: string
        descriptionHtml:
          type: string
        issue:
          $ref: '#/components/schemas/IssueDto'
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        createdDate: 1
        issue:
          summary: summary
          name: name
          integrationId: 6
          closed: true
          id: 0
          url: url
          status: status
        lastModifiedDate: 5
        createdBy: createdBy
        lastModifiedBy: lastModifiedBy
        name: name
        closed: true
        description: description
        descriptionHtml: descriptionHtml
        id: 0
        projectId: 6
    TestResultLinkDefectDto:
      type: object
      properties:
        matcher:
          $ref: '#/components/schemas/TestResultDefectMatcherDto'
      description: ""
    ResolveRequestDto:
      required:
      - status
      type: object
      properties:
        status:
          $ref: '#/components/schemas/TestStatus'
        message:
          type: string
        trace:
          type: string
        start:
          type: integer
          format: int64
        stop:
          type: integer
          format: int64
        duration:
          type: integer
          format: int64
        execution:
          $ref: '#/components/schemas/TestResultScenarioDto'
        categoryId:
          type: integer
          format: int64
      description: ""
    TestResultRowDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        testCaseId:
          type: integer
          format: int64
        name:
          type: string
        status:
          $ref: '#/components/schemas/TestStatus'
        duration:
          type: integer
          format: int64
        assignee:
          type: string
      description: ""
      example:
        duration: 1
        name: name
        id: 0
        assignee: assignee
        testCaseId: 6
        status: failed
    TestResultMuteReason:
      type: object
      properties:
        name:
          type: string
        reason:
          type: string
        issues:
          type: array
          items:
            $ref: '#/components/schemas/IssueDto'
      description: ""
    AssignRequestDto:
      required:
      - username
      type: object
      properties:
        username:
          type: string
      description: ""
    TestResultBulkDto:
      required:
      - selection
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/TestResultTreeSelectionDto'
      description: ""
    TestResultBulkEntityIdsDto:
      required:
      - ids
      - selection
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/TestResultTreeSelectionDto'
        ids:
          type: array
          items:
            type: integer
            format: int64
      description: ""
    TestResultBulkTagDto:
      required:
      - selection
      - tags
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/TestResultTreeSelectionDto'
        tags:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/TestTagDto'
      description: ""
    TestResultBulkResolveDto:
      required:
      - selection
      - status
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/TestResultTreeSelectionDto'
        status:
          $ref: '#/components/schemas/TestStatus'
        message:
          type: string
        trace:
          type: string
        categoryId:
          type: integer
          format: int64
      description: ""
    TestResultBulkRerunDto:
      required:
      - selection
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/TestResultTreeSelectionDto'
        rql:
          type: string
        forceManual:
          type: boolean
        assignees:
          uniqueItems: true
          type: array
          items:
            type: string
      description: ""
    TestResultBulkMuteDto:
      required:
      - selection
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/TestResultTreeSelectionDto'
        name:
          type: string
        reason:
          type: string
        issues:
          type: array
          items:
            $ref: '#/components/schemas/IssueDto'
      description: ""
    TestResultBulkAssignDto:
      required:
      - selection
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/TestResultTreeSelectionDto'
        assignees:
          uniqueItems: true
          type: array
          items:
            type: string
      description: ""
    TestPlanCreateDto:
      required:
      - name
      - projectId
      type: object
      properties:
        projectId:
          type: integer
          format: int64
        treeId:
          type: integer
          format: int64
        name:
          maxLength: 255
          minLength: 1
          type: string
        baseRql:
          maxLength: 1000
          minLength: 0
          type: string
        treeSelection:
          $ref: '#/components/schemas/TreeSelectionDto'
      description: ""
    TreeSelectionDto:
      type: object
      properties:
        inverted:
          type: boolean
        groupsInclude:
          uniqueItems: true
          type: array
          items:
            type: array
            items:
              type: integer
              format: int64
        groupsExclude:
          uniqueItems: true
          type: array
          items:
            type: array
            items:
              type: integer
              format: int64
        leafsInclude:
          uniqueItems: true
          type: array
          items:
            type: integer
            format: int64
        leafsExclude:
          uniqueItems: true
          type: array
          items:
            type: integer
            format: int64
        path:
          type: array
          items:
            type: integer
            format: int64
      description: ""
      example:
        leafsExclude:
        - 3
        - 3
        path:
        - 2
        - 2
        groupsInclude:
        - - 2
          - 2
        - - 2
          - 2
        groupsExclude:
        - - 7
          - 7
        - - 7
          - 7
        inverted: true
        leafsInclude:
        - 9
        - 9
    TestPlanDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        projectId:
          type: integer
          format: int64
        name:
          type: string
        baseRql:
          type: string
        tree:
          $ref: '#/components/schemas/IdAndNameOnlyDto'
        treeSelection:
          $ref: '#/components/schemas/TreeSelectionDto'
        testCasesCount:
          type: integer
          format: int64
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        baseRql: baseRql
        createdDate: 7
        lastModifiedDate: 1
        createdBy: createdBy
        treeSelection:
          leafsExclude:
          - 3
          - 3
          path:
          - 2
          - 2
          groupsInclude:
          - - 2
            - 2
          - - 2
            - 2
          groupsExclude:
          - - 7
            - 7
          - - 7
            - 7
          inverted: true
          leafsInclude:
          - 9
          - 9
        lastModifiedBy: lastModifiedBy
        name: name
        tree:
          name: name
          id: 6
        testCasesCount: 4
        id: 5
        projectId: 5
    EnvVarDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        createdDate: 1
        lastModifiedDate: 5
        createdBy: createdBy
        lastModifiedBy: lastModifiedBy
        name: name
        id: 6
    EnvVarValueDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        variable:
          $ref: '#/components/schemas/EnvVarDto'
      description: ""
      example:
        name: name
        variable:
          createdDate: 1
          lastModifiedDate: 5
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          id: 6
        id: 0
    EnvironmentSetDto:
      type: object
      properties:
        values:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/EnvVarValueDto'
      description: ""
    LaunchTagDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      description: ""
      example:
        name: name
        id: 1
    TestPlanRunRequestDto:
      required:
      - launchName
      type: object
      properties:
        launchName:
          maxLength: 255
          minLength: 1
          type: string
        tags:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/LaunchTagDto'
        links:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ExternalLinkDto'
        issues:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/IssueDto'
        envVarValueSets:
          type: array
          items:
            $ref: '#/components/schemas/EnvironmentSetDto'
      description: ""
    LaunchDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        closed:
          type: boolean
        external:
          type: boolean
        autoclose:
          type: boolean
        projectId:
          type: integer
          format: int64
        tags:
          type: array
          items:
            $ref: '#/components/schemas/LaunchTagDto'
        links:
          type: array
          items:
            $ref: '#/components/schemas/ExternalLinkDto'
        issues:
          type: array
          items:
            $ref: '#/components/schemas/IssueDto'
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        lastModifiedDate: 5
        lastModifiedBy: lastModifiedBy
        issues:
        - summary: summary
          name: name
          integrationId: 6
          closed: true
          id: 0
          url: url
          status: status
        - summary: summary
          name: name
          integrationId: 6
          closed: true
          id: 0
          url: url
          status: status
        tags:
        - name: name
          id: 1
        - name: name
          id: 1
        external: true
        autoclose: true
        createdDate: 5
        createdBy: createdBy
        name: name
        closed: true
        links:
        - name: name
          type: type
          url: url
        - name: name
          type: type
          url: url
        id: 0
        projectId: 6
    JobParameterDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        value:
          type: string
      description: ""
      example:
        name: name
        id: 6
        value: value
    TestPlanJobParametersDto:
      required:
      - jobId
      type: object
      properties:
        jobId:
          type: integer
          format: int64
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/JobParameterDto'
      description: ""
    TestPlanAssignDto:
      required:
      - selection
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/TestPlanTreeSelectionDto'
        username:
          type: string
        jobId:
          type: integer
          format: int64
      description: ""
    TestPlanTreeSelectionDto:
      type: object
      properties:
        inverted:
          type: boolean
        groupsInclude:
          uniqueItems: true
          type: array
          items:
            type: array
            items:
              type: integer
              format: int64
        groupsExclude:
          uniqueItems: true
          type: array
          items:
            type: array
            items:
              type: integer
              format: int64
        leafsInclude:
          uniqueItems: true
          type: array
          items:
            type: integer
            format: int64
        leafsExclude:
          uniqueItems: true
          type: array
          items:
            type: integer
            format: int64
        path:
          type: array
          items:
            type: integer
            format: int64
        username:
          type: string
        jobId:
          type: integer
          format: int64
        manual:
          type: boolean
      description: ""
    TestLayerSchemaCreateDto:
      required:
      - key
      - projectId
      - testLayerId
      type: object
      properties:
        projectId:
          type: integer
          format: int64
        key:
          maxLength: 255
          minLength: 1
          type: string
        testLayerId:
          type: integer
          format: int64
      description: ""
    TestLayerSchemaDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        projectId:
          type: integer
          format: int64
        key:
          type: string
        testLayer:
          $ref: '#/components/schemas/TestLayerDto'
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        createdDate: 2
        lastModifiedDate: 7
        createdBy: createdBy
        lastModifiedBy: lastModifiedBy
        id: 5
        testLayer:
          createdDate: 7
          lastModifiedDate: 1
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          id: 4
        projectId: 5
        key: key
    TestLayerCreateDto:
      required:
      - name
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 1
          type: string
      description: ""
    TestKeySchemaCreateDto:
      required:
      - integrationId
      - key
      - projectId
      type: object
      properties:
        projectId:
          type: integer
          format: int64
        key:
          maxLength: 255
          minLength: 1
          type: string
        integrationId:
          type: integer
          format: int64
      description: ""
    TestKeySchemaDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        projectId:
          type: integer
          format: int64
        key:
          type: string
        integrationId:
          type: integer
          format: int64
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        createdDate: 7
        lastModifiedDate: 9
        createdBy: createdBy
        lastModifiedBy: lastModifiedBy
        integrationId: 2
        id: 5
        projectId: 5
        key: key
    TestCaseUpdateFieldDto:
      type: string
      description: ""
      enum:
      - name
      - full_name
      - test_layer
      - description
      - precondition
      - expected_result
      - link
      - tag
      - issue
      - member
      - custom_field
    TestCaseUpdatePolicyDto:
      type: string
      description: ""
      enum:
      - from_test_case
      - from_test_result
    TestCaseUpdateSchemaCreateDto:
      type: object
      properties:
        projectId:
          type: integer
          format: int64
        field:
          $ref: '#/components/schemas/TestCaseUpdateFieldDto'
        policy:
          $ref: '#/components/schemas/TestCaseUpdatePolicyDto'
      description: ""
    TestCaseUpdateSchemaDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        projectId:
          type: integer
          format: int64
        field:
          $ref: '#/components/schemas/TestCaseUpdateFieldDto'
        policy:
          $ref: '#/components/schemas/TestCaseUpdatePolicyDto'
      description: ""
      example:
        field: name
        id: 0
        projectId: 6
        policy: from_test_case
    TestCaseTreeSelectionDto:
      required:
      - projectId
      type: object
      properties:
        inverted:
          type: boolean
        groupsInclude:
          uniqueItems: true
          type: array
          items:
            type: array
            items:
              type: integer
              format: int64
        groupsExclude:
          uniqueItems: true
          type: array
          items:
            type: array
            items:
              type: integer
              format: int64
        leafsInclude:
          uniqueItems: true
          type: array
          items:
            type: integer
            format: int64
        leafsExclude:
          uniqueItems: true
          type: array
          items:
            type: integer
            format: int64
        path:
          type: array
          items:
            type: integer
            format: int64
        projectId:
          type: integer
          format: int64
        treeId:
          type: integer
          format: int64
        filterId:
          type: integer
          format: int64
        search:
          type: string
      description: ""
    JobMapping:
      required:
      - toId
      type: object
      properties:
        fromId:
          type: integer
          format: int64
        toId:
          type: integer
          format: int64
      description: ""
    TestCaseTreeRunStatRequestDto:
      required:
      - projectId
      type: object
      properties:
        inverted:
          type: boolean
        groupsInclude:
          uniqueItems: true
          type: array
          items:
            type: array
            items:
              type: integer
              format: int64
        groupsExclude:
          uniqueItems: true
          type: array
          items:
            type: array
            items:
              type: integer
              format: int64
        leafsInclude:
          uniqueItems: true
          type: array
          items:
            type: integer
            format: int64
        leafsExclude:
          uniqueItems: true
          type: array
          items:
            type: integer
            format: int64
        path:
          type: array
          items:
            type: integer
            format: int64
        projectId:
          type: integer
          format: int64
        treeId:
          type: integer
          format: int64
        filterId:
          type: integer
          format: int64
        search:
          type: string
        jobsMapping:
          type: array
          items:
            $ref: '#/components/schemas/JobMapping'
      description: ""
    TestCaseRunByStats:
      type: object
      properties:
        total:
          type: integer
          format: int64
        manual:
          type: integer
          format: int64
        automated:
          type: integer
          format: int64
        notRun:
          type: integer
          format: int64
      description: ""
      example:
        total: 0
        automated: 1
        manual: 6
        notRun: 5
    TestCaseTreeLeafAddDto:
      required:
      - name
      type: object
      properties:
        name:
          type: string
      description: ""
    TestCaseTreeLeafDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        automated:
          type: boolean
        external:
          type: boolean
        createdDate:
          type: integer
          format: int64
        statusName:
          type: string
        statusColor:
          type: string
        layerName:
          type: string
      description: ""
      example:
        automated: true
        external: true
        createdDate: 5
        statusColor: statusColor
        name: name
        statusName: statusName
        id: 5
        layerName: layerName
    TestCaseTreeLeafRenameDto:
      required:
      - name
      type: object
      properties:
        name:
          type: string
      description: ""
    JobDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        type:
          $ref: '#/components/schemas/IntegrationTypeDto'
        url:
          type: string
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/JobParameterDto'
      description: ""
      example:
        name: name
        id: 0
        type: allure_testops
        parameters:
        - name: name
          id: 6
          value: value
        - name: name
          id: 6
          value: value
        url: url
    JobTestCasesStatDto:
      type: object
      properties:
        job:
          $ref: '#/components/schemas/JobDto'
        testCasesCount:
          type: integer
          format: int64
      description: ""
      example:
        testCasesCount: 1
        job:
          name: name
          id: 0
          type: allure_testops
          parameters:
          - name: name
            id: 6
            value: value
          - name: name
            id: 6
            value: value
          url: url
    TestCaseTreeGroupAddDto:
      required:
      - name
      type: object
      properties:
        name:
          type: string
      description: ""
    TestCaseTreeGroupDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        customFieldId:
          type: integer
          format: int64
        count:
          type: integer
          format: int64
      description: ""
      example:
        name: name
        count: 2
        customFieldId: 5
        id: 5
    TestCaseTreeGroupRenameDto:
      type: object
      properties:
        name:
          type: string
      description: ""
    TestCaseCreateDto:
      required:
      - name
      - projectId
      type: object
      properties:
        projectId:
          type: integer
          format: int64
        name:
          type: string
        fullName:
          type: string
        description:
          type: string
        precondition:
          type: string
        expectedResult:
          type: string
        deleted:
          type: boolean
        automated:
          type: boolean
        external:
          type: boolean
        testLayerId:
          type: integer
          format: int64
        statusId:
          type: integer
          format: int64
        workflowId:
          type: integer
          format: int64
        scenario:
          $ref: '#/components/schemas/TestCaseScenarioDto'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TestTagDto'
        links:
          type: array
          items:
            $ref: '#/components/schemas/ExternalLinkDto'
        customFields:
          type: array
          items:
            $ref: '#/components/schemas/CustomFieldValueDto'
        members:
          type: array
          items:
            $ref: '#/components/schemas/MemberDto'
      description: ""
    TestCaseScenarioDto:
      type: object
      properties:
        testResultId:
          type: integer
          format: int64
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/TestCaseAttachmentRowDto'
        steps:
          type: array
          items:
            $ref: '#/components/schemas/TestCaseScenarioStepDto'
      description: ""
      example:
        attachments:
        - missed: true
        - missed: true
        testResultId: 0
        steps:
        - attachments:
          - null
          - null
          expectedResult: expectedResult
          hasContent: true
          name: name
          stepsCount: 6
          keyword: keyword
          leaf: true
          steps:
          - null
          - null
        - attachments:
          - null
          - null
          expectedResult: expectedResult
          hasContent: true
          name: name
          stepsCount: 6
          keyword: keyword
          leaf: true
          steps:
          - null
          - null
    TestCaseScenarioStepDto:
      type: object
      properties:
        name:
          type: string
        keyword:
          type: string
        expectedResult:
          type: string
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/TestCaseAttachmentRowDto'
        steps:
          type: array
          items:
            $ref: '#/components/schemas/TestCaseScenarioStepDto'
        leaf:
          type: boolean
          readOnly: true
        stepsCount:
          type: integer
          format: int64
          readOnly: true
        hasContent:
          type: boolean
          readOnly: true
      description: ""
      example:
        attachments:
        - null
        - null
        expectedResult: expectedResult
        hasContent: true
        name: name
        stepsCount: 6
        keyword: keyword
        leaf: true
        steps:
        - null
        - null
    TestCaseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        projectId:
          type: integer
          format: int64
        name:
          type: string
        fullName:
          type: string
        description:
          type: string
        descriptionHtml:
          type: string
        precondition:
          type: string
        preconditionHtml:
          type: string
        expectedResult:
          type: string
        expectedResultHtml:
          type: string
        hash:
          type: string
        deleted:
          type: boolean
        editable:
          type: boolean
        automated:
          type: boolean
        external:
          type: boolean
        testLayer:
          $ref: '#/components/schemas/TestLayerDto'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TestTagDto'
        links:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ExternalLinkDto'
        status:
          $ref: '#/components/schemas/StatusDto'
        workflow:
          $ref: '#/components/schemas/WorkflowRowDto'
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        workflow:
          name: name
          id: 1
        lastModifiedDate: 5
        editable: true
        lastModifiedBy: lastModifiedBy
        fullName: fullName
        description: description
        precondition: precondition
        testLayer:
          createdDate: 7
          lastModifiedDate: 1
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          id: 4
        tags:
        - name: name
          id: 6
        - name: name
          id: 6
        automated: true
        external: true
        preconditionHtml: preconditionHtml
        deleted: true
        createdDate: 5
        expectedResult: expectedResult
        createdBy: createdBy
        expectedResultHtml: expectedResultHtml
        name: name
        descriptionHtml: descriptionHtml
        links:
        - name: name
          type: type
          url: url
        - name: name
          type: type
          url: url
        id: 0
        projectId: 6
        hash: hash
        status:
          createdDate: 4
          color: color
          lastModifiedDate: 7
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          id: 2
    WorkflowRowDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      description: ""
      example:
        name: name
        id: 1
    TestCaseRelationDto:
      required:
      - target
      - type
      type: object
      properties:
        id:
          type: integer
          format: int64
        target:
          $ref: '#/components/schemas/IdAndNameOnlyDto'
        type:
          $ref: '#/components/schemas/TestCaseRelationTypeDto'
      description: ""
      example:
        id: 0
        type: related to
        target:
          name: name
          id: 6
    TestCaseRelationTypeDto:
      type: string
      description: ""
      enum:
      - related to
      - clones
      - is cloned by
      - duplicates
      - is duplicated by
      - automates
      - is automated by
    ParameterValueDto:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
      description: ""
      example:
        name: name
        value: value
    TestCaseExampleDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        status:
          $ref: '#/components/schemas/TestStatus'
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ParameterValueDto'
      description: ""
      example:
        id: 5
        parameters:
        - name: name
          value: value
        - name: name
          value: value
        status: failed
    TestCaseDetachAutomationRqDto:
      type: object
      properties:
        useScenarioFromTestResult:
          type: boolean
        workflowId:
          type: integer
          format: int64
        statusId:
          type: integer
          format: int64
      description: ""
    TestCaseCloneRqDto:
      type: object
      properties:
        toProjectId:
          type: integer
          format: int64
        workflowId:
          type: integer
          format: int64
        statusId:
          type: integer
          format: int64
        nameSuffix:
          type: string
        ignoreLinks:
          type: boolean
        ignoreCfv:
          type: boolean
        ignoreMembers:
          type: boolean
        ignoreTags:
          type: boolean
        ignoreTestKeys:
          type: boolean
        ignoreIssueLinks:
          type: boolean
        ignoreParameters:
          type: boolean
        ignoreRelations:
          type: boolean
        ignoreAttachments:
          type: boolean
        ignoreScenario:
          type: boolean
      description: ""
    TestCaseRowDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        status:
          $ref: '#/components/schemas/StatusDto'
        testLayer:
          $ref: '#/components/schemas/TestLayerDto'
        automated:
          type: boolean
      description: ""
      example:
        automated: true
        name: name
        id: 5
        testLayer:
          createdDate: 7
          lastModifiedDate: 1
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          id: 4
        status:
          createdDate: 4
          color: color
          lastModifiedDate: 7
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          id: 2
    ExtTmsSyncSettings:
      type: object
      description: ""
    ProjectSyncRequest:
      required:
      - aql
      - fields
      - integrationId
      - projectId
      - projectKey
      - syncOnlyExisting
      - testTypeId
      type: object
      properties:
        projectId:
          type: integer
          format: int64
        aql:
          type: string
        integrationId:
          type: integer
          format: int64
        syncOnlyExisting:
          type: boolean
        projectKey:
          type: string
        testTypeId:
          type: string
        fields:
          $ref: '#/components/schemas/ExtTmsSyncSettings'
      description: ""
    ScenarioStepCreateDto:
      type: object
      properties:
        parentId:
          type: integer
          format: int64
        testCaseId:
          type: integer
          format: int64
        body:
          type: string
        expectedResult:
          type: string
        attachmentId:
          type: integer
          format: int64
        sharedStepId:
          type: integer
          format: int64
      description: ""
    NormalizedScenarioDto:
      type: object
      properties:
        root:
          $ref: '#/components/schemas/ScenarioStepDto'
        scenarioSteps:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ScenarioStepDto'
        attachments:
          type: object
          additionalProperties:
            oneOf:
            - $ref: '#/components/schemas/TestCaseAttachmentRowDto'
            - $ref: '#/components/schemas/TestFixtureResultAttachmentRowDto'
            - $ref: '#/components/schemas/TestResultAttachmentRowDto'
        sharedSteps:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ScenarioStepDto'
        sharedStepScenarioSteps:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ScenarioStepDto'
        sharedStepAttachments:
          type: object
          additionalProperties:
            oneOf:
            - $ref: '#/components/schemas/TestCaseAttachmentRowDto'
            - $ref: '#/components/schemas/TestFixtureResultAttachmentRowDto'
            - $ref: '#/components/schemas/TestResultAttachmentRowDto'
      description: ""
      example:
        sharedStepScenarioSteps:
          key: null
        attachments:
          key: ""
        root:
          sharedStepId: 5
          archived: true
          createdDate: 7
          expectedResult: expectedResult
          children:
          - 2
          - 2
          lastModifiedDate: 9
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          id: 6
          attachmentId: 5
          body: body
          testCaseId: 1
        sharedSteps:
          key: null
        scenarioSteps:
          key: null
        sharedStepAttachments:
          key: ""
    ScenarioStepCreatedResponseDto:
      type: object
      properties:
        createdStepId:
          type: integer
          format: int64
        scenario:
          $ref: '#/components/schemas/NormalizedScenarioDto'
      description: ""
      example:
        scenario:
          sharedStepScenarioSteps:
            key: null
          attachments:
            key: ""
          root:
            sharedStepId: 5
            archived: true
            createdDate: 7
            expectedResult: expectedResult
            children:
            - 2
            - 2
            lastModifiedDate: 9
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            id: 6
            attachmentId: 5
            body: body
            testCaseId: 1
          sharedSteps:
            key: null
          scenarioSteps:
            key: null
          sharedStepAttachments:
            key: ""
        createdStepId: 0
    ScenarioStepDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        testCaseId:
          type: integer
          format: int64
        body:
          type: string
        expectedResult:
          type: string
        attachmentId:
          type: integer
          format: int64
        sharedStepId:
          type: integer
          format: int64
        archived:
          type: boolean
        children:
          type: array
          items:
            type: integer
            format: int64
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        sharedStepId: 5
        archived: true
        createdDate: 7
        expectedResult: expectedResult
        children:
        - 2
        - 2
        lastModifiedDate: 9
        createdBy: createdBy
        lastModifiedBy: lastModifiedBy
        id: 6
        attachmentId: 5
        body: body
        testCaseId: 1
    ScenarioStepMoveDto:
      type: object
      properties:
        parentId:
          type: integer
          format: int64
        beforeId:
          type: integer
          format: int64
        afterId:
          type: integer
          format: int64
      description: ""
    ScenarioStepCopyDto:
      type: object
      properties:
        parentId:
          type: integer
          format: int64
        beforeId:
          type: integer
          format: int64
        afterId:
          type: integer
          format: int64
      description: ""
    CustomFieldImportFieldMapping:
      required:
      - customFieldId
      - field
      type: object
      properties:
        itemsSeparator:
          type: string
        regex:
          type: boolean
        customFieldId:
          type: integer
          format: int64
      description: ""
      allOf:
      - $ref: '#/components/schemas/TestCaseImportMapping'
    IssueImportFieldMapping:
      required:
      - field
      - integrationId
      type: object
      properties:
        itemsSeparator:
          type: string
        regex:
          type: boolean
        integrationId:
          type: integer
          format: int64
      description: ""
      allOf:
      - $ref: '#/components/schemas/TestCaseImportMapping'
    LinkImportFieldMapping:
      required:
      - field
      type: object
      properties:
        itemsSeparator:
          type: string
        regex:
          type: boolean
        type:
          type: string
        name:
          type: string
      description: ""
      allOf:
      - $ref: '#/components/schemas/TestCaseImportMapping'
    MultiValueImportFieldMapping:
      required:
      - field
      type: object
      properties:
        itemsSeparator:
          type: string
        regex:
          type: boolean
      description: ""
      allOf:
      - $ref: '#/components/schemas/TestCaseImportMapping'
    RoleImportFieldMapping:
      required:
      - field
      - roleId
      type: object
      properties:
        itemsSeparator:
          type: string
        regex:
          type: boolean
        roleId:
          type: integer
          format: int64
      description: ""
      allOf:
      - $ref: '#/components/schemas/TestCaseImportMapping'
    TagImportFieldMapping:
      required:
      - field
      type: object
      properties:
        itemsSeparator:
          type: string
        regex:
          type: boolean
        prefix:
          type: string
      description: ""
      allOf:
      - $ref: '#/components/schemas/TestCaseImportMapping'
    TestCaseCsvImportOptions:
      type: object
      properties:
        withHeaders:
          type: boolean
        autoDetectFormat:
          type: boolean
        columnSeparator:
          type: string
        escapeChar:
          type: string
        quoteChar:
          type: string
        workflowId:
          type: integer
          format: int64
        statusId:
          type: integer
          format: int64
        layerId:
          type: integer
          format: int64
        mapping:
          type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/TestCaseImportMapping'
            - $ref: '#/components/schemas/CustomFieldImportFieldMapping'
            - $ref: '#/components/schemas/IssueImportFieldMapping'
            - $ref: '#/components/schemas/LinkImportFieldMapping'
            - $ref: '#/components/schemas/MultiValueImportFieldMapping'
            - $ref: '#/components/schemas/RoleImportFieldMapping'
            - $ref: '#/components/schemas/TagImportFieldMapping'
            - $ref: '#/components/schemas/TestKeyImportFieldMapping'
      description: ""
    TestCaseImportField:
      type: string
      description: ""
      enum:
      - skip
      - allure_id
      - name
      - full_name
      - description
      - precondition
      - expected_result
      - scenario
      - custom_field
      - role
      - parameter
      - tag
      - issue
      - test_key
      - link
    TestCaseImportMapping:
      required:
      - field
      type: object
      properties:
        field:
          $ref: '#/components/schemas/TestCaseImportField'
      discriminator:
        propertyName: Field
    TestKeyImportFieldMapping:
      required:
      - field
      - integrationId
      type: object
      properties:
        itemsSeparator:
          type: string
        regex:
          type: boolean
        integrationId:
          type: integer
          format: int64
      description: ""
      allOf:
      - $ref: '#/components/schemas/TestCaseImportMapping'
    TestCaseCsvPreviewOptions:
      type: object
      properties:
        withHeaders:
          type: boolean
        autoDetectFormat:
          type: boolean
        columnSeparator:
          type: string
        escapeChar:
          type: string
        quoteChar:
          type: string
        workflowId:
          type: integer
          format: int64
        statusId:
          type: integer
          format: int64
        layerId:
          type: integer
          format: int64
        mapping:
          type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/TestCaseImportMapping'
            - $ref: '#/components/schemas/CustomFieldImportFieldMapping'
            - $ref: '#/components/schemas/IssueImportFieldMapping'
            - $ref: '#/components/schemas/LinkImportFieldMapping'
            - $ref: '#/components/schemas/MultiValueImportFieldMapping'
            - $ref: '#/components/schemas/RoleImportFieldMapping'
            - $ref: '#/components/schemas/TagImportFieldMapping'
            - $ref: '#/components/schemas/TestKeyImportFieldMapping'
        rowNum:
          type: integer
          format: int32
      description: ""
    TestCaseOverviewDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        projectId:
          type: integer
          format: int64
        name:
          type: string
        fullName:
          type: string
        description:
          type: string
        descriptionHtml:
          type: string
        precondition:
          type: string
        preconditionHtml:
          type: string
        expectedResult:
          type: string
        expectedResultHtml:
          type: string
        hash:
          type: string
        deleted:
          type: boolean
        editable:
          type: boolean
        automated:
          type: boolean
        external:
          type: boolean
        hasManualScenario:
          type: boolean
        style:
          $ref: '#/components/schemas/TestCaseStyle'
        scenario:
          $ref: '#/components/schemas/TestCaseScenarioDto'
        status:
          $ref: '#/components/schemas/StatusDto'
        workflow:
          $ref: '#/components/schemas/WorkflowDto'
        layer:
          $ref: '#/components/schemas/TestLayerDto'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TestTagDto'
        links:
          type: array
          items:
            $ref: '#/components/schemas/ExternalLinkDto'
        issues:
          type: array
          items:
            $ref: '#/components/schemas/IssueDto'
        testKeys:
          type: array
          items:
            $ref: '#/components/schemas/TestKeyDto'
        customFields:
          type: array
          items:
            $ref: '#/components/schemas/CustomFieldValueDto'
        members:
          type: array
          items:
            $ref: '#/components/schemas/MemberDto'
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/TestCaseParameterDto'
        examples:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/TestCaseExampleDto'
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        customFields:
        - name: name
          id: 0
          customField:
            createdDate: 7
            lastModifiedDate: 9
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 2
        - name: name
          id: 0
          customField:
            createdDate: 7
            lastModifiedDate: 9
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 2
        testKeys:
        - name: name
          integrationId: 6
          id: 0
          url: url
        - name: name
          integrationId: 6
          id: 0
          url: url
        description: description
        issues:
        - summary: summary
          name: name
          integrationId: 6
          closed: true
          id: 0
          url: url
          status: status
        - summary: summary
          name: name
          integrationId: 6
          closed: true
          id: 0
          url: url
          status: status
        layer:
          createdDate: 7
          lastModifiedDate: 1
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          id: 4
        hasManualScenario: true
        scenario:
          attachments:
          - missed: true
          - missed: true
          testResultId: 0
          steps:
          - attachments:
            - null
            - null
            expectedResult: expectedResult
            hasContent: true
            name: name
            stepsCount: 6
            keyword: keyword
            leaf: true
            steps:
            - null
            - null
          - attachments:
            - null
            - null
            expectedResult: expectedResult
            hasContent: true
            name: name
            stepsCount: 6
            keyword: keyword
            leaf: true
            steps:
            - null
            - null
        expectedResultHtml: expectedResultHtml
        members:
        - role:
            createdDate: 1
            lastModifiedDate: 5
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 6
          name: name
          id: 0
        - role:
            createdDate: 1
            lastModifiedDate: 5
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 6
          name: name
          id: 0
        links:
        - name: name
          type: type
          url: url
        - name: name
          type: type
          url: url
        id: 0
        workflow:
          createdDate: 1
          lastModifiedDate: 1
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          statuses:
          - createdDate: 4
            color: color
            lastModifiedDate: 7
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 2
          - createdDate: 4
            color: color
            lastModifiedDate: 7
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 2
          id: 3
        lastModifiedDate: 5
        editable: true
        lastModifiedBy: lastModifiedBy
        fullName: fullName
        precondition: precondition
        tags:
        - name: name
          id: 6
        - name: name
          id: 6
        automated: true
        external: true
        preconditionHtml: preconditionHtml
        deleted: true
        createdDate: 1
        examples:
        - id: 5
          parameters:
          - name: name
            value: value
          - name: name
            value: value
          status: failed
        - id: 5
          parameters:
          - name: name
            value: value
          - name: name
            value: value
          status: failed
        expectedResult: expectedResult
        createdBy: createdBy
        name: name
        descriptionHtml: descriptionHtml
        style: regular
        projectId: 6
        parameters:
        - name: name
        - name: name
        hash: hash
        status:
          createdDate: 4
          color: color
          lastModifiedDate: 7
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          id: 2
    TestCaseParameterDto:
      type: object
      properties:
        name:
          type: string
      description: ""
      example:
        name: name
    TestCaseStyle:
      type: string
      description: ""
      enum:
      - regular
      - checklist
    CsvImportOptions:
      type: object
      properties:
        withHeaders:
          type: boolean
        autoDetectFormat:
          type: boolean
        columnSeparator:
          type: string
        escapeChar:
          type: string
        quoteChar:
          type: string
      description: ""
    ImportRequestInfoDto:
      type: object
      properties:
        recordsCount:
          type: integer
          format: int64
        headers:
          type: array
          items:
            $ref: '#/components/schemas/OrderedValueDtoString'
        values:
          type: array
          items:
            $ref: '#/components/schemas/OrderedValueDtoString'
      description: ""
      example:
        headers:
        - value: value
          order: 6
        - value: value
          order: 6
        recordsCount: 0
        values:
        - null
        - null
    OrderedValueDtoString:
      type: object
      properties:
        order:
          type: integer
          format: int32
        value:
          type: string
      description: ""
      example:
        value: value
        order: 6
    TestCaseParameterValues:
      type: object
      properties:
        name:
          type: string
        values:
          type: array
          items:
            type: string
      description: ""
    TestCaseBulkTestPlanCreateDto:
      required:
      - selection
      - testPlanName
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/TestCaseTreeSelectionDto'
        testPlanName:
          maxLength: 255
          minLength: 1
          type: string
        tree:
          $ref: '#/components/schemas/IdAndNameOnlyDto'
      description: ""
    TestCaseBulkEntityIdsDto:
      required:
      - ids
      - selection
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/TestCaseTreeSelectionDto'
        ids:
          type: array
          items:
            type: integer
            format: int64
      description: ""
    TestCaseBulkTagDto:
      required:
      - selection
      - tags
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/TestCaseTreeSelectionDto'
        tags:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/TestTagDto'
      description: ""
    TestCaseSyncFromTo:
      required:
      - from
      - to
      type: object
      properties:
        from:
          type: integer
          format: int64
        to:
          type: integer
          format: int64
      description: ""
    TestCaseSyncRqDto:
      required:
      - mapping
      type: object
      properties:
        mapping:
          type: array
          items:
            $ref: '#/components/schemas/TestCaseSyncFromTo'
        workflowId:
          type: integer
          format: int64
        statusId:
          type: integer
          format: int64
        nameSuffix:
          type: string
        ignoreAttachments:
          type: boolean
        ignoreCfv:
          type: boolean
        ignoreIssueLinks:
          type: boolean
        ignoreLinks:
          type: boolean
        ignoreMembers:
          type: boolean
        ignoreParameters:
          type: boolean
        ignoreScenario:
          type: boolean
        ignoreTags:
          type: boolean
        ignoreTestKeys:
          type: boolean
      description: ""
    TestCaseBulkStatusDto:
      required:
      - selection
      - statusId
      - workflowId
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/TestCaseTreeSelectionDto'
        workflowId:
          type: integer
          format: int64
        statusId:
          type: integer
          format: int64
      description: ""
    TestCaseBulkRunNewLaunchDto:
      required:
      - launchName
      - selection
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/TestCaseTreeSelectionDto'
        launchName:
          maxLength: 255
          minLength: 1
          type: string
        tags:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/LaunchTagDto'
        links:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ExternalLinkDto'
        issues:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/IssueDto'
        envVarValueSets:
          type: array
          items:
            $ref: '#/components/schemas/EnvironmentSetDto'
        jobsMapping:
          type: array
          items:
            $ref: '#/components/schemas/JobMapping'
        jobsParams:
          type: array
          items:
            $ref: '#/components/schemas/JobParameterDto'
        assignees:
          uniqueItems: true
          type: array
          items:
            type: string
      description: ""
    TestCaseBulkRunExistingLaunchDto:
      required:
      - launchId
      - selection
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/TestCaseTreeSelectionDto'
        launchId:
          type: integer
          format: int64
        envVarValueSets:
          type: array
          items:
            $ref: '#/components/schemas/EnvironmentSetDto'
        jobsMapping:
          type: array
          items:
            $ref: '#/components/schemas/JobMapping'
        jobsParams:
          type: array
          items:
            $ref: '#/components/schemas/JobParameterDto'
        assignees:
          uniqueItems: true
          type: array
          items:
            type: string
      description: ""
    TestCaseBulkDto:
      required:
      - selection
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/TestCaseTreeSelectionDto'
      description: ""
    MuteDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        testCaseId:
          type: integer
          format: int64
        name:
          type: string
        reason:
          type: string
        reasonHtml:
          type: string
        issues:
          type: array
          items:
            $ref: '#/components/schemas/IssueDto'
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        reason: reason
        reasonHtml: reasonHtml
        createdDate: 2
        lastModifiedDate: 7
        createdBy: createdBy
        lastModifiedBy: lastModifiedBy
        name: name
        id: 5
        issues:
        - summary: summary
          name: name
          integrationId: 6
          closed: true
          id: 0
          url: url
          status: status
        - summary: summary
          name: name
          integrationId: 6
          closed: true
          id: 0
          url: url
          status: status
        testCaseId: 5
    TestCaseBulkMuteDto:
      required:
      - mute
      - selection
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/TestCaseTreeSelectionDto'
        mute:
          $ref: '#/components/schemas/MuteDto'
      description: ""
    TestCaseBulkProjectChangeDto:
      required:
      - selection
      - toProjectId
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/TestCaseTreeSelectionDto'
        toProjectId:
          type: integer
          format: int64
      description: ""
    TestCaseBulkMemberDto:
      required:
      - members
      - selection
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/TestCaseTreeSelectionDto'
        members:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/MemberDto'
      description: ""
    TestCaseBulkLayerDto:
      required:
      - selection
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/TestCaseTreeSelectionDto'
        layerId:
          type: integer
          format: int64
      description: ""
    TestCaseBulkIssueDto:
      required:
      - issues
      - selection
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/TestCaseTreeSelectionDto'
        issues:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/IssueDto'
      description: ""
    TestCaseBulkExternalLinkDto:
      required:
      - links
      - selection
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/TestCaseTreeSelectionDto'
        links:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ExternalLinkDto'
      description: ""
    TestCaseBulkCloneDto:
      required:
      - selection
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/TestCaseTreeSelectionDto'
        toProjectId:
          type: integer
          format: int64
        statusId:
          type: integer
          format: int64
        workflowId:
          type: integer
          format: int64
        nameSuffix:
          type: string
        ignoreAttachments:
          type: boolean
        ignoreCfv:
          type: boolean
        ignoreIssueLinks:
          type: boolean
        ignoreLinks:
          type: boolean
        ignoreMembers:
          type: boolean
        ignoreParameters:
          type: boolean
        ignoreRelations:
          type: boolean
        ignoreScenario:
          type: boolean
        ignoreTags:
          type: boolean
        ignoreTestKeys:
          type: boolean
      description: ""
    TestCaseBulkCfvDto:
      required:
      - cfv
      - selection
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/TestCaseTreeSelectionDto'
        cfv:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/CustomFieldValueDto'
      description: ""
    TestTagCreateDto:
      required:
      - name
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 1
          type: string
      description: ""
    StatusCreateDto:
      required:
      - color
      - name
      type: object
      properties:
        name:
          type: string
        color:
          type: string
      description: ""
    SharedStepCreateDto:
      required:
      - name
      - projectId
      type: object
      properties:
        projectId:
          type: integer
          format: int64
        name:
          type: string
      description: ""
    SharedStepDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        projectId:
          type: integer
          format: int64
        name:
          type: string
        archived:
          type: boolean
        stepsCount:
          type: integer
          format: int64
        attachmentsCount:
          type: integer
          format: int64
        testCasesCount:
          type: integer
          format: int64
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        archived: true
        attachmentsCount: 7
        createdDate: 3
        lastModifiedDate: 2
        createdBy: createdBy
        lastModifiedBy: lastModifiedBy
        name: name
        stepsCount: 2
        testCasesCount: 9
        id: 5
        projectId: 5
    RoleSchemaCreateDto:
      type: object
      properties:
        projectId:
          type: integer
          format: int64
        key:
          type: string
        roleId:
          type: integer
          format: int64
      description: ""
    RoleSchemaDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        projectId:
          type: integer
          format: int64
        key:
          type: string
        role:
          $ref: '#/components/schemas/RoleDto'
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        role:
          createdDate: 1
          lastModifiedDate: 5
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          id: 6
        createdDate: 2
        lastModifiedDate: 7
        createdBy: createdBy
        lastModifiedBy: lastModifiedBy
        id: 5
        projectId: 5
        key: key
    RoleCreateDto:
      required:
      - name
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 1
          type: string
      description: ""
    ProjectPropertyCreateDto:
      required:
      - name
      - projectId
      - value
      type: object
      properties:
        projectId:
          type: integer
          format: int64
        name:
          maxLength: 255
          minLength: 1
          type: string
        value:
          maxLength: 255
          minLength: 1
          type: string
      description: ""
    ProjectPropertyDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        projectId:
          type: integer
          format: int64
        name:
          type: string
        value:
          type: string
      description: ""
      example:
        name: name
        id: 0
        projectId: 6
        value: value
    ProjectCreateDto:
      required:
      - name
      type: object
      properties:
        name:
          type: string
        abbr:
          type: string
        isPublic:
          type: boolean
        favorite:
          type: boolean
        description:
          type: string
      description: ""
    ProjectDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        abbr:
          type: string
        isPublic:
          type: boolean
        favorite:
          type: boolean
        description:
          type: string
        descriptionHtml:
          type: string
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        createdDate: 5
        lastModifiedDate: 2
        createdBy: createdBy
        lastModifiedBy: lastModifiedBy
        name: name
        isPublic: true
        description: description
        descriptionHtml: descriptionHtml
        id: 5
        abbr: abbr
        favorite: true
    ProjectCategoryMatcherAddDto:
      required:
      - matcherId
      type: object
      properties:
        matcherId:
          type: integer
          format: int64
      description: ""
    CategoryMatcherDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        projectId:
          type: integer
          format: int64
        name:
          type: string
        category:
          $ref: '#/components/schemas/CategoryDto'
        messageRegex:
          type: string
        traceRegex:
          type: string
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        createdDate: 2
        lastModifiedDate: 7
        createdBy: createdBy
        lastModifiedBy: lastModifiedBy
        name: name
        messageRegex: messageRegex
        traceRegex: traceRegex
        id: 5
        category:
          createdDate: 6
          color: color
          lastModifiedDate: 7
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          description: description
          id: 1
          projectId: 1
        projectId: 5
    ProjectCategoryMatcherRemoveDto:
      required:
      - matcherId
      type: object
      properties:
        matcherId:
          type: integer
          format: int64
      description: ""
    ProjectCategoryAddDto:
      required:
      - categoryId
      type: object
      properties:
        categoryId:
          type: integer
          format: int64
      description: ""
    ProjectCategoryRemoveDto:
      required:
      - categoryId
      type: object
      properties:
        categoryId:
          type: integer
          format: int64
      description: ""
    ProjectAccessGroupAddDto:
      required:
      - groups
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/ProjectGroupAccessAddDto'
      description: ""
    ProjectGroupAccessAddDto:
      required:
      - groupId
      - permissionSetId
      type: object
      properties:
        groupId:
          type: integer
          format: int64
        permissionSetId:
          type: integer
          format: int64
      description: ""
    AccessGroupDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        users:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/AccessGroupUserDto'
        usersCount:
          type: integer
          format: int64
        projectsCount:
          type: integer
          format: int64
      description: ""
      example:
        name: name
        usersCount: 5
        id: 5
        projectsCount: 2
        users:
        - username: username
        - username: username
    AccessGroupUserDto:
      type: object
      properties:
        username:
          type: string
      description: ""
      example:
        username: username
    ProjectGroupAccessDto:
      required:
      - group
      - permissionSetId
      type: object
      properties:
        group:
          $ref: '#/components/schemas/AccessGroupDto'
        permissionSetId:
          type: integer
          format: int64
        permissionSetName:
          type: string
      description: ""
      example:
        permissionSetName: permissionSetName
        permissionSetId: 7
        group:
          name: name
          usersCount: 5
          id: 5
          projectsCount: 2
          users:
          - username: username
          - username: username
    ProjectAccessCollaboratorAddDto:
      required:
      - collaborators
      type: object
      properties:
        collaborators:
          type: array
          items:
            $ref: '#/components/schemas/ProjectCollaboratorAccessDto'
      description: ""
    ProjectCollaboratorAccessDto:
      required:
      - permissionSetId
      - username
      type: object
      properties:
        permissionSetId:
          type: integer
          format: int64
        permissionSetName:
          type: string
        projectGroups:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ProjectGroupAccessDto'
        username:
          type: string
      description: ""
      example:
        permissionSetName: permissionSetName
        permissionSetId: 5
        projectGroups:
        - permissionSetName: permissionSetName
          permissionSetId: 7
          group:
            name: name
            usersCount: 5
            id: 5
            projectsCount: 2
            users:
            - username: username
            - username: username
        - permissionSetName: permissionSetName
          permissionSetId: 7
          group:
            name: name
            usersCount: 5
            id: 5
            projectsCount: 2
            users:
            - username: username
            - username: username
        username: username
    PermissionDto:
      type: string
      description: ""
      enum:
      - project:configure
      - project:write
      - project:comment
      - project:read
    PermissionSetCreateDto:
      required:
      - name
      - permissions
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 0
          type: string
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/PermissionDto'
      description: ""
    PermissionSetDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/PermissionDto'
      description: ""
      example:
        permissions:
        - project:configure
        - project:configure
        name: name
        id: 5
    MuteCreateDto:
      type: object
      properties:
        testCaseId:
          type: integer
          format: int64
        name:
          type: string
        reason:
          type: string
        issues:
          type: array
          items:
            $ref: '#/components/schemas/IssueDto'
      description: ""
    MemberCreateDto:
      required:
      - name
      - role
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 1
          type: string
        role:
          $ref: '#/components/schemas/IdOnlyDto'
      description: ""
    LaunchCreateDto:
      required:
      - name
      - projectId
      type: object
      properties:
        projectId:
          type: integer
          format: int64
        name:
          type: string
        external:
          type: boolean
        autoclose:
          type: boolean
        tags:
          type: array
          items:
            $ref: '#/components/schemas/LaunchTagDto'
        links:
          type: array
          items:
            $ref: '#/components/schemas/ExternalLinkDto'
        issues:
          type: array
          items:
            $ref: '#/components/schemas/IssueDto'
      description: ""
    LaunchExistingUploadDto:
      type: object
      properties:
        envVarValues:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/EnvVarValueDto'
      description: ""
    LaunchUploadResponseDto:
      type: object
      properties:
        launchId:
          type: integer
          format: int64
        testSessionId:
          type: integer
          format: int64
        filesCount:
          type: integer
          format: int32
      description: ""
      example:
        launchId: 0
        filesCount: 1
        testSessionId: 6
    LaunchTestPlanAddDto:
      type: object
      properties:
        testPlanId:
          type: integer
          format: int64
        envVarValueSets:
          type: array
          items:
            $ref: '#/components/schemas/EnvironmentSetDto'
      description: ""
    LaunchTestCasesAddDto:
      required:
      - selection
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/TestCaseTreeSelectionDto'
        envVarValueSets:
          type: array
          items:
            $ref: '#/components/schemas/EnvironmentSetDto'
        jobsMapping:
          type: array
          items:
            $ref: '#/components/schemas/JobMapping'
        jobsParams:
          type: array
          items:
            $ref: '#/components/schemas/JobParameterDto'
        assignees:
          uniqueItems: true
          type: array
          items:
            type: string
      description: ""
    LaunchCopyRqDto:
      type: object
      properties:
        launchName:
          type: string
        tags:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/LaunchTagDto'
        links:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ExternalLinkDto'
        issues:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/IssueDto'
        envVarValueSets:
          type: array
          items:
            $ref: '#/components/schemas/EnvironmentSetDto'
        assignees:
          uniqueItems: true
          type: array
          items:
            type: string
      description: ""
    LaunchCreateAndUploadDto:
      required:
      - name
      - projectId
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 1
          type: string
        projectId:
          type: integer
          format: int64
        tags:
          type: array
          items:
            $ref: '#/components/schemas/LaunchTagDto'
        links:
          type: array
          items:
            $ref: '#/components/schemas/ExternalLinkDto'
        issues:
          type: array
          items:
            $ref: '#/components/schemas/IssueDto'
        envVarValues:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/EnvVarValueDto'
      description: ""
    LaunchTagCreateDto:
      required:
      - name
      type: object
      properties:
        name:
          type: string
      description: ""
    CreateLaunchEvent:
      required:
      - name
      - projectId
      type: object
      properties:
        projectId:
          type: integer
          format: int64
        name:
          type: string
        autoclose:
          type: boolean
        tags:
          type: array
          items:
            type: string
      description: ""
    LaunchMergeDto:
      required:
      - from
      - to
      type: object
      properties:
        from:
          type: integer
          format: int64
        to:
          type: integer
          format: int64
      description: ""
    JobRunUploadInfoDto:
      type: object
      properties:
        envVarValues:
          type: array
          items:
            $ref: '#/components/schemas/EnvVarValueDto'
      description: ""
    FileUploadResponseDto:
      type: object
      properties:
        filesCount:
          type: integer
          format: int32
      description: ""
      example:
        filesCount: 0
    JobRerunRequestDto:
      type: object
      properties:
        rql:
          type: string
      description: ""
    JobCreateDto:
      required:
      - integrationId
      - projectId
      type: object
      properties:
        projectId:
          type: integer
          format: int64
        integrationId:
          type: integer
          format: int64
        externalId:
          type: string
        canRun:
          type: boolean
      description: ""
    JobRunRequestDto:
      required:
      - launchName
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/TreeSelectionDto'
        launchName:
          maxLength: 255
          minLength: 1
          type: string
        tags:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/LaunchTagDto'
        links:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ExternalLinkDto'
        issues:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/IssueDto'
        envVarValueSets:
          type: array
          items:
            $ref: '#/components/schemas/EnvironmentSetDto'
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/JobParameterDto'
      description: ""
    IssueSchemaCreateDto:
      required:
      - integrationId
      - key
      - projectId
      type: object
      properties:
        projectId:
          type: integer
          format: int64
        key:
          maxLength: 255
          minLength: 1
          type: string
        integrationId:
          type: integer
          format: int64
      description: ""
    IssueSchemaDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        projectId:
          type: integer
          format: int64
        key:
          type: string
        integrationId:
          type: integer
          format: int64
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        createdDate: 7
        lastModifiedDate: 9
        createdBy: createdBy
        lastModifiedBy: lastModifiedBy
        integrationId: 2
        id: 5
        projectId: 5
        key: key
    IssueCreateDto:
      required:
      - integrationId
      - name
      type: object
      properties:
        integrationId:
          type: integer
          format: int64
        name:
          type: string
      description: ""
    IntegrationCreateDto:
      required:
      - settings
      - type
      type: object
      properties:
        name:
          type: string
        type:
          $ref: '#/components/schemas/IntegrationTypeDto'
        settings:
          $ref: '#/components/schemas/IntegrationSettingsDto'
        defaultProjectSettings:
          $ref: '#/components/schemas/IntegrationSettingsDto'
        defaultSecret:
          $ref: '#/components/schemas/IntegrationSettingsDto'
        enabledByDefault:
          type: boolean
      description: ""
    IntegrationSettingsDto:
      type: object
      description: ""
    IntegrationDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        info:
          $ref: '#/components/schemas/IntegrationInfoDto'
        projectsCount:
          type: integer
          format: int32
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        createdDate: 2
        lastModifiedDate: 7
        createdBy: createdBy
        lastModifiedBy: lastModifiedBy
        name: name
        id: 5
        projectsCount: 5
        info:
          operations:
          - issue_create
          - issue_create
          name: name
          description: description
          routines:
          - endpoint
          - endpoint
          type: allure_testops
    IntegrationInfoDto:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        type:
          $ref: '#/components/schemas/IntegrationTypeDto'
        operations:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationOperationTypeDto'
        routines:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationRoutineTypeDto'
      description: ""
      example:
        operations:
        - issue_create
        - issue_create
        name: name
        description: description
        routines:
        - endpoint
        - endpoint
        type: allure_testops
    IntegrationOperationTypeDto:
      type: string
      description: ""
      enum:
      - issue_create
      - issue_export_launch
      - issue_suggest
      - issue_sync
      - job_run
      - job_suggest
      - job_sync
      - tms_sync
      - test_key_suggest
      - test_key_sync
    IntegrationRoutineTypeDto:
      type: string
      description: ""
      enum:
      - endpoint
      - issue_url
      - test_key_url
      - webhook
    IntegrationWebhookCreateDto:
      required:
      - integrationId
      type: object
      properties:
        integrationId:
          type: integer
          format: int64
      description: ""
    IntegrationWebhookTokenDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstEight:
          type: string
        token:
          type: string
        disabled:
          type: boolean
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        createdDate: 6
        lastModifiedDate: 1
        createdBy: createdBy
        lastModifiedBy: lastModifiedBy
        firstEight: firstEight
        disabled: true
        id: 0
        token: token
    IntegrationValidateDto:
      required:
      - type
      type: object
      properties:
        type:
          $ref: '#/components/schemas/IntegrationTypeDto'
        settings:
          $ref: '#/components/schemas/IntegrationSettingsDto'
        defaultProjectSettings:
          $ref: '#/components/schemas/IntegrationSettingsDto'
        defaultSecret:
          $ref: '#/components/schemas/IntegrationSettingsDto'
      description: ""
    ProjectIntegrationCreateDto:
      required:
      - integrationId
      - projectId
      type: object
      properties:
        projectId:
          type: integer
          format: int64
        integrationId:
          type: integer
          format: int64
        settings:
          $ref: '#/components/schemas/IntegrationSettingsDto'
        secret:
          $ref: '#/components/schemas/IntegrationSettingsDto'
      description: ""
    ProjectIntegrationDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        projectId:
          type: integer
          format: int64
        name:
          type: string
        info:
          $ref: '#/components/schemas/IntegrationInfoDto'
        disabled:
          type: boolean
        settings:
          $ref: '#/components/schemas/IntegrationSettingsDto'
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        settings: {}
        createdDate: 1
        lastModifiedDate: 5
        createdBy: createdBy
        lastModifiedBy: lastModifiedBy
        name: name
        disabled: true
        id: 0
        projectId: 6
        info:
          operations:
          - issue_create
          - issue_create
          name: name
          description: description
          routines:
          - endpoint
          - endpoint
          type: allure_testops
    ProjectIntegrationValidateDto:
      required:
      - integrationId
      type: object
      properties:
        integrationId:
          type: integer
          format: int64
        settings:
          $ref: '#/components/schemas/IntegrationSettingsDto'
        secret:
          $ref: '#/components/schemas/IntegrationSettingsDto'
      description: ""
    IntegrationLinksFixedDto:
      type: object
      properties:
        fixedCount:
          type: integer
          format: int32
      description: ""
      example:
        fixedCount: 0
    IntegrationExportCreateDto:
      required:
      - integrationId
      - projectId
      type: object
      properties:
        integrationId:
          type: integer
          format: int64
        projectId:
          type: integer
          format: int64
        disabled:
          type: boolean
        disableTcCreate:
          type: boolean
        disableLaunchSync:
          type: boolean
        projectKey:
          type: string
        tcAql:
          type: string
        launchAql:
          type: string
        syncDelaySec:
          type: integer
          format: int64
        settings:
          $ref: '#/components/schemas/IntegrationSettingsDto'
      description: ""
    IntegrationExportDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        integrationId:
          type: integer
          format: int64
        projectId:
          type: integer
          format: int64
        disabled:
          type: boolean
        disableTcCreate:
          type: boolean
        disableLaunchSync:
          type: boolean
        projectKey:
          type: string
        tcAql:
          type: string
        launchAql:
          type: string
        syncDelaySec:
          type: integer
          format: int64
        settings:
          $ref: '#/components/schemas/IntegrationSettingsDto'
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        settings: {}
        syncDelaySec: 7
        disableTcCreate: true
        lastModifiedDate: 3
        lastModifiedBy: lastModifiedBy
        integrationId: 5
        launchAql: launchAql
        projectKey: projectKey
        createdDate: 9
        createdBy: createdBy
        disableLaunchSync: true
        disabled: true
        id: 5
        projectId: 2
        tcAql: tcAql
    ImportRequestTypeDto:
      type: string
      description: ""
      enum:
      - test_case_csv
    ImportRequestDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        projectId:
          type: integer
          format: int64
        type:
          $ref: '#/components/schemas/ImportRequestTypeDto'
        state:
          $ref: '#/components/schemas/ImportRequestStateDto'
        storageKey:
          type: string
        originalFileName:
          type: string
        contentType:
          type: string
        contentLength:
          type: integer
          format: int64
        errorMessage:
          type: string
        countImported:
          type: integer
          format: int64
        countFailed:
          type: integer
          format: int64
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        originalFileName: originalFileName
        countImported: 7
        lastModifiedDate: 2
        lastModifiedBy: lastModifiedBy
        errorMessage: errorMessage
        type: test_case_csv
        storageKey: storageKey
        countFailed: 9
        createdDate: 3
        createdBy: createdBy
        contentLength: 2
        id: 5
        state: stored
        projectId: 5
        contentType: contentType
    ImportRequestStateDto:
      type: string
      description: ""
      enum:
      - stored
      - processing
      - processed
      - error
    IframeBulkCreateTestCaseDto:
      required:
      - integrationId
      - issueKey
      - toCreate
      type: object
      properties:
        integrationId:
          type: integer
          format: int64
        issueKey:
          type: string
        toCreate:
          type: array
          items:
            $ref: '#/components/schemas/TestCaseCreateDto'
      description: ""
    IframeTestCaseWithIssueDto:
      required:
      - integrationId
      - issueKey
      - testCaseIds
      type: object
      properties:
        integrationId:
          type: integer
          format: int64
        issueKey:
          type: string
        testCaseIds:
          type: array
          items:
            type: integer
            format: int64
      description: ""
    IframeCreateTestCaseDto:
      required:
      - integrationId
      - issueKey
      - toCreate
      type: object
      properties:
        integrationId:
          type: integer
          format: int64
        issueKey:
          type: string
        toCreate:
          $ref: '#/components/schemas/TestCaseCreateDto'
      description: ""
    FilterCreateDto:
      type: object
      properties:
        projectId:
          type: integer
          format: int64
        name:
          type: string
        body:
          type: string
        base:
          type: boolean
        shared:
          type: boolean
      description: ""
    FilterDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        projectId:
          type: integer
          format: int64
        name:
          type: string
        body:
          type: string
        base:
          type: boolean
        shared:
          type: boolean
        editable:
          type: boolean
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        shared: true
        createdDate: 2
        lastModifiedDate: 7
        createdBy: createdBy
        editable: true
        lastModifiedBy: lastModifiedBy
        name: name
        id: 5
        body: body
        projectId: 5
        base: true
    FilterBaseSetDto:
      type: object
      properties:
        filterId:
          type: integer
          format: int64
      description: ""
    CustomFieldExportFieldMapping:
      required:
      - customFieldId
      - itemsSeparator
      type: object
      properties:
        field:
          type: object
        customFieldId:
          type: integer
          format: int64
        itemsSeparator:
          type: string
      description: ""
      allOf:
      - $ref: '#/components/schemas/ExportFieldMappingTestResultExportField'
    ExampleExportFieldMapping:
      type: object
      properties:
        field:
          type: object
        nameValueSeparator:
          type: string
        paramsSeparator:
          type: string
        examplesSeparator:
          type: string
      description: ""
      allOf:
      - $ref: '#/components/schemas/ExportFieldMappingTestResultExportField'
    ExportFieldMappingTestResultExportField:
      type: object
      properties:
        name:
          type: string
        field:
          $ref: '#/components/schemas/TestResultExportField'
      discriminator:
        propertyName: Field
    LinkExportFieldMapping:
      required:
      - itemsSeparator
      type: object
      properties:
        field:
          type: object
        itemsSeparator:
          type: string
      description: ""
      allOf:
      - $ref: '#/components/schemas/ExportFieldMappingTestResultExportField'
    MultiValueExportFieldMapping:
      type: object
      properties:
        field:
          type: object
        itemsSeparator:
          type: string
      description: ""
      allOf:
      - $ref: '#/components/schemas/ExportFieldMappingTestResultExportField'
    RoleExportFieldMapping:
      required:
      - itemsSeparator
      - roleId
      type: object
      properties:
        field:
          type: object
        roleId:
          type: integer
          format: int64
        itemsSeparator:
          type: string
      description: ""
      allOf:
      - $ref: '#/components/schemas/ExportFieldMappingTestResultExportField'
    ScenarioExportFieldMapping:
      required:
      - stepsSeparator
      type: object
      properties:
        field:
          type: object
        stepsSeparator:
          type: string
        stepsIndent:
          type: string
      description: ""
      allOf:
      - $ref: '#/components/schemas/ExportFieldMappingTestResultExportField'
    TestResultCsvExportOptions:
      type: object
      properties:
        name:
          type: string
        withHeaders:
          type: boolean
        columnSeparator:
          type: string
        selection:
          $ref: '#/components/schemas/TestResultTreeSelectionDto'
        mapping:
          type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/ExportFieldMappingTestResultExportField'
            - $ref: '#/components/schemas/CustomFieldExportFieldMapping'
            - $ref: '#/components/schemas/ExampleExportFieldMapping'
            - $ref: '#/components/schemas/LinkExportFieldMapping'
            - $ref: '#/components/schemas/MultiValueExportFieldMapping'
            - $ref: '#/components/schemas/RoleExportFieldMapping'
            - $ref: '#/components/schemas/ScenarioExportFieldMapping'
      description: ""
    TestResultExportField:
      type: string
      description: ""
      enum:
      - allure_id
      - name
      - full_name
      - description
      - status
      - start
      - stop
      - duration
      - precondition
      - expected_result
      - message
      - test_case_id
      - test_case_status
      - layer
      - issues
      - scenario
      - role
      - custom_field
      - tag
      - link
      - parameter
      - executor
    ExportRequestDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        projectId:
          type: integer
          format: int64
        type:
          $ref: '#/components/schemas/ExportType'
        status:
          $ref: '#/components/schemas/ExportStatus'
        storageKey:
          type: string
        name:
          type: string
        shared:
          type: boolean
        errorMessage:
          type: string
        description:
          type: string
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        shared: true
        lastModifiedDate: 5
        lastModifiedBy: lastModifiedBy
        errorMessage: errorMessage
        description: description
        type: LAUNCH_PDF
        storageKey: storageKey
        createdDate: 1
        createdBy: createdBy
        name: name
        id: 0
        projectId: 6
        status: queued
    ExportStatus:
      type: string
      description: ""
      enum:
      - queued
      - failed
      - ready
    ExportType:
      type: string
      description: ""
      enum:
      - LAUNCH_PDF
      - TEST_CASE_CSV
      - TEST_RESULT_CSV
      - TEST_CASE_PDF
    TestCasePdfOptions:
      required:
      - name
      - selection
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/TestCaseTreeSelectionDto'
        name:
          type: string
        timeZone:
          type: string
        dateFormat:
          type: string
        lang:
          type: string
        country:
          type: string
        structure:
          type: array
          items:
            $ref: '#/components/schemas/TestCasePdfPart'
      description: ""
    TestCasePdfPart:
      type: string
      description: ""
      enum:
      - header
      - title
      - details
      - footer
    ExportFieldMappingTestCaseExportField:
      type: object
      properties:
        name:
          type: string
        field:
          $ref: '#/components/schemas/TestCaseExportField'
      discriminator:
        propertyName: Field
    TestCaseCsvExportOptions:
      type: object
      properties:
        name:
          type: string
        withHeaders:
          type: boolean
        columnSeparator:
          type: string
        selection:
          $ref: '#/components/schemas/TestCaseTreeSelectionDto'
        mapping:
          type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/ExportFieldMappingTestCaseExportField'
            - $ref: '#/components/schemas/CustomFieldExportFieldMapping'
            - $ref: '#/components/schemas/ExampleExportFieldMapping'
            - $ref: '#/components/schemas/LinkExportFieldMapping'
            - $ref: '#/components/schemas/MultiValueExportFieldMapping'
            - $ref: '#/components/schemas/RoleExportFieldMapping'
            - $ref: '#/components/schemas/ScenarioExportFieldMapping'
      description: ""
    TestCaseExportField:
      type: string
      description: ""
      enum:
      - allure_id
      - name
      - full_name
      - automated
      - description
      - precondition
      - expected_result
      - status
      - scenario
      - issue
      - tag
      - link
      - custom_field
      - role
      - example
      - parameter
    LaunchPdfOptions:
      required:
      - launchId
      type: object
      properties:
        launchId:
          type: integer
          format: int64
        name:
          type: string
        timeZone:
          type: string
        dateFormat:
          type: string
        lang:
          type: string
        country:
          type: string
        skipScenario:
          type: boolean
        structure:
          type: array
          items:
            $ref: '#/components/schemas/LaunchPdfPart'
      description: ""
    LaunchPdfPart:
      type: string
      description: ""
      enum:
      - header
      - title
      - statistic
      - summary
      - trByStatuses
      - details
      - tcDetails
      - footer
    EnvVarValueCreateDto:
      required:
      - name
      - variable
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 1
          type: string
        variable:
          $ref: '#/components/schemas/IdOnlyDto'
      description: ""
    EnvVarSchemaCreateDto:
      required:
      - envVarId
      - key
      - projectId
      type: object
      properties:
        projectId:
          type: integer
          format: int64
        key:
          maxLength: 255
          minLength: 1
          type: string
        envVarId:
          type: integer
          format: int64
      description: ""
    EnvVarSchemaDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        projectId:
          type: integer
          format: int64
        key:
          type: string
        envVar:
          $ref: '#/components/schemas/EnvVarDto'
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        createdDate: 2
        envVar:
          createdDate: 1
          lastModifiedDate: 5
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          id: 6
        lastModifiedDate: 7
        createdBy: createdBy
        lastModifiedBy: lastModifiedBy
        id: 5
        projectId: 5
        key: key
    EnvVarMergeDto:
      type: object
      properties:
        from:
          type: integer
          format: int64
        to:
          type: integer
          format: int64
      description: ""
    EnvVarCreateDto:
      required:
      - name
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 1
          type: string
      description: ""
    DefectCreateDto:
      required:
      - name
      - projectId
      type: object
      properties:
        projectId:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        issue:
          $ref: '#/components/schemas/IssueToCreateDto'
        linkIssue:
          $ref: '#/components/schemas/DefectIssueLinkDto'
        matcher:
          $ref: '#/components/schemas/Matcher'
      description: ""
    Matcher:
      required:
      - name
      type: object
      properties:
        name:
          type: string
        messageRegex:
          type: string
        traceRegex:
          type: string
      description: ""
    DefectOverviewDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        projectId:
          type: integer
          format: int64
        name:
          type: string
        closed:
          type: boolean
        description:
          type: string
        descriptionHtml:
          type: string
        lastFoundDate:
          type: integer
          format: int64
        lastFoundLaunch:
          $ref: '#/components/schemas/IdAndNameOnlyDto'
        foundAtLaunch:
          $ref: '#/components/schemas/IdAndNameOnlyDto'
        issue:
          $ref: '#/components/schemas/IssueDto'
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        foundAtLaunch: null
        issue:
          summary: summary
          name: name
          integrationId: 6
          closed: true
          id: 0
          url: url
          status: status
        lastModifiedDate: 5
        lastModifiedBy: lastModifiedBy
        description: description
        createdDate: 5
        lastFoundLaunch:
          name: name
          id: 6
        createdBy: createdBy
        name: name
        lastFoundDate: 1
        closed: true
        descriptionHtml: descriptionHtml
        id: 0
        projectId: 6
    DefectMatcherCreateDto:
      required:
      - defectId
      - name
      type: object
      properties:
        defectId:
          type: integer
          format: int64
        name:
          type: string
        messageRegex:
          type: string
        traceRegex:
          type: string
      description: ""
    DefectMatcherDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        defectId:
          type: integer
          format: int64
        name:
          type: string
        messageRegex:
          type: string
        traceRegex:
          type: string
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        createdDate: 1
        lastModifiedDate: 5
        createdBy: createdBy
        lastModifiedBy: lastModifiedBy
        name: name
        messageRegex: messageRegex
        traceRegex: traceRegex
        id: 0
        defectId: 6
    DefectBulkDto:
      required:
      - projectId
      - selection
      type: object
      properties:
        projectId:
          type: integer
          format: int64
        selection:
          $ref: '#/components/schemas/ListSelectionDto'
      description: ""
    ListSelectionDto:
      type: object
      properties:
        inverted:
          type: boolean
        ids:
          uniqueItems: true
          type: array
          items:
            type: integer
            format: int64
      description: ""
    DashboardCreateDto:
      required:
      - name
      - projectId
      type: object
      properties:
        projectId:
          type: integer
          format: int64
        name:
          type: string
      description: ""
    DashboardOverviewDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        projectId:
          type: integer
          format: int64
        name:
          type: string
        widgets:
          type: array
          items:
            $ref: '#/components/schemas/WidgetDto'
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        createdDate: 1
        lastModifiedDate: 5
        createdBy: createdBy
        lastModifiedBy: lastModifiedBy
        name: name
        id: 0
        widgets:
        - createdDate: 2
          dashboardId: 5
          lastModifiedDate: 4
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          options: ""
          id: 5
          type: markdown
          gridPos:
            w: 7
            h: 2
            x: 9
            "y": 3
        - createdDate: 2
          dashboardId: 5
          lastModifiedDate: 4
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          options: ""
          id: 5
          type: markdown
          gridPos:
            w: 7
            h: 2
            x: 9
            "y": 3
        projectId: 6
    CommentCreateDto:
      required:
      - body
      - testCaseId
      type: object
      properties:
        body:
          type: string
        testCaseId:
          type: integer
          format: int64
      description: ""
    CommentDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        body:
          type: string
        bodyHtml:
          type: string
        testCaseId:
          type: integer
          format: int64
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        createdDate: 2
        lastModifiedDate: 7
        createdBy: createdBy
        lastModifiedBy: lastModifiedBy
        bodyHtml: bodyHtml
        id: 5
        body: body
        testCaseId: 5
    CleanerSchemaTargetDto:
      type: string
      description: ""
      enum:
      - attachment
      - scenario
      - fixture
    LaunchCleanupRequest:
      required:
      - launchIds
      - statuses
      - targets
      type: object
      properties:
        launchIds:
          uniqueItems: true
          type: array
          items:
            type: integer
            format: int64
        targets:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/CleanerSchemaTargetDto'
        statuses:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/TestStatus'
      description: ""
    CleanerSchemaCreateDto:
      required:
      - status
      - target
      type: object
      properties:
        projectId:
          type: integer
          format: int64
        status:
          $ref: '#/components/schemas/TestStatus'
        target:
          $ref: '#/components/schemas/CleanerSchemaTargetDto'
        delay:
          type: integer
          format: int64
      description: ""
    CleanerSchemaDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        projectId:
          type: integer
          format: int64
        status:
          $ref: '#/components/schemas/TestStatus'
        target:
          $ref: '#/components/schemas/CleanerSchemaTargetDto'
        delay:
          type: integer
          format: int64
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        delay: 2
        createdDate: 7
        lastModifiedDate: 9
        createdBy: createdBy
        lastModifiedBy: lastModifiedBy
        id: 5
        projectId: 5
        status: failed
        target: attachment
    CustomFieldValueCreateDto:
      required:
      - customField
      - name
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 1
          type: string
        customField:
          $ref: '#/components/schemas/IdOnlyDto'
      description: ""
    CustomFieldSchemaCreateDto:
      required:
      - customFieldId
      - key
      - projectId
      type: object
      properties:
        projectId:
          type: integer
          format: int64
        key:
          maxLength: 255
          minLength: 1
          type: string
        customFieldId:
          type: integer
          format: int64
      description: ""
    CustomFieldSchemaDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        projectId:
          type: integer
          format: int64
        key:
          type: string
        customField:
          $ref: '#/components/schemas/CustomFieldDto'
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        createdDate: 2
        lastModifiedDate: 7
        createdBy: createdBy
        lastModifiedBy: lastModifiedBy
        id: 5
        projectId: 5
        key: key
        customField:
          createdDate: 7
          lastModifiedDate: 9
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          id: 2
    CustomFieldCreateDto:
      required:
      - name
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 1
          type: string
      description: ""
    CustomFieldMergeDto:
      type: object
      properties:
        from:
          type: integer
          format: int64
        to:
          type: integer
          format: int64
      description: ""
    CategoryMatcherCreateDto:
      required:
      - category
      - name
      type: object
      properties:
        projectId:
          type: integer
          format: int64
        name:
          type: string
        category:
          $ref: '#/components/schemas/IdOnlyDto'
        messageRegex:
          type: string
        traceRegex:
          type: string
      description: ""
    CategoryCreateDto:
      required:
      - color
      - name
      type: object
      properties:
        projectId:
          type: integer
          format: int64
        name:
          maxLength: 255
          minLength: 1
          type: string
        color:
          maxLength: 10
          minLength: 1
          type: string
        description:
          maxLength: 1000
          minLength: 0
          type: string
      description: ""
    AccessGroupCreateDto:
      required:
      - name
      type: object
      properties:
        name:
          type: string
        users:
          type: array
          items:
            $ref: '#/components/schemas/NameOnlyDto'
        projects:
          type: array
          items:
            $ref: '#/components/schemas/AccessGroupProjectAccessDto'
      description: ""
    AccessGroupProjectAccessDto:
      required:
      - permissionSetId
      - projectId
      type: object
      properties:
        projectId:
          type: integer
          format: int64
        permissionSetId:
          type: integer
          format: int64
      description: ""
    NameOnlyDto:
      required:
      - name
      type: object
      properties:
        name:
          type: string
      description: ""
    AccessGroupUsersAddDto:
      required:
      - usernames
      type: object
      properties:
        usernames:
          type: array
          items:
            type: string
      description: ""
    AccessGroupProjectsAddDto:
      required:
      - projects
      type: object
      properties:
        projects:
          type: array
          items:
            $ref: '#/components/schemas/AccessGroupProjectAccessDto'
      description: ""
    AccessGroupBulkDto:
      required:
      - selection
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/ListSelectionDto'
      description: ""
    WorkflowSchemaPatchDto:
      type: object
      properties:
        workflowId:
          type: integer
          format: int64
        type:
          $ref: '#/components/schemas/TestCaseType'
      description: ""
    WorkflowPatchDto:
      type: object
      properties:
        name:
          type: string
        statuses:
          type: array
          items:
            $ref: '#/components/schemas/IdOnlyDto'
      description: ""
    WidgetPatchDto:
      type: object
      properties:
        name:
          type: string
        type:
          $ref: '#/components/schemas/WidgetTypeDto'
        options:
          oneOf:
          - $ref: '#/components/schemas/WidgetOptionsAnalyticGraph'
          - $ref: '#/components/schemas/WidgetOptionsLaunchList'
          - $ref: '#/components/schemas/WidgetOptionsMarkdown'
          - $ref: '#/components/schemas/WidgetOptionsTcPieChart'
          - $ref: '#/components/schemas/WidgetOptionsTcTreeMap'
          - $ref: '#/components/schemas/WidgetOptionsTopTc'
          - $ref: '#/components/schemas/WidgetOptionsTrend'
        gridPos:
          $ref: '#/components/schemas/GridPosDto'
      description: ""
    TreePatchDto:
      type: object
      properties:
        name:
          type: string
        fields:
          type: array
          items:
            $ref: '#/components/schemas/IdOnlyDto'
      description: ""
    TestResultPatchDto:
      required:
      - name
      type: object
      properties:
        name:
          type: string
        fullName:
          type: string
        description:
          type: string
        precondition:
          type: string
        expectedResult:
          type: string
        testLayerId:
          type: integer
          format: int64
        scenario:
          $ref: '#/components/schemas/TestResultScenarioDto'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TestTagDto'
        links:
          type: array
          items:
            $ref: '#/components/schemas/ExternalLinkDto'
        customFields:
          type: array
          items:
            $ref: '#/components/schemas/CustomFieldValueDto'
        members:
          type: array
          items:
            $ref: '#/components/schemas/MemberDto'
      description: ""
    TestResultAttachmentPatchDto:
      type: object
      properties:
        name:
          type: string
        contentType:
          type: string
      description: ""
    TestPlanPatchDto:
      type: object
      properties:
        treeId:
          type: integer
          format: int64
        name:
          type: string
        baseRql:
          type: string
        treeSelection:
          $ref: '#/components/schemas/TreeSelectionDto'
      description: ""
    TestLayerSchemaPatchDto:
      type: object
      properties:
        key:
          type: string
        testLayerId:
          type: integer
          format: int64
      description: ""
    TestLayerPatchDto:
      type: object
      properties:
        name:
          type: string
      description: ""
    TestKeySchemaPatchDto:
      type: object
      properties:
        key:
          type: string
        integrationId:
          type: integer
          format: int64
      description: ""
    TestFixtureResultAttachmentPatchDto:
      type: object
      properties:
        name:
          type: string
        contentType:
          type: string
      description: ""
    TestCaseUpdateSchemaPatchDto:
      type: object
      properties:
        field:
          $ref: '#/components/schemas/TestCaseUpdateFieldDto'
        policy:
          $ref: '#/components/schemas/TestCaseUpdatePolicyDto'
      description: ""
    TestCasePatchDto:
      type: object
      properties:
        name:
          type: string
        fullName:
          type: string
        description:
          type: string
        precondition:
          type: string
        expectedResult:
          type: string
        deleted:
          type: boolean
        automated:
          type: boolean
        external:
          type: boolean
        testLayerId:
          type: integer
          format: int64
        statusId:
          type: integer
          format: int64
        workflowId:
          type: integer
          format: int64
        scenario:
          $ref: '#/components/schemas/TestCaseScenarioDto'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TestTagDto'
        links:
          type: array
          items:
            $ref: '#/components/schemas/ExternalLinkDto'
        customFields:
          type: array
          items:
            $ref: '#/components/schemas/CustomFieldValueDto'
        members:
          type: array
          items:
            $ref: '#/components/schemas/MemberDto'
      description: ""
    ScenarioStepPatchDto:
      type: object
      properties:
        body:
          type: string
        expectedResult:
          type: string
        attachmentId:
          type: integer
          format: int64
        sharedStepId:
          type: integer
          format: int64
      description: ""
    TestCaseAttachmentPatchDto:
      type: object
      properties:
        name:
          type: string
        contentType:
          type: string
      description: ""
    TestTagPatchDto:
      type: object
      properties:
        name:
          type: string
      description: ""
    StatusPatchDto:
      type: object
      properties:
        name:
          type: string
        color:
          type: string
      description: ""
    SharedStepPatchDto:
      type: object
      properties:
        name:
          type: string
      description: ""
    SharedStepAttachmentPatchDto:
      type: object
      properties:
        name:
          type: string
        contentType:
          type: string
      description: ""
    RoleSchemaPatchDto:
      type: object
      properties:
        key:
          type: string
        roleId:
          type: integer
          format: int64
      description: ""
    RolePatchDto:
      type: object
      properties:
        name:
          type: string
      description: ""
    LaunchLiveDocConfigDto:
      type: object
      properties:
        projectId:
          type: integer
          format: int64
        filter:
          type: string
      description: ""
      example:
        filter: filter
        projectId: 0
    LaunchCloseConfigDto:
      type: object
      properties:
        projectId:
          type: integer
          format: int64
        autoCloseFilter:
          type: string
        timeoutForFinishedLaunches:
          type: integer
          format: int64
        timeoutForInProgressLaunches:
          type: integer
          format: int64
      description: ""
      example:
        timeoutForFinishedLaunches: 6
        autoCloseFilter: autoCloseFilter
        timeoutForInProgressLaunches: 1
        projectId: 0
    ProjectPropertyPatchDto:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
      description: ""
    ProjectPatchDto:
      type: object
      properties:
        name:
          type: string
        abbr:
          type: string
        isPublic:
          type: boolean
        favorite:
          type: boolean
        description:
          type: string
      description: ""
    PermissionSetPatchDto:
      required:
      - permissions
      type: object
      properties:
        name:
          type: string
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/PermissionDto'
      description: ""
    MemberPatchDto:
      type: object
      properties:
        name:
          type: string
      description: ""
    LaunchPatchDto:
      type: object
      properties:
        name:
          type: string
        external:
          type: boolean
        autoclose:
          type: boolean
        tags:
          type: array
          items:
            $ref: '#/components/schemas/LaunchTagDto'
        links:
          type: array
          items:
            $ref: '#/components/schemas/ExternalLinkDto'
        issues:
          type: array
          items:
            $ref: '#/components/schemas/IssueDto'
      description: ""
    LaunchTagPatchDto:
      type: object
      properties:
        name:
          type: string
      description: ""
    JobPatchDto:
      type: object
      properties:
        name:
          type: string
        canRun:
          type: boolean
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/JobParameterDto'
        integrationId:
          type: integer
          format: int64
      description: ""
    IssueSchemaPatchDto:
      type: object
      properties:
        key:
          type: string
        integrationId:
          type: integer
          format: int64
      description: ""
    IssuePatchDto:
      type: object
      properties:
        name:
          type: string
      description: ""
    ProjectIntegrationPatchDto:
      type: object
      properties:
        settings:
          $ref: '#/components/schemas/IntegrationSettingsDto'
        secret:
          $ref: '#/components/schemas/IntegrationSettingsDto'
        disabled:
          type: boolean
      description: ""
    IntegrationPatchDto:
      type: object
      properties:
        name:
          type: string
        settings:
          $ref: '#/components/schemas/IntegrationSettingsDto'
        defaultProjectSettings:
          $ref: '#/components/schemas/IntegrationSettingsDto'
        defaultSecret:
          $ref: '#/components/schemas/IntegrationSettingsDto'
        enabledByDefault:
          type: boolean
        disabled:
          type: boolean
      description: ""
    IntegrationWebhookPatchDto:
      type: object
      properties:
        disabled:
          type: boolean
      description: ""
    IntegrationWebhookDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstEight:
          type: string
        disabled:
          type: boolean
        lastUsedDate:
          type: integer
          format: int64
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        createdDate: 2
        lastUsedDate: 5
        lastModifiedDate: 7
        createdBy: createdBy
        lastModifiedBy: lastModifiedBy
        firstEight: firstEight
        disabled: true
        id: 5
    IntegrationExportPatchDto:
      type: object
      properties:
        disabled:
          type: boolean
        disableTcCreate:
          type: boolean
        disableLaunchSync:
          type: boolean
        projectKey:
          type: string
        tcAql:
          type: string
        launchAql:
          type: string
        syncDelaySec:
          type: integer
          format: int64
        settings:
          $ref: '#/components/schemas/IntegrationSettingsDto'
      description: ""
    AllowedRoleDto:
      type: string
      description: ""
      enum:
      - ADMIN
      - USER
    GlobalSettingsProjectCreatePatchDto:
      required:
      - role
      type: object
      properties:
        role:
          $ref: '#/components/schemas/AllowedRoleDto'
      description: ""
    FilterPatchDto:
      type: object
      properties:
        name:
          type: string
        body:
          type: string
        shared:
          type: boolean
      description: ""
    EnvVarValuePatchDto:
      type: object
      properties:
        name:
          type: string
      description: ""
    EnvVarSchemaPatchDto:
      type: object
      properties:
        key:
          type: string
        envVarId:
          type: integer
          format: int64
      description: ""
    EnvVarPatchDto:
      type: object
      properties:
        name:
          type: string
      description: ""
    DefectPatchDto:
      type: object
      properties:
        name:
          type: string
        closed:
          type: boolean
        description:
          type: string
      description: ""
    DefectMatcherPatchDto:
      type: object
      properties:
        name:
          type: string
        messageRegex:
          type: string
        traceRegex:
          type: string
      description: ""
    DashboardPatchDto:
      type: object
      properties:
        name:
          type: string
      description: ""
    CommentPatchDto:
      type: object
      properties:
        body:
          type: string
      description: ""
    CleanerSchemaPatchDto:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/TestStatus'
        target:
          $ref: '#/components/schemas/CleanerSchemaTargetDto'
        delay:
          type: integer
          format: int64
      description: ""
    CustomFieldValuePatchDto:
      type: object
      properties:
        name:
          type: string
      description: ""
    CustomFieldSchemaPatchDto:
      type: object
      properties:
        key:
          type: string
        customFieldId:
          type: integer
          format: int64
      description: ""
    CustomFieldPatchDto:
      type: object
      properties:
        name:
          type: string
      description: ""
    CategoryMatcherPatchDto:
      type: object
      properties:
        name:
          type: string
        category:
          $ref: '#/components/schemas/IdOnlyDto'
        messageRegex:
          type: string
        traceRegex:
          type: string
      description: ""
    CategoryPatchDto:
      type: object
      properties:
        name:
          type: string
        color:
          type: string
        description:
          type: string
      description: ""
    AccessGroupPatchDto:
      type: object
      properties:
        name:
          type: string
        users:
          type: array
          items:
            $ref: '#/components/schemas/NameOnlyDto'
        projects:
          type: array
          items:
            $ref: '#/components/schemas/AccessGroupProjectAccessDto'
      description: ""
    PageWorkflowSchemaDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowSchemaDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 7
        size: 2
        numberOfElements: 1
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort: null
        content:
        - createdDate: 1
          workflow:
            createdDate: 1
            lastModifiedDate: 1
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            statuses:
            - createdDate: 4
              color: color
              lastModifiedDate: 7
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              id: 2
            - createdDate: 4
              color: color
              lastModifiedDate: 7
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              id: 2
            id: 3
          lastModifiedDate: 6
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          id: 7
          type: manual
          projectId: 9
        - createdDate: 1
          workflow:
            createdDate: 1
            lastModifiedDate: 1
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            statuses:
            - createdDate: 4
              color: color
              lastModifiedDate: 7
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              id: 2
            - createdDate: 4
              color: color
              lastModifiedDate: 7
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              id: 2
            id: 3
          lastModifiedDate: 6
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          id: 7
          type: manual
          projectId: 9
        first: true
        totalElements: 0
        empty: true
    Pageable:
      type: object
      properties:
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/SortObject'
        unpaged:
          type: boolean
        paged:
          type: boolean
      example:
        paged: true
        pageNumber: 1
        offset: 5
        pageSize: 5
        unpaged: true
        sort:
          unsorted: true
          sorted: true
          empty: true
    SortObject:
      type: object
      properties:
        sorted:
          type: boolean
        empty:
          type: boolean
        unsorted:
          type: boolean
      description: ""
      example:
        unsorted: true
        sorted: true
        empty: true
    PageWorkflowDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 5
        size: 1
        numberOfElements: 5
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdDate: 1
          lastModifiedDate: 1
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          statuses:
          - createdDate: 4
            color: color
            lastModifiedDate: 7
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 2
          - createdDate: 4
            color: color
            lastModifiedDate: 7
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 2
          id: 3
        - createdDate: 1
          lastModifiedDate: 1
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          statuses:
          - createdDate: 4
            color: color
            lastModifiedDate: 7
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 2
          - createdDate: 4
            color: color
            lastModifiedDate: 7
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 2
          id: 3
        first: true
        totalElements: 0
        empty: true
    PageIdAndNameOnlyDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/IdAndNameOnlyDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 5
        size: 1
        numberOfElements: 5
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - name: name
          id: 6
        - name: name
          id: 6
        first: true
        totalElements: 0
        empty: true
    PageWidgetDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/WidgetDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 7
        size: 1
        numberOfElements: 1
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdDate: 2
          dashboardId: 5
          lastModifiedDate: 4
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          options: ""
          id: 5
          type: markdown
          gridPos:
            w: 7
            h: 2
            x: 9
            "y": 3
        - createdDate: 2
          dashboardId: 5
          lastModifiedDate: 4
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          options: ""
          id: 5
          type: markdown
          gridPos:
            w: 7
            h: 2
            x: 9
            "y": 3
        first: true
        totalElements: 0
        empty: true
    MultiValueMapStringString:
      type: object
      properties:
        all:
          type: object
          additionalProperties:
            type: string
          writeOnly: true
        empty:
          type: boolean
      additionalProperties:
        type: array
        items:
          type: string
      x-schema-name: MultiValueMapStringString
    WidgetDataDto:
      type: object
      properties:
        widgetId:
          type: integer
          format: int64
        data:
          type: object
      description: ""
      example:
        data: {}
        widgetId: 0
    PageTreePathDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/TreePathDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 9
        size: 1
        numberOfElements: 3
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - treeId: 5
          id: 5
          items:
          - name: name
            customFieldId: 7
            id: 2
          - name: name
            customFieldId: 7
            id: 2
          favorite: true
        - treeId: 5
          id: 5
          items:
          - name: name
            customFieldId: 7
            id: 2
          - name: name
            customFieldId: 7
            id: 2
          favorite: true
        first: true
        totalElements: 0
        empty: true
    PageTreeDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/TreeDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 4
        size: 1
        numberOfElements: 7
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdDate: 3
          lastModifiedDate: 2
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          id: 5
          fields:
          - createdDate: 7
            lastModifiedDate: 9
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 2
          - createdDate: 7
            lastModifiedDate: 9
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 2
          projectId: 5
        - createdDate: 3
          lastModifiedDate: 2
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          id: 5
          fields:
          - createdDate: 7
            lastModifiedDate: 9
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 2
          - createdDate: 7
            lastModifiedDate: 9
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 2
          projectId: 5
        first: true
        totalElements: 0
        empty: true
    PageTestResultTreeLeafDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/TestResultTreeLeafDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 3
        size: 1
        numberOfElements: 2
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - hidden: true
          testedBy: testedBy
          flaky: true
          start: 5
          manual: true
          duration: 7
          stop: 2
          name: name
          id: 5
          assignee: assignee
          layerName: layerName
          status: failed
          testCaseId: 9
        - hidden: true
          testedBy: testedBy
          flaky: true
          start: 5
          manual: true
          duration: 7
          stop: 2
          name: name
          id: 5
          assignee: assignee
          layerName: layerName
          status: failed
          testCaseId: 9
        first: true
        totalElements: 0
        empty: true
    TestResultTreeLeafDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        status:
          $ref: '#/components/schemas/TestStatus'
        start:
          type: integer
          format: int64
        stop:
          type: integer
          format: int64
        duration:
          type: integer
          format: int64
        flaky:
          type: boolean
        hidden:
          type: boolean
        manual:
          type: boolean
        assignee:
          type: string
        testedBy:
          type: string
        layerName:
          type: string
        testCaseId:
          type: integer
          format: int64
      description: ""
      example:
        hidden: true
        testedBy: testedBy
        flaky: true
        start: 5
        manual: true
        duration: 7
        stop: 2
        name: name
        id: 5
        assignee: assignee
        layerName: layerName
        status: failed
        testCaseId: 9
    PageTestResultTreeGroupDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/TestResultTreeGroupDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 1
        size: 1
        numberOfElements: 1
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - statistic:
            broken: 7
            total: 7
            inProgress: 4
            failed: 2
            passed: 9
            skipped: 3
            unknown: 2
          name: name
          customFieldId: 5
          id: 5
        - statistic:
            broken: 7
            total: 7
            inProgress: 4
            failed: 2
            passed: 9
            skipped: 3
            unknown: 2
          name: name
          customFieldId: 5
          id: 5
        first: true
        totalElements: 0
        empty: true
    StatisticDto:
      type: object
      properties:
        failed:
          type: integer
          format: int64
        broken:
          type: integer
          format: int64
        passed:
          type: integer
          format: int64
        skipped:
          type: integer
          format: int64
        unknown:
          type: integer
          format: int64
        inProgress:
          type: integer
          format: int64
        total:
          type: integer
          format: int64
      description: ""
      example:
        broken: 7
        total: 7
        inProgress: 4
        failed: 2
        passed: 9
        skipped: 3
        unknown: 2
    TestResultTreeGroupDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        customFieldId:
          type: integer
          format: int64
        statistic:
          $ref: '#/components/schemas/StatisticDto'
      description: ""
      example:
        statistic:
          broken: 7
          total: 7
          inProgress: 4
          failed: 2
          passed: 9
          skipped: 3
          unknown: 2
        name: name
        customFieldId: 5
        id: 5
    PageTestResultDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/TestResultDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 3
        size: 1
        numberOfElements: 6
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - hidden: true
          testedBy: testedBy
          flaky: true
          description: description
          scenarioKey: scenarioKey
          manual: true
          retriedBy:
            name: name
            id: 6
          layer:
            createdDate: 7
            lastModifiedDate: 1
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 4
          duration: 2
          threadId: threadId
          trace: trace
          known: true
          expectedResultHtml: expectedResultHtml
          links:
          - name: name
            type: type
            url: url
          - name: name
            type: type
            url: url
          id: 5
          muted: true
          historyKey: historyKey
          jobRun:
            lastModifiedDate: 9
            lastModifiedBy: lastModifiedBy
            errorMessage: errorMessage
            externalId: externalId
            url: url
            launchId: 5
            createdDate: 9
            stage: run_failure
            createdBy: createdBy
            name: name
            id: 1
            job:
              name: name
              id: 4
              type: allure_testops
              url: url
            status: failed
          lastModifiedDate: 9
          lastModifiedBy: lastModifiedBy
          start: 9
          fullName: fullName
          hostId: hostId
          precondition: precondition
          message: message
          tags:
          - name: name
            id: 6
          - name: name
            id: 6
          launchId: 2
          external: true
          preconditionHtml: preconditionHtml
          createdDate: 8
          stop: 3
          expectedResult: expectedResult
          createdBy: createdBy
          name: name
          descriptionHtml: descriptionHtml
          assignee: assignee
          category:
            createdDate: 6
            color: color
            lastModifiedDate: 7
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            description: description
            id: 1
            projectId: 1
          projectId: 5
          parameters:
          - excluded: true
            hidden: true
            name: name
            value: value
          - excluded: true
            hidden: true
            name: name
            value: value
          testCaseId: 7
          status: failed
        - hidden: true
          testedBy: testedBy
          flaky: true
          description: description
          scenarioKey: scenarioKey
          manual: true
          retriedBy:
            name: name
            id: 6
          layer:
            createdDate: 7
            lastModifiedDate: 1
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 4
          duration: 2
          threadId: threadId
          trace: trace
          known: true
          expectedResultHtml: expectedResultHtml
          links:
          - name: name
            type: type
            url: url
          - name: name
            type: type
            url: url
          id: 5
          muted: true
          historyKey: historyKey
          jobRun:
            lastModifiedDate: 9
            lastModifiedBy: lastModifiedBy
            errorMessage: errorMessage
            externalId: externalId
            url: url
            launchId: 5
            createdDate: 9
            stage: run_failure
            createdBy: createdBy
            name: name
            id: 1
            job:
              name: name
              id: 4
              type: allure_testops
              url: url
            status: failed
          lastModifiedDate: 9
          lastModifiedBy: lastModifiedBy
          start: 9
          fullName: fullName
          hostId: hostId
          precondition: precondition
          message: message
          tags:
          - name: name
            id: 6
          - name: name
            id: 6
          launchId: 2
          external: true
          preconditionHtml: preconditionHtml
          createdDate: 8
          stop: 3
          expectedResult: expectedResult
          createdBy: createdBy
          name: name
          descriptionHtml: descriptionHtml
          assignee: assignee
          category:
            createdDate: 6
            color: color
            lastModifiedDate: 7
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            description: description
            id: 1
            projectId: 1
          projectId: 5
          parameters:
          - excluded: true
            hidden: true
            name: name
            value: value
          - excluded: true
            hidden: true
            name: name
            value: value
          testCaseId: 7
          status: failed
        first: true
        totalElements: 0
        empty: true
    TestFixtureResultDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          $ref: '#/components/schemas/TestFixtureResultTypeDto'
        name:
          type: string
        start:
          type: integer
          format: int64
        stop:
          type: integer
          format: int64
        duration:
          type: integer
          format: int64
        status:
          $ref: '#/components/schemas/TestStatus'
        message:
          type: string
        trace:
          type: string
        scenario:
          $ref: '#/components/schemas/TestResultScenarioDto'
      description: ""
      example:
        duration: 5
        trace: trace
        stop: 1
        scenario:
          attachments:
          - ""
          - ""
          steps:
          - attachments:
            - ""
            - ""
            expandable: true
            showMessage: true
            start: 5
            message: message
            leaf: true
            steps:
            - null
            - null
            duration: 7
            trace: trace
            attachmentsCount: 3
            stop: 2
            expectedResult: expectedResult
            name: name
            stepsCount: 9
            keyword: keyword
            parameters:
            - excluded: true
              hidden: true
              name: name
              value: value
            - excluded: true
              hidden: true
              name: name
              value: value
            status: null
          - attachments:
            - ""
            - ""
            expandable: true
            showMessage: true
            start: 5
            message: message
            leaf: true
            steps:
            - null
            - null
            duration: 7
            trace: trace
            attachmentsCount: 3
            stop: 2
            expectedResult: expectedResult
            name: name
            stepsCount: 9
            keyword: keyword
            parameters:
            - excluded: true
              hidden: true
              name: name
              value: value
            - excluded: true
              hidden: true
              name: name
              value: value
            status: null
        name: name
        start: 6
        id: 0
        type: before
        message: message
        status: failed
    TestFixtureResultTypeDto:
      type: string
      description: ""
      enum:
      - before
      - after
    PageTestFixtureResultAttachmentRowDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/TestFixtureResultAttachmentRowDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 5
        size: 1
        numberOfElements: 5
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - missed: true
        - missed: true
        first: true
        totalElements: 0
        empty: true
    DefectRowDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        closed:
          type: boolean
        issue:
          $ref: '#/components/schemas/IssueDto'
      description: ""
      example:
        issue:
          summary: summary
          name: name
          integrationId: 6
          closed: true
          id: 0
          url: url
          status: status
        name: name
        closed: true
        id: 5
    PageDefectRowDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/DefectRowDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 5
        size: 1
        numberOfElements: 2
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - issue:
            summary: summary
            name: name
            integrationId: 6
            closed: true
            id: 0
            url: url
            status: status
          name: name
          closed: true
          id: 5
        - issue:
            summary: summary
            name: name
            integrationId: 6
            closed: true
            id: 0
            url: url
            status: status
          name: name
          closed: true
          id: 5
        first: true
        totalElements: 0
        empty: true
    PageTestResultHistoryDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/TestResultHistoryDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 2
        size: 1
        numberOfElements: 4
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - testedBy: testedBy
          lastModifiedDate: 3
          lastModifiedBy: lastModifiedBy
          start: 5
          launch:
            name: name
            id: 6
          message: message
          duration: 7
          trace: trace
          environment:
          - name: name
            variable:
              createdDate: 1
              lastModifiedDate: 5
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              id: 6
            id: 0
          - name: name
            variable:
              createdDate: 1
              lastModifiedDate: 5
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              id: 6
            id: 0
          createdDate: 9
          stop: 2
          createdBy: createdBy
          id: 5
          parameters:
          - excluded: true
            hidden: true
            name: name
            value: value
          - excluded: true
            hidden: true
            name: name
            value: value
          status: failed
        - testedBy: testedBy
          lastModifiedDate: 3
          lastModifiedBy: lastModifiedBy
          start: 5
          launch:
            name: name
            id: 6
          message: message
          duration: 7
          trace: trace
          environment:
          - name: name
            variable:
              createdDate: 1
              lastModifiedDate: 5
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              id: 6
            id: 0
          - name: name
            variable:
              createdDate: 1
              lastModifiedDate: 5
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              id: 6
            id: 0
          createdDate: 9
          stop: 2
          createdBy: createdBy
          id: 5
          parameters:
          - excluded: true
            hidden: true
            name: name
            value: value
          - excluded: true
            hidden: true
            name: name
            value: value
          status: failed
        first: true
        totalElements: 0
        empty: true
    TestResultHistoryDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        launch:
          $ref: '#/components/schemas/IdAndNameOnlyDto'
        start:
          type: integer
          format: int64
        stop:
          type: integer
          format: int64
        duration:
          type: integer
          format: int64
        status:
          $ref: '#/components/schemas/TestStatus'
        message:
          type: string
        trace:
          type: string
        testedBy:
          type: string
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/TestResultParameterDto'
        environment:
          type: array
          items:
            $ref: '#/components/schemas/EnvVarValueDto'
      description: ""
      example:
        testedBy: testedBy
        lastModifiedDate: 3
        lastModifiedBy: lastModifiedBy
        start: 5
        launch:
          name: name
          id: 6
        message: message
        duration: 7
        trace: trace
        environment:
        - name: name
          variable:
            createdDate: 1
            lastModifiedDate: 5
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 6
          id: 0
        - name: name
          variable:
            createdDate: 1
            lastModifiedDate: 5
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 6
          id: 0
        createdDate: 9
        stop: 2
        createdBy: createdBy
        id: 5
        parameters:
        - excluded: true
          hidden: true
          name: name
          value: value
        - excluded: true
          hidden: true
          name: name
          value: value
        status: failed
    PageTestResultRowDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/TestResultRowDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 5
        size: 1
        numberOfElements: 5
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - duration: 1
          name: name
          id: 0
          assignee: assignee
          testCaseId: 6
          status: failed
        - duration: 1
          name: name
          id: 0
          assignee: assignee
          testCaseId: 6
          status: failed
        first: true
        totalElements: 0
        empty: true
    PageDefectDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/DefectDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 5
        size: 1
        numberOfElements: 5
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdDate: 1
          issue:
            summary: summary
            name: name
            integrationId: 6
            closed: true
            id: 0
            url: url
            status: status
          lastModifiedDate: 5
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          closed: true
          description: description
          descriptionHtml: descriptionHtml
          id: 0
          projectId: 6
        - createdDate: 1
          issue:
            summary: summary
            name: name
            integrationId: 6
            closed: true
            id: 0
            url: url
            status: status
          lastModifiedDate: 5
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          closed: true
          description: description
          descriptionHtml: descriptionHtml
          id: 0
          projectId: 6
        first: true
        totalElements: 0
        empty: true
    GroupNodeContext:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
      description: ""
      example:
        value: value
        key: key
    TestResultGroupNode:
      type: object
      properties:
        uid:
          type: string
        context:
          $ref: '#/components/schemas/GroupNodeContext'
        leafs:
          type: array
          items:
            $ref: '#/components/schemas/TestResultLeafNode'
        name:
          type: string
      description: ""
      example:
        uid: uid
        leafs:
        - parentUid: parentUid
          duration: 2
          uid: 1
          stop: 5
          hidden: true
          testedBy: testedBy
          flaky: true
          name: name
          start: 5
          assignee: assignee
          muted: true
          status: failed
        - parentUid: parentUid
          duration: 2
          uid: 1
          stop: 5
          hidden: true
          testedBy: testedBy
          flaky: true
          name: name
          start: 5
          assignee: assignee
          muted: true
          status: failed
        context:
          value: value
          key: key
        name: name
    TestResultLeafNode:
      type: object
      properties:
        uid:
          type: integer
          format: int64
        name:
          type: string
        parentUid:
          type: string
        status:
          $ref: '#/components/schemas/TestStatus'
        start:
          type: integer
          format: int64
        stop:
          type: integer
          format: int64
        duration:
          type: integer
          format: int64
        flaky:
          type: boolean
        hidden:
          type: boolean
        muted:
          type: boolean
        assignee:
          type: string
        testedBy:
          type: string
      description: ""
      example:
        parentUid: parentUid
        duration: 2
        uid: 1
        stop: 5
        hidden: true
        testedBy: testedBy
        flaky: true
        name: name
        start: 5
        assignee: assignee
        muted: true
        status: failed
    TestResultTree:
      type: object
      properties:
        total:
          type: integer
          format: int64
        shown:
          type: integer
          format: int64
        groups:
          type: array
          items:
            $ref: '#/components/schemas/TestResultGroupNode'
        name:
          type: string
        context:
          $ref: '#/components/schemas/GroupNodeContext'
        uid:
          type: string
        leafs:
          type: array
          items:
            $ref: '#/components/schemas/TestResultLeafNode'
      description: ""
      example:
        uid: uid
        total: 0
        shown: 6
        leafs:
        - null
        - null
        name: name
        context: null
        groups:
        - uid: uid
          leafs:
          - parentUid: parentUid
            duration: 2
            uid: 1
            stop: 5
            hidden: true
            testedBy: testedBy
            flaky: true
            name: name
            start: 5
            assignee: assignee
            muted: true
            status: failed
          - parentUid: parentUid
            duration: 2
            uid: 1
            stop: 5
            hidden: true
            testedBy: testedBy
            flaky: true
            name: name
            start: 5
            assignee: assignee
            muted: true
            status: failed
          context:
            value: value
            key: key
          name: name
        - uid: uid
          leafs:
          - parentUid: parentUid
            duration: 2
            uid: 1
            stop: 5
            hidden: true
            testedBy: testedBy
            flaky: true
            name: name
            start: 5
            assignee: assignee
            muted: true
            status: failed
          - parentUid: parentUid
            duration: 2
            uid: 1
            stop: 5
            hidden: true
            testedBy: testedBy
            flaky: true
            name: name
            start: 5
            assignee: assignee
            muted: true
            status: failed
          context:
            value: value
            key: key
          name: name
    AqlValidateResponseDto:
      type: object
      properties:
        valid:
          type: boolean
        count:
          type: integer
          format: int64
      description: ""
      example:
        valid: true
        count: 0
    PageTestResultDefectMatchDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/TestResultDefectMatchDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 5
        size: 1
        numberOfElements: 2
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - trace: trace
          name: name
          id: 5
          message: message
          status: failed
        - trace: trace
          name: name
          id: 5
          message: message
          status: failed
        first: true
        totalElements: 0
        empty: true
    TestResultDefectMatchDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        status:
          $ref: '#/components/schemas/TestStatus'
        message:
          type: string
        trace:
          type: string
      description: ""
      example:
        trace: trace
        name: name
        id: 5
        message: message
        status: failed
    PageTestResultAttachmentRowDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/TestResultAttachmentRowDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 5
        size: 1
        numberOfElements: 5
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - missed: true
        - missed: true
        first: true
        totalElements: 0
        empty: true
    StreamingResponseBody:
      type: object
    PageTestPlanDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/TestPlanDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 1
        size: 1
        numberOfElements: 1
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - baseRql: baseRql
          createdDate: 7
          lastModifiedDate: 1
          createdBy: createdBy
          treeSelection:
            leafsExclude:
            - 3
            - 3
            path:
            - 2
            - 2
            groupsInclude:
            - - 2
              - 2
            - - 2
              - 2
            groupsExclude:
            - - 7
              - 7
            - - 7
              - 7
            inverted: true
            leafsInclude:
            - 9
            - 9
          lastModifiedBy: lastModifiedBy
          name: name
          tree:
            name: name
            id: 6
          testCasesCount: 4
          id: 5
          projectId: 5
        - baseRql: baseRql
          createdDate: 7
          lastModifiedDate: 1
          createdBy: createdBy
          treeSelection:
            leafsExclude:
            - 3
            - 3
            path:
            - 2
            - 2
            groupsInclude:
            - - 2
              - 2
            - - 2
              - 2
            groupsExclude:
            - - 7
              - 7
            - - 7
              - 7
            inverted: true
            leafsInclude:
            - 9
            - 9
          lastModifiedBy: lastModifiedBy
          name: name
          tree:
            name: name
            id: 6
          testCasesCount: 4
          id: 5
          projectId: 5
        first: true
        totalElements: 0
        empty: true
    PageTestCaseTreeLeafDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/TestCaseTreeLeafDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 2
        size: 1
        numberOfElements: 7
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - automated: true
          external: true
          createdDate: 5
          statusColor: statusColor
          name: name
          statusName: statusName
          id: 5
          layerName: layerName
        - automated: true
          external: true
          createdDate: 5
          statusColor: statusColor
          name: name
          statusName: statusName
          id: 5
          layerName: layerName
        first: true
        totalElements: 0
        empty: true
    PageTestCaseTreeGroupDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/TestCaseTreeGroupDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 7
        size: 1
        numberOfElements: 9
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - name: name
          count: 2
          customFieldId: 5
          id: 5
        - name: name
          count: 2
          customFieldId: 5
          id: 5
        first: true
        totalElements: 0
        empty: true
    TestPlanMemberStatDto:
      type: object
      properties:
        username:
          type: string
        testCasesCount:
          type: integer
          format: int64
      description: ""
      example:
        testCasesCount: 0
        username: username
    TestPlanJobStatDto:
      type: object
      properties:
        job:
          $ref: '#/components/schemas/JobDto'
        testCasesCount:
          type: integer
          format: int64
      description: ""
      example:
        testCasesCount: 0
        job:
          name: name
          id: 0
          type: allure_testops
          parameters:
          - name: name
            id: 6
            value: value
          - name: name
            id: 6
            value: value
          url: url
    TestPlanDiffDto:
      type: object
      properties:
        added:
          type: integer
          format: int64
        deleted:
          type: integer
          format: int64
      description: ""
      example:
        deleted: 6
        added: 0
    PageTestPlanRowDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/TestPlanRowDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 2
        size: 1
        numberOfElements: 7
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - name: name
          testCasesCount: 5
          id: 5
        - name: name
          testCasesCount: 5
          id: 5
        first: true
        totalElements: 0
        empty: true
    TestPlanRowDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        testCasesCount:
          type: integer
          format: int64
      description: ""
      example:
        name: name
        testCasesCount: 5
        id: 5
    PageTestLayerSchemaDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/TestLayerSchemaDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 9
        size: 1
        numberOfElements: 3
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdDate: 2
          lastModifiedDate: 7
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          id: 5
          testLayer:
            createdDate: 7
            lastModifiedDate: 1
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 4
          projectId: 5
          key: key
        - createdDate: 2
          lastModifiedDate: 7
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          id: 5
          testLayer:
            createdDate: 7
            lastModifiedDate: 1
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 4
          projectId: 5
          key: key
        first: true
        totalElements: 0
        empty: true
    PageTestLayerDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/TestLayerDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 5
        size: 1
        numberOfElements: 5
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdDate: 7
          lastModifiedDate: 1
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          id: 4
        - createdDate: 7
          lastModifiedDate: 1
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          id: 4
        first: true
        totalElements: 0
        empty: true
    PageTestKeySchemaDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/TestKeySchemaDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 3
        size: 1
        numberOfElements: 2
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdDate: 7
          lastModifiedDate: 9
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          integrationId: 2
          id: 5
          projectId: 5
          key: key
        - createdDate: 7
          lastModifiedDate: 9
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          integrationId: 2
          id: 5
          projectId: 5
          key: key
        first: true
        totalElements: 0
        empty: true
    TestCaseTreeFilterCountDto:
      type: object
      properties:
        total:
          type: integer
          format: int64
        filtered:
          type: integer
          format: int64
      description: ""
      example:
        total: 0
        filtered: 6
    PageTestCaseRowDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/TestCaseRowDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 5
        size: 1
        numberOfElements: 2
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - automated: true
          name: name
          id: 5
          testLayer:
            createdDate: 7
            lastModifiedDate: 1
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 4
          status:
            createdDate: 4
            color: color
            lastModifiedDate: 7
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 2
        - automated: true
          name: name
          id: 5
          testLayer:
            createdDate: 7
            lastModifiedDate: 1
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 4
          status:
            createdDate: 4
            color: color
            lastModifiedDate: 7
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 2
        first: true
        totalElements: 0
        empty: true
    PageTestCaseExampleDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/TestCaseExampleDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 5
        size: 1
        numberOfElements: 2
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - id: 5
          parameters:
          - name: name
            value: value
          - name: name
            value: value
          status: failed
        - id: 5
          parameters:
          - name: name
            value: value
          - name: name
            value: value
          status: failed
        first: true
        totalElements: 0
        empty: true
    AuditActionTypeDto:
      type: string
      description: ""
      enum:
      - insert
      - update
      - delete
    Diff:
      type: object
    DiffValueChangeBoolean:
      type: object
      properties:
        oldValue:
          type: boolean
        newValue:
          type: boolean
    DiffValueChangeLong:
      type: object
      properties:
        oldValue:
          type: integer
          format: int64
        newValue:
          type: integer
          format: int64
    DiffValueChangeSetLong:
      type: object
      properties:
        oldValue:
          uniqueItems: true
          type: array
          items:
            type: integer
            format: int64
        newValue:
          uniqueItems: true
          type: array
          items:
            type: integer
            format: int64
    DiffValueChangeString:
      type: object
      properties:
        oldValue:
          type: string
        newValue:
          type: string
    PageTestCaseAuditLogEntryDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/TestCaseAuditLogEntryDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 2
        size: 1
        numberOfElements: 7
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - actionType: insert
          data:
          - diff: ""
            type: type
          - diff: ""
            type: type
          id: 5
          timestamp: 5
          username: username
        - actionType: insert
          data:
          - diff: ""
            type: type
          - diff: ""
            type: type
          id: 5
          timestamp: 5
          username: username
        first: true
        totalElements: 0
        empty: true
    TestCaseAssociationDiff:
      type: object
      properties:
        ids:
          $ref: '#/components/schemas/DiffValueChangeSetLong'
      description: ""
      allOf:
      - $ref: '#/components/schemas/Diff'
    TestCaseAuditLogData:
      type: object
      properties:
        diff:
          oneOf:
          - $ref: '#/components/schemas/TestCaseAssociationDiff'
          - $ref: '#/components/schemas/TestCaseDiff'
        type:
          type: string
      description: ""
      example:
        diff: ""
        type: type
    TestCaseAuditLogEntryDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        timestamp:
          type: integer
          format: int64
        username:
          type: string
        actionType:
          $ref: '#/components/schemas/AuditActionTypeDto'
        data:
          type: array
          items:
            $ref: '#/components/schemas/TestCaseAuditLogData'
      description: ""
      example:
        actionType: insert
        data:
        - diff: ""
          type: type
        - diff: ""
          type: type
        id: 5
        timestamp: 5
        username: username
    TestCaseDiff:
      type: object
      properties:
        projectId:
          $ref: '#/components/schemas/DiffValueChangeLong'
        name:
          $ref: '#/components/schemas/DiffValueChangeString'
        automated:
          $ref: '#/components/schemas/DiffValueChangeBoolean'
        deleted:
          $ref: '#/components/schemas/DiffValueChangeBoolean'
        description:
          $ref: '#/components/schemas/DiffValueChangeString'
        descriptionHtml:
          $ref: '#/components/schemas/DiffValueChangeString'
        precondition:
          $ref: '#/components/schemas/DiffValueChangeString'
        preconditionHtml:
          $ref: '#/components/schemas/DiffValueChangeString'
        expectedResult:
          $ref: '#/components/schemas/DiffValueChangeString'
        expectedResultHtml:
          $ref: '#/components/schemas/DiffValueChangeString'
        statusId:
          $ref: '#/components/schemas/DiffValueChangeLong'
        workflowId:
          $ref: '#/components/schemas/DiffValueChangeLong'
        testLayerId:
          $ref: '#/components/schemas/DiffValueChangeLong'
      description: ""
      allOf:
      - $ref: '#/components/schemas/Diff'
    PageTestCaseAttachmentRowDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/TestCaseAttachmentRowDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 5
        size: 1
        numberOfElements: 5
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - missed: true
        - missed: true
        first: true
        totalElements: 0
        empty: true
    PageTestCaseDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/TestCaseDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 5
        size: 1
        numberOfElements: 5
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - workflow:
            name: name
            id: 1
          lastModifiedDate: 5
          editable: true
          lastModifiedBy: lastModifiedBy
          fullName: fullName
          description: description
          precondition: precondition
          testLayer:
            createdDate: 7
            lastModifiedDate: 1
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 4
          tags:
          - name: name
            id: 6
          - name: name
            id: 6
          automated: true
          external: true
          preconditionHtml: preconditionHtml
          deleted: true
          createdDate: 5
          expectedResult: expectedResult
          createdBy: createdBy
          expectedResultHtml: expectedResultHtml
          name: name
          descriptionHtml: descriptionHtml
          links:
          - name: name
            type: type
            url: url
          - name: name
            type: type
            url: url
          id: 0
          projectId: 6
          hash: hash
          status:
            createdDate: 4
            color: color
            lastModifiedDate: 7
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 2
        - workflow:
            name: name
            id: 1
          lastModifiedDate: 5
          editable: true
          lastModifiedBy: lastModifiedBy
          fullName: fullName
          description: description
          precondition: precondition
          testLayer:
            createdDate: 7
            lastModifiedDate: 1
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 4
          tags:
          - name: name
            id: 6
          - name: name
            id: 6
          automated: true
          external: true
          preconditionHtml: preconditionHtml
          deleted: true
          createdDate: 5
          expectedResult: expectedResult
          createdBy: createdBy
          expectedResultHtml: expectedResultHtml
          name: name
          descriptionHtml: descriptionHtml
          links:
          - name: name
            type: type
            url: url
          - name: name
            type: type
            url: url
          id: 0
          projectId: 6
          hash: hash
          status:
            createdDate: 4
            color: color
            lastModifiedDate: 7
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 2
        first: true
        totalElements: 0
        empty: true
    BlobStorageUpdateStats:
      type: object
      properties:
        testResultCount:
          type: integer
          format: int32
        testResultAttachmentCount:
          type: integer
          format: int32
        testFixtureResultCount:
          type: integer
          format: int32
        testFixtureResultAttachmentCount:
          type: integer
          format: int32
        testCaseAttachmentCount:
          type: integer
          format: int32
      description: ""
      example:
        testFixtureResultCount: 1
        testCaseAttachmentCount: 5
        testResultCount: 0
        testFixtureResultAttachmentCount: 5
        testResultAttachmentCount: 6
    BlobStorageStats:
      type: object
      properties:
        totalSpace:
          type: integer
          format: int64
        usedSpace:
          type: integer
          format: int64
        availableSpace:
          type: integer
          format: int64
      description: ""
      example:
        usedSpace: 6
        availableSpace: 1
        totalSpace: 0
    PageStatusDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/StatusDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 5
        size: 1
        numberOfElements: 5
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdDate: 4
          color: color
          lastModifiedDate: 7
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          id: 2
        - createdDate: 4
          color: color
          lastModifiedDate: 7
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          id: 2
        first: true
        totalElements: 0
        empty: true
    PageSharedStepDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/SharedStepDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 4
        size: 1
        numberOfElements: 7
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - archived: true
          attachmentsCount: 7
          createdDate: 3
          lastModifiedDate: 2
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          stepsCount: 2
          testCasesCount: 9
          id: 5
          projectId: 5
        - archived: true
          attachmentsCount: 7
          createdDate: 3
          lastModifiedDate: 2
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          stepsCount: 2
          testCasesCount: 9
          id: 5
          projectId: 5
        first: true
        totalElements: 0
        empty: true
    PageSharedStepAttachmentRowDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/SharedStepAttachmentRowDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 5
        size: 1
        numberOfElements: 5
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - missed: true
          name: name
          contentLength: 6
          id: 0
          contentType: contentType
        - missed: true
          name: name
          contentLength: 6
          id: 0
          contentType: contentType
        first: true
        totalElements: 0
        empty: true
    PageRoleSchemaDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/RoleSchemaDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 9
        size: 1
        numberOfElements: 3
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - role:
            createdDate: 1
            lastModifiedDate: 5
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 6
          createdDate: 2
          lastModifiedDate: 7
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          id: 5
          projectId: 5
          key: key
        - role:
            createdDate: 1
            lastModifiedDate: 5
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 6
          createdDate: 2
          lastModifiedDate: 7
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          id: 5
          projectId: 5
          key: key
        first: true
        totalElements: 0
        empty: true
    PageProjectDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/ProjectDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 7
        size: 1
        numberOfElements: 9
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdDate: 5
          lastModifiedDate: 2
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          isPublic: true
          description: description
          descriptionHtml: descriptionHtml
          id: 5
          abbr: abbr
          favorite: true
        - createdDate: 5
          lastModifiedDate: 2
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          isPublic: true
          description: description
          descriptionHtml: descriptionHtml
          id: 5
          abbr: abbr
          favorite: true
        first: true
        totalElements: 0
        empty: true
    PageCategoryMatcherDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/CategoryMatcherDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 9
        size: 1
        numberOfElements: 3
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdDate: 2
          lastModifiedDate: 7
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          messageRegex: messageRegex
          traceRegex: traceRegex
          id: 5
          category:
            createdDate: 6
            color: color
            lastModifiedDate: 7
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            description: description
            id: 1
            projectId: 1
          projectId: 5
        - createdDate: 2
          lastModifiedDate: 7
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          messageRegex: messageRegex
          traceRegex: traceRegex
          id: 5
          category:
            createdDate: 6
            color: color
            lastModifiedDate: 7
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            description: description
            id: 1
            projectId: 1
          projectId: 5
        first: true
        totalElements: 0
        empty: true
    PageCategoryDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/CategoryDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 5
        size: 1
        numberOfElements: 5
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdDate: 6
          color: color
          lastModifiedDate: 7
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          description: description
          id: 1
          projectId: 1
        - createdDate: 6
          color: color
          lastModifiedDate: 7
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          description: description
          id: 1
          projectId: 1
        first: true
        totalElements: 0
        empty: true
    ProjectStatsDto:
      type: object
      properties:
        manualTestCases:
          type: integer
          format: int32
        automatedTestCases:
          type: integer
          format: int32
        launches:
          type: integer
          format: int32
      description: ""
      example:
        manualTestCases: 0
        automatedTestCases: 6
        launches: 1
    PageProjectCollaboratorDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/ProjectCollaboratorDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 5
        size: 1
        numberOfElements: 5
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - username: username
        - username: username
        first: true
        totalElements: 0
        empty: true
    ProjectCollaboratorDto:
      type: object
      properties:
        username:
          type: string
      description: ""
      example:
        username: username
    PageProjectSuggestDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/ProjectSuggestDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 5
        size: 1
        numberOfElements: 2
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - name: name
          isPublic: true
          id: 5
          abbr: abbr
        - name: name
          isPublic: true
          id: 5
          abbr: abbr
        first: true
        totalElements: 0
        empty: true
    ProjectSuggestDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        abbr:
          type: string
        isPublic:
          type: boolean
      description: ""
      example:
        name: name
        isPublic: true
        id: 5
        abbr: abbr
    PageProjectGroupAccessDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/ProjectGroupAccessDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 9
        size: 1
        numberOfElements: 3
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - permissionSetName: permissionSetName
          permissionSetId: 7
          group:
            name: name
            usersCount: 5
            id: 5
            projectsCount: 2
            users:
            - username: username
            - username: username
        - permissionSetName: permissionSetName
          permissionSetId: 7
          group:
            name: name
            usersCount: 5
            id: 5
            projectsCount: 2
            users:
            - username: username
            - username: username
        first: true
        totalElements: 0
        empty: true
    PageProjectCollaboratorAccessDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/ProjectCollaboratorAccessDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 5
        size: 1
        numberOfElements: 2
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - permissionSetName: permissionSetName
          permissionSetId: 5
          projectGroups:
          - permissionSetName: permissionSetName
            permissionSetId: 7
            group:
              name: name
              usersCount: 5
              id: 5
              projectsCount: 2
              users:
              - username: username
              - username: username
          - permissionSetName: permissionSetName
            permissionSetId: 7
            group:
              name: name
              usersCount: 5
              id: 5
              projectsCount: 2
              users:
              - username: username
              - username: username
          username: username
        - permissionSetName: permissionSetName
          permissionSetId: 5
          projectGroups:
          - permissionSetName: permissionSetName
            permissionSetId: 7
            group:
              name: name
              usersCount: 5
              id: 5
              projectsCount: 2
              users:
              - username: username
              - username: username
          - permissionSetName: permissionSetName
            permissionSetId: 7
            group:
              name: name
              usersCount: 5
              id: 5
              projectsCount: 2
              users:
              - username: username
              - username: username
          username: username
        first: true
        totalElements: 0
        empty: true
    PagePermissionSetDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/PermissionSetDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 5
        size: 1
        numberOfElements: 2
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - permissions:
          - project:configure
          - project:configure
          name: name
          id: 5
        - permissions:
          - project:configure
          - project:configure
          name: name
          id: 5
        first: true
        totalElements: 0
        empty: true
    PageMuteDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/MuteDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 9
        size: 1
        numberOfElements: 3
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - reason: reason
          reasonHtml: reasonHtml
          createdDate: 2
          lastModifiedDate: 7
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          id: 5
          issues:
          - summary: summary
            name: name
            integrationId: 6
            closed: true
            id: 0
            url: url
            status: status
          - summary: summary
            name: name
            integrationId: 6
            closed: true
            id: 0
            url: url
            status: status
          testCaseId: 5
        - reason: reason
          reasonHtml: reasonHtml
          createdDate: 2
          lastModifiedDate: 7
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          id: 5
          issues:
          - summary: summary
            name: name
            integrationId: 6
            closed: true
            id: 0
            url: url
            status: status
          - summary: summary
            name: name
            integrationId: 6
            closed: true
            id: 0
            url: url
            status: status
          testCaseId: 5
        first: true
        totalElements: 0
        empty: true
    PageMemberDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/MemberDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 5
        size: 1
        numberOfElements: 5
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - role:
            createdDate: 1
            lastModifiedDate: 5
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 6
          name: name
          id: 0
        - role:
            createdDate: 1
            lastModifiedDate: 5
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 6
          name: name
          id: 0
        first: true
        totalElements: 0
        empty: true
    PageLaunchDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/LaunchDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 5
        size: 1
        numberOfElements: 5
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - lastModifiedDate: 5
          lastModifiedBy: lastModifiedBy
          issues:
          - summary: summary
            name: name
            integrationId: 6
            closed: true
            id: 0
            url: url
            status: status
          - summary: summary
            name: name
            integrationId: 6
            closed: true
            id: 0
            url: url
            status: status
          tags:
          - name: name
            id: 1
          - name: name
            id: 1
          external: true
          autoclose: true
          createdDate: 5
          createdBy: createdBy
          name: name
          closed: true
          links:
          - name: name
            type: type
            url: url
          - name: name
            type: type
            url: url
          id: 0
          projectId: 6
        - lastModifiedDate: 5
          lastModifiedBy: lastModifiedBy
          issues:
          - summary: summary
            name: name
            integrationId: 6
            closed: true
            id: 0
            url: url
            status: status
          - summary: summary
            name: name
            integrationId: 6
            closed: true
            id: 0
            url: url
            status: status
          tags:
          - name: name
            id: 1
          - name: name
            id: 1
          external: true
          autoclose: true
          createdDate: 5
          createdBy: createdBy
          name: name
          closed: true
          links:
          - name: name
            type: type
            url: url
          - name: name
            type: type
            url: url
          id: 0
          projectId: 6
        first: true
        totalElements: 0
        empty: true
    PageStatisticWidgetItem:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/StatisticWidgetItem'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 5
        size: 1
        numberOfElements: 2
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - uid: uid
          statistic:
          - count: 5
            status: failed
          - count: 5
            status: failed
          name: name
        - uid: uid
          statistic:
          - count: 5
            status: failed
          - count: 5
            status: failed
          name: name
        first: true
        totalElements: 0
        empty: true
    StatisticWidgetItem:
      type: object
      properties:
        uid:
          type: string
        name:
          type: string
        statistic:
          type: array
          items:
            $ref: '#/components/schemas/TestStatusCount'
      description: ""
      example:
        uid: uid
        statistic:
        - count: 5
          status: failed
        - count: 5
          status: failed
        name: name
    TestStatusCount:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/TestStatus'
        count:
          type: integer
          format: int64
      description: ""
      example:
        count: 5
        status: failed
    LaunchVariableDto:
      type: object
      properties:
        key:
          type: string
        values:
          type: array
          items:
            type: string
      description: ""
      example:
        values:
        - values
        - values
        key: key
    PageLaunchVariableDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/LaunchVariableDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 5
        size: 1
        numberOfElements: 5
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - values:
          - values
          - values
          key: key
        - values:
          - values
          - values
          key: key
        first: true
        totalElements: 0
        empty: true
    PageTestResultRetriesRowDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/TestResultRetriesRowDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 9
        size: 1
        numberOfElements: 3
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - previousRetry:
            name: name
            id: 7
            status: null
          name: name
          id: 5
          testCaseId: 5
          status: failed
          totalRetries: 2
        - previousRetry:
            name: name
            id: 7
            status: null
          name: name
          id: 5
          testCaseId: 5
          status: failed
          totalRetries: 2
        first: true
        totalElements: 0
        empty: true
    Retry:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        status:
          $ref: '#/components/schemas/TestStatus'
      description: ""
      example:
        name: name
        id: 7
        status: null
    TestResultRetriesRowDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        testCaseId:
          type: integer
          format: int64
        name:
          type: string
        status:
          $ref: '#/components/schemas/TestStatus'
        totalRetries:
          type: integer
          format: int64
        previousRetry:
          $ref: '#/components/schemas/Retry'
      description: ""
      example:
        previousRetry:
          name: name
          id: 7
          status: null
        name: name
        id: 5
        testCaseId: 5
        status: failed
        totalRetries: 2
    LaunchProgressDto:
      type: object
      properties:
        ready:
          type: boolean
      description: ""
      example:
        ready: true
    LaunchMemberStatsDto:
      type: object
      properties:
        assignee:
          type: string
        statistic:
          type: array
          items:
            $ref: '#/components/schemas/TestStatusCount'
        mutedCount:
          type: integer
          format: int64
        retriedCount:
          type: integer
          format: int64
        defectsCount:
          type: integer
          format: int64
        durationSum:
          type: integer
          format: int64
      description: ""
      example:
        statistic:
        - count: 5
          status: failed
        - count: 5
          status: failed
        mutedCount: 5
        durationSum: 7
        defectsCount: 2
        retriedCount: 5
        assignee: assignee
    PageLaunchMemberStatsDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/LaunchMemberStatsDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 9
        size: 1
        numberOfElements: 3
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - statistic:
          - count: 5
            status: failed
          - count: 5
            status: failed
          mutedCount: 5
          durationSum: 7
          defectsCount: 2
          retriedCount: 5
          assignee: assignee
        - statistic:
          - count: 5
            status: failed
          - count: 5
            status: failed
          mutedCount: 5
          durationSum: 7
          defectsCount: 2
          retriedCount: 5
          assignee: assignee
        first: true
        totalElements: 0
        empty: true
    TestDurationCount:
      type: object
      properties:
        duration:
          type: integer
          format: int64
        count:
          type: integer
          format: int64
      description: ""
      example:
        duration: 0
        count: 6
    DefectCountRowDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        closed:
          type: boolean
        issue:
          $ref: '#/components/schemas/IssueDto'
        count:
          type: integer
          format: int64
      description: ""
      example:
        issue:
          summary: summary
          name: name
          integrationId: 6
          closed: true
          id: 0
          url: url
          status: status
        name: name
        count: 5
        closed: true
        id: 5
    PageDefectCountRowDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/DefectCountRowDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 2
        size: 1
        numberOfElements: 7
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - issue:
            summary: summary
            name: name
            integrationId: 6
            closed: true
            id: 0
            url: url
            status: status
          name: name
          count: 5
          closed: true
          id: 5
        - issue:
            summary: summary
            name: name
            integrationId: 6
            closed: true
            id: 0
            url: url
            status: status
          name: name
          count: 5
          closed: true
          id: 5
        first: true
        totalElements: 0
        empty: true
    PageLaunchTagDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/LaunchTagDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 5
        size: 1
        numberOfElements: 5
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - name: name
          id: 1
        - name: name
          id: 1
        first: true
        totalElements: 0
        empty: true
    LaunchDiffStatusChangeDto:
      type: object
      properties:
        testCaseId:
          type: integer
          format: int64
        fromId:
          type: integer
          format: int64
        fromName:
          type: string
        fromStatus:
          $ref: '#/components/schemas/TestStatus'
        fromMessage:
          type: string
        fromTrace:
          type: string
        toId:
          type: integer
          format: int64
        toName:
          type: string
        toStatus:
          $ref: '#/components/schemas/TestStatus'
        toMessage:
          type: string
        toTrace:
          type: string
      description: ""
      example:
        toId: 1
        toStatus: null
        fromStatus: failed
        toMessage: toMessage
        toName: toName
        fromName: fromName
        fromTrace: fromTrace
        toTrace: toTrace
        fromId: 6
        fromMessage: fromMessage
        testCaseId: 0
    LaunchDiffTestResultDto:
      type: object
      properties:
        testCaseId:
          type: integer
          format: int64
        id:
          type: integer
          format: int64
        name:
          type: string
        status:
          $ref: '#/components/schemas/TestStatus'
        message:
          type: string
        trace:
          type: string
      description: ""
      example:
        trace: trace
        name: name
        id: 6
        message: message
        testCaseId: 0
        status: failed
    LaunchDiffMode:
      type: string
      description: ""
      enum:
      - all
      - intersect
      - diff
    LaunchDiffCell:
      type: object
      properties:
        launchId:
          type: integer
          format: int64
        launchName:
          type: string
        status:
          $ref: '#/components/schemas/TestStatus'
        results:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/LaunchDiffTestResult'
      description: ""
      example:
        launchId: 5
        launchName: launchName
        results:
        - duration: 7
          name: name
          id: 2
          manual: true
          status: null
        - duration: 7
          name: name
          id: 2
          manual: true
          status: null
        status: failed
    LaunchDiffRow:
      type: object
      properties:
        testCaseId:
          type: integer
          format: int64
        testCaseName:
          type: string
        cells:
          type: array
          items:
            $ref: '#/components/schemas/LaunchDiffCell'
      description: ""
      example:
        cells:
        - launchId: 5
          launchName: launchName
          results:
          - duration: 7
            name: name
            id: 2
            manual: true
            status: null
          - duration: 7
            name: name
            id: 2
            manual: true
            status: null
          status: failed
        - launchId: 5
          launchName: launchName
          results:
          - duration: 7
            name: name
            id: 2
            manual: true
            status: null
          - duration: 7
            name: name
            id: 2
            manual: true
            status: null
          status: failed
        testCaseName: testCaseName
        testCaseId: 5
    LaunchDiffTestResult:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        status:
          $ref: '#/components/schemas/TestStatus'
        duration:
          type: integer
          format: int64
        manual:
          type: boolean
      description: ""
      example:
        duration: 7
        name: name
        id: 2
        manual: true
        status: null
    PageLaunchDiffRow:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/LaunchDiffRow'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 9
        size: 1
        numberOfElements: 3
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - cells:
          - launchId: 5
            launchName: launchName
            results:
            - duration: 7
              name: name
              id: 2
              manual: true
              status: null
            - duration: 7
              name: name
              id: 2
              manual: true
              status: null
            status: failed
          - launchId: 5
            launchName: launchName
            results:
            - duration: 7
              name: name
              id: 2
              manual: true
              status: null
            - duration: 7
              name: name
              id: 2
              manual: true
              status: null
            status: failed
          testCaseName: testCaseName
          testCaseId: 5
        - cells:
          - launchId: 5
            launchName: launchName
            results:
            - duration: 7
              name: name
              id: 2
              manual: true
              status: null
            - duration: 7
              name: name
              id: 2
              manual: true
              status: null
            status: failed
          - launchId: 5
            launchName: launchName
            results:
            - duration: 7
              name: name
              id: 2
              manual: true
              status: null
            - duration: 7
              name: name
              id: 2
              manual: true
              status: null
            status: failed
          testCaseName: testCaseName
          testCaseId: 5
        first: true
        totalElements: 0
        empty: true
    TestCaseInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
        selector:
          type: string
      description: ""
      example:
        selector: selector
        id: 0
    PageJobDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/JobDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 5
        size: 1
        numberOfElements: 5
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - name: name
          id: 0
          type: allure_testops
          parameters:
          - name: name
            id: 6
            value: value
          - name: name
            id: 6
            value: value
          url: url
        - name: name
          id: 0
          type: allure_testops
          parameters:
          - name: name
            id: 6
            value: value
          - name: name
            id: 6
            value: value
          url: url
        first: true
        totalElements: 0
        empty: true
    PageIssueSchemaDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/IssueSchemaDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 3
        size: 1
        numberOfElements: 2
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdDate: 7
          lastModifiedDate: 9
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          integrationId: 2
          id: 5
          projectId: 5
          key: key
        - createdDate: 7
          lastModifiedDate: 9
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          integrationId: 2
          id: 5
          projectId: 5
          key: key
        first: true
        totalElements: 0
        empty: true
    PageIssueDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/IssueDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 5
        size: 1
        numberOfElements: 5
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - summary: summary
          name: name
          integrationId: 6
          closed: true
          id: 0
          url: url
          status: status
        - summary: summary
          name: name
          integrationId: 6
          closed: true
          id: 0
          url: url
          status: status
        first: true
        totalElements: 0
        empty: true
    PageIntegrationDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 9
        size: 1
        numberOfElements: 3
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdDate: 2
          lastModifiedDate: 7
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          id: 5
          projectsCount: 5
          info:
            operations:
            - issue_create
            - issue_create
            name: name
            description: description
            routines:
            - endpoint
            - endpoint
            type: allure_testops
        - createdDate: 2
          lastModifiedDate: 7
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          id: 5
          projectsCount: 5
          info:
            operations:
            - issue_create
            - issue_create
            name: name
            description: description
            routines:
            - endpoint
            - endpoint
            type: allure_testops
        first: true
        totalElements: 0
        empty: true
    PageIntegrationWebhookDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationWebhookDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 9
        size: 1
        numberOfElements: 3
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdDate: 2
          lastUsedDate: 5
          lastModifiedDate: 7
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          firstEight: firstEight
          disabled: true
          id: 5
        - createdDate: 2
          lastUsedDate: 5
          lastModifiedDate: 7
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          firstEight: firstEight
          disabled: true
          id: 5
        first: true
        totalElements: 0
        empty: true
    IntegrationWebhookLogDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        webhookId:
          type: integer
          format: int64
        body:
          type: string
        contentType:
          type: string
      description: ""
      example:
        webhookId: 5
        id: 5
        body: body
        contentType: contentType
    PageIntegrationWebhookLogDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationWebhookLogDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 2
        size: 1
        numberOfElements: 7
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - webhookId: 5
          id: 5
          body: body
          contentType: contentType
        - webhookId: 5
          id: 5
          body: body
          contentType: contentType
        first: true
        totalElements: 0
        empty: true
    ExtProject:
      type: object
      properties:
        id:
          type: string
        key:
          type: string
        name:
          type: string
      description: ""
      example:
        name: name
        id: id
        key: key
    ExtSelectValue:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      description: ""
      example:
        name: name
        id: id
    ExtFormField:
      required:
      - type
      type: object
      properties:
        name:
          type: string
        required:
          type: boolean
        dependsOnFields:
          type: array
          items:
            type: string
        type:
          type: string
      discriminator:
        propertyName: Type_
    ExtFormFieldCheckbox:
      type: object
      properties:
        labelName:
          type: string
        defaultValue:
          type: boolean
      description: ""
      allOf:
      - $ref: '#/components/schemas/ExtFormField'
    ExtFormFieldComposite:
      type: object
      properties:
        labelName:
          type: string
        description:
          type: string
      description: ""
      allOf:
      - $ref: '#/components/schemas/ExtFormField'
    ExtFormFieldExternalSelect:
      type: object
      properties:
        labelName:
          type: string
      description: ""
      allOf:
      - $ref: '#/components/schemas/ExtFormField'
    ExtFormFieldFormChoice:
      type: object
      properties:
        labelName:
          type: string
        description:
          type: string
        classifier:
          type: string
        options:
          type: array
          items:
            $ref: '#/components/schemas/ExtFormFieldFormChoiceOption'
      description: ""
      allOf:
      - $ref: '#/components/schemas/ExtFormField'
    ExtFormFieldFormChoiceOption:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    ExtFormFieldList:
      type: object
      properties:
        labelName:
          type: string
        description:
          type: string
      description: ""
      allOf:
      - $ref: '#/components/schemas/ExtFormField'
    ExtFormFieldNumber:
      type: object
      properties:
        labelName:
          type: string
        defaultValue:
          type: integer
          format: int64
        description:
          type: string
      description: ""
      allOf:
      - $ref: '#/components/schemas/ExtFormField'
    ExtFormFieldOption:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    ExtFormFieldPassword:
      type: object
      properties:
        labelName:
          type: string
        description:
          type: string
      description: ""
      allOf:
      - $ref: '#/components/schemas/ExtFormField'
    ExtFormFieldSelect:
      type: object
      properties:
        labelName:
          type: string
        options:
          type: array
          items:
            $ref: '#/components/schemas/ExtFormFieldOption'
        multi:
          type: boolean
        description:
          type: string
        defaultValue:
          type: string
      description: ""
      allOf:
      - $ref: '#/components/schemas/ExtFormField'
    ExtFormFieldText:
      type: object
      properties:
        description:
          type: string
        labelName:
          type: string
        defaultValue:
          type: string
      description: ""
      allOf:
      - $ref: '#/components/schemas/ExtFormField'
    ExtFormFieldTextarea:
      type: object
      properties:
        labelName:
          type: string
        defaultValue:
          type: string
      description: ""
      allOf:
      - $ref: '#/components/schemas/ExtFormField'
    ExtFormFieldUnknown:
      type: object
      properties:
        labelName:
          type: string
        description:
          type: string
      description: ""
      allOf:
      - $ref: '#/components/schemas/ExtFormField'
    ProjectIntegrationFieldsFormDto:
      type: object
      properties:
        projectFields:
          type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/ExtFormFieldCheckbox'
            - $ref: '#/components/schemas/ExtFormFieldComposite'
            - $ref: '#/components/schemas/ExtFormFieldExternalSelect'
            - $ref: '#/components/schemas/ExtFormFieldFormChoice'
            - $ref: '#/components/schemas/ExtFormFieldList'
            - $ref: '#/components/schemas/ExtFormFieldNumber'
            - $ref: '#/components/schemas/ExtFormFieldPassword'
            - $ref: '#/components/schemas/ExtFormFieldSelect'
            - $ref: '#/components/schemas/ExtFormFieldText'
            - $ref: '#/components/schemas/ExtFormFieldTextarea'
            - $ref: '#/components/schemas/ExtFormFieldUnknown'
        projectFieldsValues:
          type: object
          additionalProperties:
            type: object
        defaultProjectFieldsValues:
          type: object
          additionalProperties:
            type: object
        secretFields:
          type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/ExtFormFieldCheckbox'
            - $ref: '#/components/schemas/ExtFormFieldComposite'
            - $ref: '#/components/schemas/ExtFormFieldExternalSelect'
            - $ref: '#/components/schemas/ExtFormFieldFormChoice'
            - $ref: '#/components/schemas/ExtFormFieldList'
            - $ref: '#/components/schemas/ExtFormFieldNumber'
            - $ref: '#/components/schemas/ExtFormFieldPassword'
            - $ref: '#/components/schemas/ExtFormFieldSelect'
            - $ref: '#/components/schemas/ExtFormFieldText'
            - $ref: '#/components/schemas/ExtFormFieldTextarea'
            - $ref: '#/components/schemas/ExtFormFieldUnknown'
        secretSpecified:
          type: boolean
        defaultSecretSpecified:
          type: boolean
      description: ""
      example:
        projectFields:
        - ""
        - ""
        secretFields:
        - ""
        - ""
        defaultSecretSpecified: true
        defaultProjectFieldsValues:
          key: {}
        secretSpecified: true
        projectFieldsValues:
          key: {}
    PageProjectIntegrationDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/ProjectIntegrationDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 5
        size: 1
        numberOfElements: 5
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - settings: {}
          createdDate: 1
          lastModifiedDate: 5
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          disabled: true
          id: 0
          projectId: 6
          info:
            operations:
            - issue_create
            - issue_create
            name: name
            description: description
            routines:
            - endpoint
            - endpoint
            type: allure_testops
        - settings: {}
          createdDate: 1
          lastModifiedDate: 5
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          disabled: true
          id: 0
          projectId: 6
          info:
            operations:
            - issue_create
            - issue_create
            name: name
            description: description
            routines:
            - endpoint
            - endpoint
            type: allure_testops
        first: true
        totalElements: 0
        empty: true
    ExtIssueType:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      description: ""
      example:
        name: name
        id: id
    ExtIssueLink:
      type: object
      properties:
        url:
          type: string
        key:
          type: string
        summary:
          type: string
        status:
          type: string
        closed:
          type: boolean
      description: ""
      example:
        summary: summary
        closed: true
        url: url
        key: key
        status: status
    IntegrationFieldsFormDto:
      type: object
      properties:
        globalFields:
          type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/ExtFormFieldCheckbox'
            - $ref: '#/components/schemas/ExtFormFieldComposite'
            - $ref: '#/components/schemas/ExtFormFieldExternalSelect'
            - $ref: '#/components/schemas/ExtFormFieldFormChoice'
            - $ref: '#/components/schemas/ExtFormFieldList'
            - $ref: '#/components/schemas/ExtFormFieldNumber'
            - $ref: '#/components/schemas/ExtFormFieldPassword'
            - $ref: '#/components/schemas/ExtFormFieldSelect'
            - $ref: '#/components/schemas/ExtFormFieldText'
            - $ref: '#/components/schemas/ExtFormFieldTextarea'
            - $ref: '#/components/schemas/ExtFormFieldUnknown'
        globalFieldsValues:
          type: object
          additionalProperties:
            type: object
        defaultProjectFields:
          type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/ExtFormFieldCheckbox'
            - $ref: '#/components/schemas/ExtFormFieldComposite'
            - $ref: '#/components/schemas/ExtFormFieldExternalSelect'
            - $ref: '#/components/schemas/ExtFormFieldFormChoice'
            - $ref: '#/components/schemas/ExtFormFieldList'
            - $ref: '#/components/schemas/ExtFormFieldNumber'
            - $ref: '#/components/schemas/ExtFormFieldPassword'
            - $ref: '#/components/schemas/ExtFormFieldSelect'
            - $ref: '#/components/schemas/ExtFormFieldText'
            - $ref: '#/components/schemas/ExtFormFieldTextarea'
            - $ref: '#/components/schemas/ExtFormFieldUnknown'
        defaultProjectFieldsValues:
          type: object
          additionalProperties:
            type: object
        defaultSecretFields:
          type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/ExtFormFieldCheckbox'
            - $ref: '#/components/schemas/ExtFormFieldComposite'
            - $ref: '#/components/schemas/ExtFormFieldExternalSelect'
            - $ref: '#/components/schemas/ExtFormFieldFormChoice'
            - $ref: '#/components/schemas/ExtFormFieldList'
            - $ref: '#/components/schemas/ExtFormFieldNumber'
            - $ref: '#/components/schemas/ExtFormFieldPassword'
            - $ref: '#/components/schemas/ExtFormFieldSelect'
            - $ref: '#/components/schemas/ExtFormFieldText'
            - $ref: '#/components/schemas/ExtFormFieldTextarea'
            - $ref: '#/components/schemas/ExtFormFieldUnknown'
        defaultSecretSpecified:
          type: boolean
      description: ""
      example:
        globalFields:
        - ""
        - ""
        globalFieldsValues:
          key: {}
        defaultSecretSpecified: true
        defaultSecretFields:
        - ""
        - ""
        defaultProjectFieldsValues:
          key: {}
        defaultProjectFields:
        - ""
        - ""
    PageIntegrationExportDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationExportDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 2
        size: 1
        numberOfElements: 4
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - settings: {}
          syncDelaySec: 7
          disableTcCreate: true
          lastModifiedDate: 3
          lastModifiedBy: lastModifiedBy
          integrationId: 5
          launchAql: launchAql
          projectKey: projectKey
          createdDate: 9
          createdBy: createdBy
          disableLaunchSync: true
          disabled: true
          id: 5
          projectId: 2
          tcAql: tcAql
        - settings: {}
          syncDelaySec: 7
          disableTcCreate: true
          lastModifiedDate: 3
          lastModifiedBy: lastModifiedBy
          integrationId: 5
          launchAql: launchAql
          projectKey: projectKey
          createdDate: 9
          createdBy: createdBy
          disableLaunchSync: true
          disabled: true
          id: 5
          projectId: 2
          tcAql: tcAql
        first: true
        totalElements: 0
        empty: true
    PageIntegrationInfoDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationInfoDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 5
        size: 1
        numberOfElements: 5
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - operations:
          - issue_create
          - issue_create
          name: name
          description: description
          routines:
          - endpoint
          - endpoint
          type: allure_testops
        - operations:
          - issue_create
          - issue_create
          name: name
          description: description
          routines:
          - endpoint
          - endpoint
          type: allure_testops
        first: true
        totalElements: 0
        empty: true
    PageImportRequestDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/ImportRequestDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 4
        size: 1
        numberOfElements: 7
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - originalFileName: originalFileName
          countImported: 7
          lastModifiedDate: 2
          lastModifiedBy: lastModifiedBy
          errorMessage: errorMessage
          type: test_case_csv
          storageKey: storageKey
          countFailed: 9
          createdDate: 3
          createdBy: createdBy
          contentLength: 2
          id: 5
          state: stored
          projectId: 5
          contentType: contentType
        - originalFileName: originalFileName
          countImported: 7
          lastModifiedDate: 2
          lastModifiedBy: lastModifiedBy
          errorMessage: errorMessage
          type: test_case_csv
          storageKey: storageKey
          countFailed: 9
          createdDate: 3
          createdBy: createdBy
          contentLength: 2
          id: 5
          state: stored
          projectId: 5
          contentType: contentType
        first: true
        totalElements: 0
        empty: true
    LaunchPreviewDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        projectId:
          type: integer
          format: int64
        statistic:
          type: array
          items:
            $ref: '#/components/schemas/TestStatusCount'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/LaunchTagDto'
        issues:
          type: array
          items:
            $ref: '#/components/schemas/IssueDto'
        links:
          type: array
          items:
            $ref: '#/components/schemas/ExternalLinkDto'
        environment:
          type: array
          items:
            $ref: '#/components/schemas/EnvVarValueDto'
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/JobRunDto'
        closed:
          type: boolean
        external:
          type: boolean
        newDefectsCount:
          type: integer
          format: int64
        knownDefectsCount:
          type: integer
          format: int64
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        statistic:
        - count: 5
          status: failed
        - count: 5
          status: failed
        lastModifiedDate: 3
        jobs:
        - lastModifiedDate: 9
          lastModifiedBy: lastModifiedBy
          errorMessage: errorMessage
          externalId: externalId
          url: url
          launchId: 5
          createdDate: 9
          stage: run_failure
          createdBy: createdBy
          name: name
          id: 1
          job:
            name: name
            id: 4
            type: allure_testops
            url: url
          status: failed
        - lastModifiedDate: 9
          lastModifiedBy: lastModifiedBy
          errorMessage: errorMessage
          externalId: externalId
          url: url
          launchId: 5
          createdDate: 9
          stage: run_failure
          createdBy: createdBy
          name: name
          id: 1
          job:
            name: name
            id: 4
            type: allure_testops
            url: url
          status: failed
        lastModifiedBy: lastModifiedBy
        newDefectsCount: 2
        issues:
        - summary: summary
          name: name
          integrationId: 6
          closed: true
          id: 0
          url: url
          status: status
        - summary: summary
          name: name
          integrationId: 6
          closed: true
          id: 0
          url: url
          status: status
        tags:
        - name: name
          id: 1
        - name: name
          id: 1
        environment:
        - name: name
          variable:
            createdDate: 1
            lastModifiedDate: 5
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 6
          id: 0
        - name: name
          variable:
            createdDate: 1
            lastModifiedDate: 5
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 6
          id: 0
        external: true
        createdDate: 9
        createdBy: createdBy
        name: name
        closed: true
        links:
        - name: name
          type: type
          url: url
        - name: name
          type: type
          url: url
        id: 5
        knownDefectsCount: 7
        projectId: 5
    PageLaunchPreviewDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/LaunchPreviewDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 2
        size: 1
        numberOfElements: 4
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - statistic:
          - count: 5
            status: failed
          - count: 5
            status: failed
          lastModifiedDate: 3
          jobs:
          - lastModifiedDate: 9
            lastModifiedBy: lastModifiedBy
            errorMessage: errorMessage
            externalId: externalId
            url: url
            launchId: 5
            createdDate: 9
            stage: run_failure
            createdBy: createdBy
            name: name
            id: 1
            job:
              name: name
              id: 4
              type: allure_testops
              url: url
            status: failed
          - lastModifiedDate: 9
            lastModifiedBy: lastModifiedBy
            errorMessage: errorMessage
            externalId: externalId
            url: url
            launchId: 5
            createdDate: 9
            stage: run_failure
            createdBy: createdBy
            name: name
            id: 1
            job:
              name: name
              id: 4
              type: allure_testops
              url: url
            status: failed
          lastModifiedBy: lastModifiedBy
          newDefectsCount: 2
          issues:
          - summary: summary
            name: name
            integrationId: 6
            closed: true
            id: 0
            url: url
            status: status
          - summary: summary
            name: name
            integrationId: 6
            closed: true
            id: 0
            url: url
            status: status
          tags:
          - name: name
            id: 1
          - name: name
            id: 1
          environment:
          - name: name
            variable:
              createdDate: 1
              lastModifiedDate: 5
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              id: 6
            id: 0
          - name: name
            variable:
              createdDate: 1
              lastModifiedDate: 5
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              id: 6
            id: 0
          external: true
          createdDate: 9
          createdBy: createdBy
          name: name
          closed: true
          links:
          - name: name
            type: type
            url: url
          - name: name
            type: type
            url: url
          id: 5
          knownDefectsCount: 7
          projectId: 5
        - statistic:
          - count: 5
            status: failed
          - count: 5
            status: failed
          lastModifiedDate: 3
          jobs:
          - lastModifiedDate: 9
            lastModifiedBy: lastModifiedBy
            errorMessage: errorMessage
            externalId: externalId
            url: url
            launchId: 5
            createdDate: 9
            stage: run_failure
            createdBy: createdBy
            name: name
            id: 1
            job:
              name: name
              id: 4
              type: allure_testops
              url: url
            status: failed
          - lastModifiedDate: 9
            lastModifiedBy: lastModifiedBy
            errorMessage: errorMessage
            externalId: externalId
            url: url
            launchId: 5
            createdDate: 9
            stage: run_failure
            createdBy: createdBy
            name: name
            id: 1
            job:
              name: name
              id: 4
              type: allure_testops
              url: url
            status: failed
          lastModifiedBy: lastModifiedBy
          newDefectsCount: 2
          issues:
          - summary: summary
            name: name
            integrationId: 6
            closed: true
            id: 0
            url: url
            status: status
          - summary: summary
            name: name
            integrationId: 6
            closed: true
            id: 0
            url: url
            status: status
          tags:
          - name: name
            id: 1
          - name: name
            id: 1
          environment:
          - name: name
            variable:
              createdDate: 1
              lastModifiedDate: 5
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              id: 6
            id: 0
          - name: name
            variable:
              createdDate: 1
              lastModifiedDate: 5
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              id: 6
            id: 0
          external: true
          createdDate: 9
          createdBy: createdBy
          name: name
          closed: true
          links:
          - name: name
            type: type
            url: url
          - name: name
            type: type
            url: url
          id: 5
          knownDefectsCount: 7
          projectId: 5
        first: true
        totalElements: 0
        empty: true
    IdeScenarioDto:
      type: object
      properties:
        steps:
          type: array
          items:
            $ref: '#/components/schemas/IdeStepDto'
      description: ""
      example:
        steps:
        - expectedResult: expectedResult
          name: name
        - expectedResult: expectedResult
          name: name
    IdeStepDto:
      type: object
      properties:
        name:
          type: string
        expectedResult:
          type: string
      description: ""
      example:
        expectedResult: expectedResult
        name: name
    GlobalSettingsDto:
      type: object
      properties:
        projectCreateAllowedRole:
          $ref: '#/components/schemas/AllowedRoleDto'
      description: ""
      example:
        projectCreateAllowedRole: ADMIN
    GlobalPermissionsDto:
      type: object
      properties:
        projectCreate:
          type: boolean
      description: ""
      example:
        projectCreate: true
    PageFilterDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/FilterDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 9
        size: 1
        numberOfElements: 3
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - shared: true
          createdDate: 2
          lastModifiedDate: 7
          createdBy: createdBy
          editable: true
          lastModifiedBy: lastModifiedBy
          name: name
          id: 5
          body: body
          projectId: 5
          base: true
        - shared: true
          createdDate: 2
          lastModifiedDate: 7
          createdBy: createdBy
          editable: true
          lastModifiedBy: lastModifiedBy
          name: name
          id: 5
          body: body
          projectId: 5
          base: true
        first: true
        totalElements: 0
        empty: true
    PageExportRequestDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/ExportRequestDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 5
        size: 1
        numberOfElements: 5
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - shared: true
          lastModifiedDate: 5
          lastModifiedBy: lastModifiedBy
          errorMessage: errorMessage
          description: description
          type: LAUNCH_PDF
          storageKey: storageKey
          createdDate: 1
          createdBy: createdBy
          name: name
          id: 0
          projectId: 6
          status: queued
        - shared: true
          lastModifiedDate: 5
          lastModifiedBy: lastModifiedBy
          errorMessage: errorMessage
          description: description
          type: LAUNCH_PDF
          storageKey: storageKey
          createdDate: 1
          createdBy: createdBy
          name: name
          id: 0
          projectId: 6
          status: queued
        first: true
        totalElements: 0
        empty: true
    LaunchPdfStructure:
      type: object
      properties:
        structure:
          type: array
          items:
            $ref: '#/components/schemas/LaunchPdfPart'
      description: ""
      example:
        structure:
        - header
        - header
    PageEnvVarSchemaDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/EnvVarSchemaDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 9
        size: 1
        numberOfElements: 3
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdDate: 2
          envVar:
            createdDate: 1
            lastModifiedDate: 5
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 6
          lastModifiedDate: 7
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          id: 5
          projectId: 5
          key: key
        - createdDate: 2
          envVar:
            createdDate: 1
            lastModifiedDate: 5
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 6
          lastModifiedDate: 7
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          id: 5
          projectId: 5
          key: key
        first: true
        totalElements: 0
        empty: true
    PageDefectMatcherDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/DefectMatcherDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 5
        size: 1
        numberOfElements: 5
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdDate: 1
          lastModifiedDate: 5
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          messageRegex: messageRegex
          traceRegex: traceRegex
          id: 0
          defectId: 6
        - createdDate: 1
          lastModifiedDate: 5
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          messageRegex: messageRegex
          traceRegex: traceRegex
          id: 0
          defectId: 6
        first: true
        totalElements: 0
        empty: true
    LaunchRowDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        closed:
          type: boolean
        statistic:
          type: array
          items:
            $ref: '#/components/schemas/TestStatusCount'
      description: ""
      example:
        statistic:
        - count: 5
          status: failed
        - count: 5
          status: failed
        name: name
        closed: true
        id: 5
    PageLaunchRowDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/LaunchRowDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 5
        size: 1
        numberOfElements: 2
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - statistic:
          - count: 5
            status: failed
          - count: 5
            status: failed
          name: name
          closed: true
          id: 5
        - statistic:
          - count: 5
            status: failed
          - count: 5
            status: failed
          name: name
          closed: true
          id: 5
        first: true
        totalElements: 0
        empty: true
    DashboardDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        projectId:
          type: integer
          format: int64
        name:
          type: string
        createdDate:
          type: integer
          format: int64
        lastModifiedDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastModifiedBy:
          type: string
      description: ""
      example:
        createdDate: 2
        lastModifiedDate: 7
        createdBy: createdBy
        lastModifiedBy: lastModifiedBy
        name: name
        id: 5
        projectId: 5
    PageDashboardDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/DashboardDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 9
        size: 1
        numberOfElements: 3
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdDate: 2
          lastModifiedDate: 7
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          id: 5
          projectId: 5
        - createdDate: 2
          lastModifiedDate: 7
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          name: name
          id: 5
          projectId: 5
        first: true
        totalElements: 0
        empty: true
    PageCommentDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/CommentDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 9
        size: 1
        numberOfElements: 3
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdDate: 2
          lastModifiedDate: 7
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          bodyHtml: bodyHtml
          id: 5
          body: body
          testCaseId: 5
        - createdDate: 2
          lastModifiedDate: 7
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          bodyHtml: bodyHtml
          id: 5
          body: body
          testCaseId: 5
        first: true
        totalElements: 0
        empty: true
    PageCleanerSchemaDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/CleanerSchemaDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 3
        size: 1
        numberOfElements: 2
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - delay: 2
          createdDate: 7
          lastModifiedDate: 9
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          id: 5
          projectId: 5
          status: failed
          target: attachment
        - delay: 2
          createdDate: 7
          lastModifiedDate: 9
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          id: 5
          projectId: 5
          status: failed
          target: attachment
        first: true
        totalElements: 0
        empty: true
    PageCustomFieldValueDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/CustomFieldValueDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 5
        size: 1
        numberOfElements: 5
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - name: name
          id: 0
          customField:
            createdDate: 7
            lastModifiedDate: 9
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 2
        - name: name
          id: 0
          customField:
            createdDate: 7
            lastModifiedDate: 9
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 2
        first: true
        totalElements: 0
        empty: true
    PageCustomFieldSchemaDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/CustomFieldSchemaDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 9
        size: 1
        numberOfElements: 3
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdDate: 2
          lastModifiedDate: 7
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          id: 5
          projectId: 5
          key: key
          customField:
            createdDate: 7
            lastModifiedDate: 9
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 2
        - createdDate: 2
          lastModifiedDate: 7
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          id: 5
          projectId: 5
          key: key
          customField:
            createdDate: 7
            lastModifiedDate: 9
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            name: name
            id: 2
        first: true
        totalElements: 0
        empty: true
    AnalyticDto:
      type: object
      properties:
        date:
          type: integer
          format: int64
        testCasesCount:
          type: integer
          format: int64
        testResultsCount:
          type: integer
          format: int64
        avgSuccessRate:
          type: number
          format: double
        avgDuration:
          type: number
          format: double
        sumDuration:
          type: integer
          format: int64
        retriedCount:
          type: integer
          format: int64
        notRetriedCount:
          type: integer
          format: int64
        sumDurationRetried:
          type: integer
          format: int64
        sumDurationNotRetried:
          type: integer
          format: int64
      description: ""
      example:
        date: 0
        sumDuration: 2
        sumDurationNotRetried: 2
        avgSuccessRate: 5.962133916683182377482808078639209270477294921875
        notRetriedCount: 9
        testResultsCount: 1
        retriedCount: 7
        testCasesCount: 6
        sumDurationRetried: 3
        avgDuration: 5.63737665663332876420099637471139430999755859375
    TestCaseLastResultDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        testResultId:
          type: integer
          format: int64
        status:
          $ref: '#/components/schemas/TestStatus'
        date:
          type: integer
          format: int64
      description: ""
      example:
        date: 1
        name: name
        testResultId: 6
        id: 0
        status: failed
    AnalyticTrByStatusTrendDto:
      type: object
      properties:
        date:
          type: integer
          format: int64
        failed:
          type: integer
          format: int64
        broken:
          type: integer
          format: int64
        passed:
          type: integer
          format: int64
        skipped:
          type: integer
          format: int64
      description: ""
      example:
        date: 0
        broken: 1
        failed: 6
        passed: 5
        skipped: 5
    AnalyticMuteTrendDto:
      type: object
      properties:
        date:
          type: integer
          format: int64
        muted:
          type: integer
          format: int64
      description: ""
      example:
        date: 0
        muted: 6
    AnalyticLaunchDurationHistogramDto:
      type: object
      properties:
        bucket:
          type: integer
          format: int64
        min:
          type: integer
          format: int64
        max:
          type: integer
          format: int64
        passedCount:
          type: integer
          format: int64
        failedCount:
          type: integer
          format: int64
        brokenCount:
          type: integer
          format: int64
      description: ""
      example:
        bucket: 0
        min: 6
        failedCount: 5
        brokenCount: 2
        max: 1
        passedCount: 5
    AnalyticTcStatusCountDto:
      type: object
      properties:
        statusId:
          type: integer
          format: int64
        statusName:
          type: string
        statusColor:
          type: string
        count:
          type: integer
          format: int64
      description: ""
      example:
        statusId: 0
        statusColor: statusColor
        statusName: statusName
        count: 6
    AnalyticTcAutomationCountDto:
      type: object
      properties:
        automated:
          type: boolean
        count:
          type: integer
          format: int64
      description: ""
      example:
        automated: true
        count: 0
    AnalyticAutomationTrendDto:
      type: object
      properties:
        date:
          type: integer
          format: int64
        automatedCount:
          type: integer
          format: int64
        manualCount:
          type: integer
          format: int64
        sumDurationAutomated:
          type: integer
          format: int64
        sumDurationManual:
          type: integer
          format: int64
      description: ""
      example:
        date: 0
        automatedCount: 6
        manualCount: 1
        sumDurationManual: 5
        sumDurationAutomated: 5
    PageAccessGroupDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/AccessGroupDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 5
        size: 1
        numberOfElements: 5
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - name: name
          usersCount: 5
          id: 5
          projectsCount: 2
          users:
          - username: username
          - username: username
        - name: name
          usersCount: 5
          id: 5
          projectsCount: 2
          users:
          - username: username
          - username: username
        first: true
        totalElements: 0
        empty: true
    PageAccessGroupUserDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/AccessGroupUserDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 5
        size: 1
        numberOfElements: 5
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - username: username
        - username: username
        first: true
        totalElements: 0
        empty: true
    AccessGroupPaDto:
      required:
      - permissionSetId
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        abbr:
          type: string
        isPublic:
          type: boolean
        permissionSetId:
          type: integer
          format: int64
      description: ""
      example:
        permissionSetId: 5
        name: name
        isPublic: true
        id: 5
        abbr: abbr
    PageAccessGroupPaDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/AccessGroupPaDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
      example:
        number: 2
        size: 1
        numberOfElements: 7
        last: true
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 1
          offset: 5
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - permissionSetId: 5
          name: name
          isPublic: true
          id: 5
          abbr: abbr
        - permissionSetId: 5
          name: name
          isPublic: true
          id: 5
          abbr: abbr
        first: true
        totalElements: 0
        empty: true
    id_content_body:
      required:
      - file
      type: object
      properties:
        file:
          type: string
          format: binary
    id_content_body_1:
      required:
      - file
      type: object
      properties:
        file:
          type: string
          format: binary
    id_content_body_2:
      required:
      - file
      type: object
      properties:
        file:
          type: string
          format: binary
    id_content_body_3:
      required:
      - file
      type: object
      properties:
        file:
          type: string
          format: binary
    upload_body:
      type: object
      properties:
        file:
          type: array
          items:
            type: string
            format: binary
        archive:
          type: array
          items:
            type: string
            format: binary
    upload_file_body:
      required:
      - file
      type: object
      properties:
        file:
          type: array
          items:
            type: string
            format: binary
    upload_archive_body:
      required:
      - file
      type: object
      properties:
        file:
          type: array
          items:
            type: string
            format: binary
    testresult_attachment_body:
      required:
      - file
      type: object
      properties:
        file:
          type: array
          items:
            type: string
            format: binary
    testfixtureresult_attachment_body:
      required:
      - file
      type: object
      properties:
        file:
          type: array
          items:
            type: string
            format: binary
    testcase_attachment_body:
      required:
      - file
      type: object
      properties:
        file:
          type: array
          items:
            type: string
            format: binary
    sharedstep_attachment_body:
      required:
      - file
      type: object
      properties:
        file:
          type: array
          items:
            type: string
            format: binary
    launchId_upload_body:
      required:
      - info
      type: object
      properties:
        info:
          $ref: '#/components/schemas/LaunchExistingUploadDto'
        file:
          type: array
          items:
            type: string
            format: binary
        archive:
          type: array
          items:
            type: string
            format: binary
    upload_file_body_1:
      required:
      - file
      - info
      type: object
      properties:
        info:
          $ref: '#/components/schemas/LaunchExistingUploadDto'
        file:
          type: array
          items:
            type: string
            format: binary
    upload_archive_body_1:
      required:
      - file
      - info
      type: object
      properties:
        info:
          $ref: '#/components/schemas/LaunchExistingUploadDto'
        file:
          type: array
          items:
            type: string
            format: binary
    launch_upload_body:
      required:
      - info
      type: object
      properties:
        info:
          $ref: '#/components/schemas/LaunchCreateAndUploadDto'
        file:
          type: array
          items:
            type: string
            format: binary
        archive:
          type: array
          items:
            type: string
            format: binary
    id_upload_body:
      type: object
      properties:
        info:
          $ref: '#/components/schemas/JobRunUploadInfoDto'
        file:
          type: array
          items:
            type: string
            format: binary
        archive:
          type: array
          items:
            type: string
            format: binary
    upload_file_body_2:
      required:
      - file
      type: object
      properties:
        info:
          $ref: '#/components/schemas/JobRunUploadInfoDto'
        file:
          type: array
          items:
            type: string
            format: binary
    upload_archive_body_2:
      required:
      - file
      type: object
      properties:
        info:
          $ref: '#/components/schemas/JobRunUploadInfoDto'
        file:
          type: array
          items:
            type: string
            format: binary
    importrequest_body:
      required:
      - file
      type: object
      properties:
        file:
          type: string
          format: binary
